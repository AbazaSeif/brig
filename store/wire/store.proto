package brig.store;
option go_package = "wire";

// Might be extended with more esoteric types in the future.
enum NodeType {
  UNKNOWN = 0;
  FILE = 1;
  DIRECTORY = 2;
  COMMIT = 3;
}

// An Object is a container for a file, a directory or a Ref.
message Node {
  // Type of this node (see above)
  required NodeType type = 1;
  // Global identifier of this node, since hash and path
  // might change sometimes.
  required uint64 ID = 2;

  // Individual types:
  optional File file = 3;
  optional Directory directory = 4;
  optional Commit commit = 5;
}

// TODO: Move some of the attrs to the common node (file_size, hash, parent)?

message File {
    required string name = 1;
    optional bytes key = 2;
    optional bytes hash = 3;
    required bytes parent = 4;
    required int64 file_size = 5;

    // Timestamp formated as RFC 3339
    required bytes mod_time = 6;
}

message Directory {
    required string name = 1;
    required uint64 file_size = 2;
    required bytes parent = 3;
    required bytes hash = 4;
    required bytes mod_time = 5;

    // Directory contents (hashtable contents [name => link]):
    repeated bytes links = 6;
    repeated string names = 7;
}

// Dirent is like a file, but does not include sensitive information.
// TODO: remove this
message Dirent {
    required string path = 1;
    required int64 file_size = 2;
    required int32 kind = 3;
    required bytes mod_time = 4;
}

message Dirlist {
  // TODO: replace with Object
    repeated Dirent entries = 1;
}

message Checkpoint {
    required uint64 id = 1;
    required bytes hash = 2;
    required uint64 index = 3;
    required int32 change = 4;
    required string author = 5;
}

message History {
    repeated Checkpoint hist = 1 [packed=false];
}

// A pack stores the history of a file besides it's metadata.
// i.e. everything needed for an exported file.
message Pack {
    required File file = 1;
    required History history = 2;
}

// Store is the exported form of a store.
message Store {
    repeated Pack packs = 1;
    required Commits commits = 2;
}

// Optional merge information for merge commits
message Merge {
    required string with = 1;
    required bytes hash = 2;
}

// Commit is a bag of changes, either automatically done
// or by the user.
message Commit {
    required string message = 1;
    required string author = 2;
    required bytes mod_time = 3;
    required bytes hash = 4;
    required bytes root = 5;

    // List of checkpoints:
    repeated Checkpoint checkpoints = 6;

    // Link to parent hash (empty for initial commit):
    optional bytes parent_hash = 7;

    // Merge information if this is a merge commit.
    optional Merge merge = 8;
}

// Commits is an ordered list of commits
message Commits {
    repeated Commit commits = 1;
}

message Ref {
    required string name = 1;
    required bytes hash = 2;
}
