// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Change describes a single change
type Change struct{ capnp.Struct }

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0x9592300df48789af

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Change{st}, err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Change{st}, err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.RootPtr()
	return Change{root.Struct()}, err
}

func (s Change) String() string {
	str, _ := text.Marshal(0x9592300df48789af, s.Struct)
	return str
}

func (s Change) Mask() uint64 {
	return s.Struct.Uint64(0)
}

func (s Change) SetMask(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Change) Head() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Change) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Change) SetHead(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Change) Next() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Change) HasNext() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Change) SetNext(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Change) Curr() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Change) HasCurr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Change) SetCurr(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Change) ReferToPath() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Change) HasReferToPath() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Change) ReferToPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Change) SetReferToPath(v string) error {
	return s.Struct.SetText(3, v)
}

// Change_List is a list of Change.
type Change_List struct{ capnp.List }

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Change_List{l}, err
}

func (s Change_List) At(i int) Change { return Change{s.List.Struct(i)} }

func (s Change_List) Set(i int, v Change) error { return s.List.SetStruct(i, v.Struct) }

func (s Change_List) String() string {
	str, _ := text.MarshalList(0x9592300df48789af, s.List)
	return str
}

// Change_Promise is a wrapper for a Change promised by a client call.
type Change_Promise struct{ *capnp.Pipeline }

func (p Change_Promise) Struct() (Change, error) {
	s, err := p.Pipeline.Struct()
	return Change{s}, err
}

// Patch contains a single change
type Patch struct{ capnp.Struct }

// Patch_TypeID is the unique identifier for the type Patch.
const Patch_TypeID = 0x927c7336e3054805

func NewPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Patch{st}, err
}

func NewRootPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Patch{st}, err
}

func ReadRootPatch(msg *capnp.Message) (Patch, error) {
	root, err := msg.RootPtr()
	return Patch{root.Struct()}, err
}

func (s Patch) String() string {
	str, _ := text.Marshal(0x927c7336e3054805, s.Struct)
	return str
}

func (s Patch) From() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Patch) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Patch) SetFrom(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Patch) Changes() (Change_List, error) {
	p, err := s.Struct.Ptr(1)
	return Change_List{List: p.List()}, err
}

func (s Patch) HasChanges() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Patch) SetChanges(v Change_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewChanges sets the changes field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s Patch) NewChanges(n int32) (Change_List, error) {
	l, err := NewChange_List(s.Struct.Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Patch_List is a list of Patch.
type Patch_List struct{ capnp.List }

// NewPatch creates a new list of Patch.
func NewPatch_List(s *capnp.Segment, sz int32) (Patch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Patch_List{l}, err
}

func (s Patch_List) At(i int) Patch { return Patch{s.List.Struct(i)} }

func (s Patch_List) Set(i int, v Patch) error { return s.List.SetStruct(i, v.Struct) }

func (s Patch_List) String() string {
	str, _ := text.MarshalList(0x927c7336e3054805, s.List)
	return str
}

// Patch_Promise is a wrapper for a Patch promised by a client call.
type Patch_Promise struct{ *capnp.Pipeline }

func (p Patch_Promise) Struct() (Patch, error) {
	s, err := p.Pipeline.Struct()
	return Patch{s}, err
}

const schema_b943b54bf1683782 = "x\xda|\x90?\x8b\x13Q\x14\xc5\xcf\xb9o\xc6\xb8\x92" +
	"\x98}\xceT\x12\xc9\x14\x16*\xc4\xec\xb2\xa0b\xe3\x9f" +
	"X\x086y`c#\xbc\x9d}\xc9\x04\xddI\x98\x19" +
	"u\x8b\x15\xff\xb0\xa2++\xc8\x8a`\xe7G\xb0\xb2\xb0" +
	"\xb0\xdc\x8f\xb0~\x01\xc1^\xb0\xb2\x19\x99h\xd6\x14b" +
	"\xf7\xce\x8f\xc3\xbb\xf7w\x17\xbf]\x96e\x7f,\x80i" +
	"\xf9\x87J\xff\xba\xff\xf5\\\xbe\xb9\x0b\xddb\xf9\xf4|" +
	"\xf2\xfd\xc6\xc7\xde'\xf8R\x03VN\xf0\x18\x83\x0ek" +
	"A\x87\xed\xe0\x16\x1f\x80\xe5\x87\xed\xe7?\x1aK\xbbo" +
	"aZ\x9c\xef{U\x7f\x8f\xc7\x19\xec\xb3\x16\xec\xb3\xbd" +
	"\xe2K\x9b\xb8P\xc6\xb6\x18\xe4\xdd\xfb\xb1\xca\xbb\xb1\x9d" +
	"\xa4\x93\xee\xc4\x16qrv\xfa\xbe\xd8\xb7E\xcc\xa4O" +
	"\x1a\x8fR\xde~\xf3\xde|\xfe\xf2r\x0f\xc6\x13^i" +
	"\x91u@\xf3gY\xb5\x92(\x1eKZ\xd8Q\x9aG" +
	"6\xcaG\xe9\xf0\xae\x8b.\xc5\x89M\x87\x0e0\x87\x95" +
	"\x07x\x04\xf4\xe93\x809\xa9h\x96\x84\x9a\x0cY\xc1" +
	"\xceU\xc0\x9cR4\xd7\x84\xcdA6^g\x03\xc2\x06" +
	"\xf8\xe8\xf7\x0f9\x8f\x82}E.\xfe\x15\x04+\xf8\xff" +
	"\xfd{\x89M\xd5\xd0\xfd[ \x9a\x0a,\xf3\x08\xcb\xde" +
	"tJ\xb4\xa6\\\x1eg\xa3U7\xe7\xf0G\x81&<" +
	"PxX)l(\x9a-\xe1\xcc\xe0I\xc56\x15\xcd" +
	"\x0b\xa1\x16\x86\x14@?\xab\xe0cE\xb3#\xd4JB" +
	"*@oWpK\xd1\xbc\x16jO\x85\xf4\x00\xfdj" +
	"\x150;\x8a\xe6\x9d\xb0\xb9n\xf3;\\\x80p\x01l" +
	"&\xce\xae\xcd\xae\xd1L\xddFq\x10\xe2{Y6\x0b" +
	"e\xe6\x06.\xbb9\xee\xa3f\x8b\x84u\x08\xeb\xe0\xaf" +
	"\x00\x00\x00\xff\xff\x8cw\x88\xb6"

func init() {
	schemas.Register(schema_b943b54bf1683782,
		0x927c7336e3054805,
		0x9592300df48789af)
}
