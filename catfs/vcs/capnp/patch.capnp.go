// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp2 "github.com/sahib/brig/catfs/nodes/capnp"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Change describes a single change
type Change struct{ capnp.Struct }

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0x9592300df48789af

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Change{st}, err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Change{st}, err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.RootPtr()
	return Change{root.Struct()}, err
}

func (s Change) String() string {
	str, _ := text.Marshal(0x9592300df48789af, s.Struct)
	return str
}

func (s Change) Mask() uint64 {
	return s.Struct.Uint64(0)
}

func (s Change) SetMask(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Change) Head() (capnp2.Node, error) {
	p, err := s.Struct.Ptr(0)
	return capnp2.Node{Struct: p.Struct()}, err
}

func (s Change) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Change) SetHead(v capnp2.Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewHead() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(s.Struct.Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) Next() (capnp2.Node, error) {
	p, err := s.Struct.Ptr(1)
	return capnp2.Node{Struct: p.Struct()}, err
}

func (s Change) HasNext() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Change) SetNext(v capnp2.Node) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewNext sets the next field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewNext() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(s.Struct.Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) Curr() (capnp2.Node, error) {
	p, err := s.Struct.Ptr(2)
	return capnp2.Node{Struct: p.Struct()}, err
}

func (s Change) HasCurr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Change) SetCurr(v capnp2.Node) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewCurr sets the curr field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewCurr() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(s.Struct.Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) ReferToPath() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Change) HasReferToPath() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Change) ReferToPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Change) SetReferToPath(v string) error {
	return s.Struct.SetText(3, v)
}

// Change_List is a list of Change.
type Change_List struct{ capnp.List }

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Change_List{l}, err
}

func (s Change_List) At(i int) Change { return Change{s.List.Struct(i)} }

func (s Change_List) Set(i int, v Change) error { return s.List.SetStruct(i, v.Struct) }

func (s Change_List) String() string {
	str, _ := text.MarshalList(0x9592300df48789af, s.List)
	return str
}

// Change_Promise is a wrapper for a Change promised by a client call.
type Change_Promise struct{ *capnp.Pipeline }

func (p Change_Promise) Struct() (Change, error) {
	s, err := p.Pipeline.Struct()
	return Change{s}, err
}

func (p Change_Promise) Head() capnp2.Node_Promise {
	return capnp2.Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Change_Promise) Next() capnp2.Node_Promise {
	return capnp2.Node_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Change_Promise) Curr() capnp2.Node_Promise {
	return capnp2.Node_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

// Patch contains a single change
type Patch struct{ capnp.Struct }

// Patch_TypeID is the unique identifier for the type Patch.
const Patch_TypeID = 0x927c7336e3054805

func NewPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Patch{st}, err
}

func NewRootPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Patch{st}, err
}

func ReadRootPatch(msg *capnp.Message) (Patch, error) {
	root, err := msg.RootPtr()
	return Patch{root.Struct()}, err
}

func (s Patch) String() string {
	str, _ := text.Marshal(0x927c7336e3054805, s.Struct)
	return str
}

func (s Patch) From() (capnp2.Node, error) {
	p, err := s.Struct.Ptr(0)
	return capnp2.Node{Struct: p.Struct()}, err
}

func (s Patch) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Patch) SetFrom(v capnp2.Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Patch) NewFrom() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(s.Struct.Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Patch) Changes() (Change_List, error) {
	p, err := s.Struct.Ptr(1)
	return Change_List{List: p.List()}, err
}

func (s Patch) HasChanges() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Patch) SetChanges(v Change_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewChanges sets the changes field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s Patch) NewChanges(n int32) (Change_List, error) {
	l, err := NewChange_List(s.Struct.Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Patch_List is a list of Patch.
type Patch_List struct{ capnp.List }

// NewPatch creates a new list of Patch.
func NewPatch_List(s *capnp.Segment, sz int32) (Patch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Patch_List{l}, err
}

func (s Patch_List) At(i int) Patch { return Patch{s.List.Struct(i)} }

func (s Patch_List) Set(i int, v Patch) error { return s.List.SetStruct(i, v.Struct) }

func (s Patch_List) String() string {
	str, _ := text.MarshalList(0x927c7336e3054805, s.List)
	return str
}

// Patch_Promise is a wrapper for a Patch promised by a client call.
type Patch_Promise struct{ *capnp.Pipeline }

func (p Patch_Promise) Struct() (Patch, error) {
	s, err := p.Pipeline.Struct()
	return Patch{s}, err
}

func (p Patch_Promise) From() capnp2.Node_Promise {
	return capnp2.Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_b943b54bf1683782 = "x\xda|\xd0\xbfk\x14O\x1c\xc6\xf1\xe7\xf9\xcc\xee\xf7" +
	"\xbe\x91\xd3\xbb\xf1\xb6\x92\x83\xdbB\xc1\x08z\x17B\x14" +
	"D\xfcu\x16\x82\xcd\x0dX\x0b\x93\xcd\xdc\xed\xa1\xd9;" +
	"vWM\x91\x10\x95\x88Fr\x10\"\x82\x9d\x9d\xad\x95" +
	"E\x0aK\xff\x05\xff\x81\x94V\x82U\x9a\x95=\x7f\x05" +
	"\x12\xec\x867\x0f3\xbc\xa6s\x95\xd7e\xceo\xfb\x80" +
	"\xb9\xe2\xffW\xf8\xb7\xfd\xbd\x8b\xd9\xea\x0et\x93\xc5\xb3" +
	"K\xf1\xb7;\x1f\xbb\xbb\xf0\xa5\x02\xcc\xaf\xc9I6&" +
	"RiL\xa4\xd5\xd8\x95\xc7`\xf1a\xf3\xc5\xf7\xe3\x9d" +
	"\x9d70M\x1e\xdc{\xe5\xfe\x8c:\xc5\xc6\x82\xaa4" +
	"\x16Tk\xde\xa9\x16\xb1]D6\xefg\xedG\x91\xca" +
	"\xda\x91\x1d'\xe3\xf6\xd8\xe6Q|az\xbe\xdc\xb3y" +
	"\xc4\xb8G\x1a\x8fR\xdc{\xfd\xce|\xfa\xf2\xea3\x8c" +
	"'\xbc\xd1$\xab\x80\xe6~Q\xae\xe20\x1aI\x92\xdb" +
	"a\x92\x856\xcc\x86\xc9\xe0\x81\x0b\xafE\xb1M\x06\x0e" +
	"0\xff+\x0f\xf0\x08\xe8\xd9s\x809\xadh:BM" +
	"\x06,\xe3\xf9\x9b\x809\xabhn\x09k\xfdt\xb4\xcc" +
	"z\xb1\xb7\xdf\x1f\xaf\x7f\x9d}\x0f\x90up\xfd\xe7]" +
	"\x19O\x80=E\xd6\xffR\xc12\xfe[\xd2\x8dm\xa2" +
	"\x06\xeehJ8\xa5\xcc\xf1\x18\x8b\xee\xf4\x95pI\xb9" +
	",J\x87\x8b\xee\x80\xe6\x17\x86&\xf8\x83Y+1+" +
	"\x8afC\xf8\xdb\xf2\xb4l\xab\x8a\xe6\xa5P\x0b\x03\x0a" +
	"\xa0\x9f\x97\xf1\x89\xa2\xd9\x12j%\x01\x15\xa07\xcb\xb8" +
	"\xa1h\xb6\x85\xdaS\x01=@O\x16\x01\xb3\xa5h\xde" +
	"\x0ak\xcb6\xbb\xcf\x19\x08g\xc0Z\xec\xec\xd2\xe1\x7f" +
	"\xa9%n%?\"G\x0f\xd3\xf4p.R\xd7w\xe9" +
	"\xddQ\x0f\x15\x9b\xc7\xacBX\x05\x7f\x04\x00\x00\xff\xff" +
	"+5\xa05"

func init() {
	schemas.Register(schema_b943b54bf1683782,
		0x927c7336e3054805,
		0x9592300df48789af)
}
