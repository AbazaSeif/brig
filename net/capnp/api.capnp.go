// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Sync struct{ Client capnp.Client }

// Sync_TypeID is the unique identifier for the type Sync.
const Sync_TypeID = 0xf5692a07c5cf7872

func (c Sync) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Sync_Server interface {
	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error
}

func Sync_ServerToClient(s Sync_Server) Sync {
	c, _ := s.(server.Closer)
	return Sync{Client: server.New(Sync_Methods(nil, s), c)}
}

func Sync_Methods(methods []server.Method, s Sync_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Sync_fetchStore holds the arguments for a server call to Sync.fetchStore.
type Sync_fetchStore struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchStore_Params
	Results Sync_fetchStore_Results
}

// Sync_fetchPatch holds the arguments for a server call to Sync.fetchPatch.
type Sync_fetchPatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchPatch_Params
	Results Sync_fetchPatch_Results
}

// Sync_isCompleteFetchAllowed holds the arguments for a server call to Sync.isCompleteFetchAllowed.
type Sync_isCompleteFetchAllowed struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_isCompleteFetchAllowed_Params
	Results Sync_isCompleteFetchAllowed_Results
}

type Sync_fetchStore_Params struct{ capnp.Struct }

// Sync_fetchStore_Params_TypeID is the unique identifier for the type Sync_fetchStore_Params.
const Sync_fetchStore_Params_TypeID = 0xdc63044e67499411

func NewSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func NewRootSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func ReadRootSync_fetchStore_Params(msg *capnp.Message) (Sync_fetchStore_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Params{root.Struct()}, err
}

func (s Sync_fetchStore_Params) String() string {
	str, _ := text.Marshal(0xdc63044e67499411, s.Struct)
	return str
}

// Sync_fetchStore_Params_List is a list of Sync_fetchStore_Params.
type Sync_fetchStore_Params_List struct{ capnp.List }

// NewSync_fetchStore_Params creates a new list of Sync_fetchStore_Params.
func NewSync_fetchStore_Params_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_fetchStore_Params_List{l}, err
}

func (s Sync_fetchStore_Params_List) At(i int) Sync_fetchStore_Params {
	return Sync_fetchStore_Params{s.List.Struct(i)}
}

func (s Sync_fetchStore_Params_List) Set(i int, v Sync_fetchStore_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Params_List) String() string {
	str, _ := text.MarshalList(0xdc63044e67499411, s.List)
	return str
}

// Sync_fetchStore_Params_Promise is a wrapper for a Sync_fetchStore_Params promised by a client call.
type Sync_fetchStore_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Params_Promise) Struct() (Sync_fetchStore_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Params{s}, err
}

type Sync_fetchStore_Results struct{ capnp.Struct }

// Sync_fetchStore_Results_TypeID is the unique identifier for the type Sync_fetchStore_Results.
const Sync_fetchStore_Results_TypeID = 0xf834409e30e8009c

func NewSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func NewRootSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func ReadRootSync_fetchStore_Results(msg *capnp.Message) (Sync_fetchStore_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Results{root.Struct()}, err
}

func (s Sync_fetchStore_Results) String() string {
	str, _ := text.Marshal(0xf834409e30e8009c, s.Struct)
	return str
}

func (s Sync_fetchStore_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchStore_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchStore_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchStore_Results_List is a list of Sync_fetchStore_Results.
type Sync_fetchStore_Results_List struct{ capnp.List }

// NewSync_fetchStore_Results creates a new list of Sync_fetchStore_Results.
func NewSync_fetchStore_Results_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchStore_Results_List{l}, err
}

func (s Sync_fetchStore_Results_List) At(i int) Sync_fetchStore_Results {
	return Sync_fetchStore_Results{s.List.Struct(i)}
}

func (s Sync_fetchStore_Results_List) Set(i int, v Sync_fetchStore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Results_List) String() string {
	str, _ := text.MarshalList(0xf834409e30e8009c, s.List)
	return str
}

// Sync_fetchStore_Results_Promise is a wrapper for a Sync_fetchStore_Results promised by a client call.
type Sync_fetchStore_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Results_Promise) Struct() (Sync_fetchStore_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Results{s}, err
}

type Sync_fetchPatch_Params struct{ capnp.Struct }

// Sync_fetchPatch_Params_TypeID is the unique identifier for the type Sync_fetchPatch_Params.
const Sync_fetchPatch_Params_TypeID = 0xb20f728e8e60c3f5

func NewSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func NewRootSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func ReadRootSync_fetchPatch_Params(msg *capnp.Message) (Sync_fetchPatch_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Params{root.Struct()}, err
}

func (s Sync_fetchPatch_Params) String() string {
	str, _ := text.Marshal(0xb20f728e8e60c3f5, s.Struct)
	return str
}

func (s Sync_fetchPatch_Params) FromIndex() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Sync_fetchPatch_Params) SetFromIndex(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Sync_fetchPatch_Params_List is a list of Sync_fetchPatch_Params.
type Sync_fetchPatch_Params_List struct{ capnp.List }

// NewSync_fetchPatch_Params creates a new list of Sync_fetchPatch_Params.
func NewSync_fetchPatch_Params_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_fetchPatch_Params_List{l}, err
}

func (s Sync_fetchPatch_Params_List) At(i int) Sync_fetchPatch_Params {
	return Sync_fetchPatch_Params{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Params_List) Set(i int, v Sync_fetchPatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Params_List) String() string {
	str, _ := text.MarshalList(0xb20f728e8e60c3f5, s.List)
	return str
}

// Sync_fetchPatch_Params_Promise is a wrapper for a Sync_fetchPatch_Params promised by a client call.
type Sync_fetchPatch_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Params_Promise) Struct() (Sync_fetchPatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Params{s}, err
}

type Sync_fetchPatch_Results struct{ capnp.Struct }

// Sync_fetchPatch_Results_TypeID is the unique identifier for the type Sync_fetchPatch_Results.
const Sync_fetchPatch_Results_TypeID = 0xc788029a0ef52479

func NewSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func NewRootSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func ReadRootSync_fetchPatch_Results(msg *capnp.Message) (Sync_fetchPatch_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Results{root.Struct()}, err
}

func (s Sync_fetchPatch_Results) String() string {
	str, _ := text.Marshal(0xc788029a0ef52479, s.Struct)
	return str
}

func (s Sync_fetchPatch_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchPatch_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchPatch_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchPatch_Results_List is a list of Sync_fetchPatch_Results.
type Sync_fetchPatch_Results_List struct{ capnp.List }

// NewSync_fetchPatch_Results creates a new list of Sync_fetchPatch_Results.
func NewSync_fetchPatch_Results_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchPatch_Results_List{l}, err
}

func (s Sync_fetchPatch_Results_List) At(i int) Sync_fetchPatch_Results {
	return Sync_fetchPatch_Results{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Results_List) Set(i int, v Sync_fetchPatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Results_List) String() string {
	str, _ := text.MarshalList(0xc788029a0ef52479, s.List)
	return str
}

// Sync_fetchPatch_Results_Promise is a wrapper for a Sync_fetchPatch_Results promised by a client call.
type Sync_fetchPatch_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Results_Promise) Struct() (Sync_fetchPatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Results{s}, err
}

type Sync_isCompleteFetchAllowed_Params struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Params_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Params.
const Sync_isCompleteFetchAllowed_Params_TypeID = 0xa29b8ab519fba593

func NewSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Params(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Params, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Params{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Params) String() string {
	str, _ := text.Marshal(0xa29b8ab519fba593, s.Struct)
	return str
}

// Sync_isCompleteFetchAllowed_Params_List is a list of Sync_isCompleteFetchAllowed_Params.
type Sync_isCompleteFetchAllowed_Params_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Params creates a new list of Sync_isCompleteFetchAllowed_Params.
func NewSync_isCompleteFetchAllowed_Params_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Params_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Params_List) At(i int) Sync_isCompleteFetchAllowed_Params {
	return Sync_isCompleteFetchAllowed_Params{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Params_List) Set(i int, v Sync_isCompleteFetchAllowed_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Params_List) String() string {
	str, _ := text.MarshalList(0xa29b8ab519fba593, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Params_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Params promised by a client call.
type Sync_isCompleteFetchAllowed_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Params_Promise) Struct() (Sync_isCompleteFetchAllowed_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Params{s}, err
}

type Sync_isCompleteFetchAllowed_Results struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Results_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Results.
const Sync_isCompleteFetchAllowed_Results_TypeID = 0xe7a1e07d1144113e

func NewSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Results(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Results, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Results{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Results) String() string {
	str, _ := text.Marshal(0xe7a1e07d1144113e, s.Struct)
	return str
}

func (s Sync_isCompleteFetchAllowed_Results) IsAllowed() bool {
	return s.Struct.Bit(0)
}

func (s Sync_isCompleteFetchAllowed_Results) SetIsAllowed(v bool) {
	s.Struct.SetBit(0, v)
}

// Sync_isCompleteFetchAllowed_Results_List is a list of Sync_isCompleteFetchAllowed_Results.
type Sync_isCompleteFetchAllowed_Results_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Results creates a new list of Sync_isCompleteFetchAllowed_Results.
func NewSync_isCompleteFetchAllowed_Results_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Results_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Results_List) At(i int) Sync_isCompleteFetchAllowed_Results {
	return Sync_isCompleteFetchAllowed_Results{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Results_List) Set(i int, v Sync_isCompleteFetchAllowed_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Results_List) String() string {
	str, _ := text.MarshalList(0xe7a1e07d1144113e, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Results_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Results promised by a client call.
type Sync_isCompleteFetchAllowed_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Results_Promise) Struct() (Sync_isCompleteFetchAllowed_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Results{s}, err
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0xb02d2ba0578cc7ff

func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Ping(Meta_ping) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xe1a9fd466eca248c

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xe1a9fd466eca248c, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xe1a9fd466eca248c, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0x9a90fde15285e327

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0x9a90fde15285e327, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0x9a90fde15285e327, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xb74958502f92fefd

func (c API) Version(ctx context.Context, params func(API_version_Params) error, opts ...capnp.CallOption) API_version_Results_Promise {
	if c.Client == nil {
		return API_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(API_version_Params{Struct: s}) }
	}
	return API_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Version(API_version) error

	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error

	Ping(Meta_ping) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := API_version{c, opts, API_version_Params{Struct: p}, API_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// API_version holds the arguments for a server call to API.version.
type API_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  API_version_Params
	Results API_version_Results
}

type API_version_Params struct{ capnp.Struct }

// API_version_Params_TypeID is the unique identifier for the type API_version_Params.
const API_version_Params_TypeID = 0xfbab528dd0716804

func NewAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func NewRootAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func ReadRootAPI_version_Params(msg *capnp.Message) (API_version_Params, error) {
	root, err := msg.RootPtr()
	return API_version_Params{root.Struct()}, err
}

func (s API_version_Params) String() string {
	str, _ := text.Marshal(0xfbab528dd0716804, s.Struct)
	return str
}

// API_version_Params_List is a list of API_version_Params.
type API_version_Params_List struct{ capnp.List }

// NewAPI_version_Params creates a new list of API_version_Params.
func NewAPI_version_Params_List(s *capnp.Segment, sz int32) (API_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return API_version_Params_List{l}, err
}

func (s API_version_Params_List) At(i int) API_version_Params {
	return API_version_Params{s.List.Struct(i)}
}

func (s API_version_Params_List) Set(i int, v API_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Params_List) String() string {
	str, _ := text.MarshalList(0xfbab528dd0716804, s.List)
	return str
}

// API_version_Params_Promise is a wrapper for a API_version_Params promised by a client call.
type API_version_Params_Promise struct{ *capnp.Pipeline }

func (p API_version_Params_Promise) Struct() (API_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Params{s}, err
}

type API_version_Results struct{ capnp.Struct }

// API_version_Results_TypeID is the unique identifier for the type API_version_Results.
const API_version_Results_TypeID = 0xebdd19e3dba3370b

func NewAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func NewRootAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func ReadRootAPI_version_Results(msg *capnp.Message) (API_version_Results, error) {
	root, err := msg.RootPtr()
	return API_version_Results{root.Struct()}, err
}

func (s API_version_Results) String() string {
	str, _ := text.Marshal(0xebdd19e3dba3370b, s.Struct)
	return str
}

func (s API_version_Results) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s API_version_Results) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// API_version_Results_List is a list of API_version_Results.
type API_version_Results_List struct{ capnp.List }

// NewAPI_version_Results creates a new list of API_version_Results.
func NewAPI_version_Results_List(s *capnp.Segment, sz int32) (API_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return API_version_Results_List{l}, err
}

func (s API_version_Results_List) At(i int) API_version_Results {
	return API_version_Results{s.List.Struct(i)}
}

func (s API_version_Results_List) Set(i int, v API_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Results_List) String() string {
	str, _ := text.MarshalList(0xebdd19e3dba3370b, s.List)
	return str
}

// API_version_Results_Promise is a wrapper for a API_version_Results promised by a client call.
type API_version_Results_Promise struct{ *capnp.Pipeline }

func (p API_version_Results_Promise) Struct() (API_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Results{s}, err
}

const schema_9bcb07fb35756ee6 = "x\xda\x9c\x94OH\x14o\x18\xc7\x9f\xe7}g\x1c\xe1" +
	"\xb7\xfe\x96\x97\xf1\xe0\x1e\xc2\xcb\x86\xb4\xe1j\x96\x84\x82" +
	"\xb9\x9a){(f\xd6C\xe9\xa9iwt\x17vg" +
	"\xd7\x99\xb1\xf4\x10\x9d\x84\x08\x95\xe8\xcfE%\xfaC\x07" +
	"\xe9\x12\x81\x04B\x87\x8c\x10\xecP\x97N%%B\x05" +
	"\xd1q\xa1\x90m\xe2\xdduvGmQ\xba\x0d\xbc\xcf" +
	"|\x9f\xcf\xf3\xfd>\xef\xdb\xba\x88\x11rL\xfc$\x02" +
	"\xa8}b\x8d\xd3\xb49\x15\xdb(\xdc\x9c\x03\x16@\x00" +
	"\x11%\x80\xe3\xefI\x1b\x02\xca\xeb\xa4\x1b\xd0\xb9\xfdx" +
	"+\xb0tc\xfea\xa9@\xe0\xe7\x05\xb2\x8c 8\xce" +
	"\xea\xf4\xf9\xfbG\x9b\x9f\x02\xab\xa7\xce\x17c\xbc}K" +
	"z3\x0f\x80\xf2\x0f\xb2&\xff\"\x12\x80\x9c'\x03\xf2" +
	"!*\x018\xf9W\x17ggM\xff3P\x03\xe8\xea" +
	"\x88t\x98\xf7a\x94\xf7)\xfc\xbe\xd5\xa2\\\x88>\xdf" +
	"\xa3\xd6NW\xe4.\xae!w\xd0\x01Y\xa3M\x00\xce" +
	"d0\xff\xff\x1c\xb9\xbe\xea\xa5\x1e\xa2\x97\xb8\x9a^T" +
	"cw\xa2\xa3\xe7\x84\xf8G\x0f\xf5\x14\xef&8\xd3\xc1" +
	"5\xa3\xbf\xb0\xb8\xe19\x19\xa3!~r\x8a\xf5\xb1\xab" +
	"\x9f\x1f|\xf5\"\x0e\xd1\x15.\x9a*\x8a\xfew\xf2\xd1" +
	"\x87\xcd\xc0\xfawP\x1b\xca\x053\xb4\x97\x17\xdc-\x16" +
	"\x98\x13o_K\xa1T~\xcf\x0cKtM~Y\x9c" +
	"\xe1\x05]\x95\xcf\xf0?\x0b\x0b\xdfZ\xefEN\xfc\xf4" +
	"L\xd0,\x14'\xe8\x10\xb8\x96\x90\x1c{7\x13{\xb2" +
	"\x05\xac\xa1\x0c#t\"\xb4:\x86n\xb7\xc4\xb5\x9cA" +
	"s-Z.\x15\xe6\x9f\xb9\xce\xb3\xba\xad\x85s)c" +
	"4\x18\xd3\x1b\xad\xf1\xb4m\xa9\x02\x15\x00\x04\x04`u" +
	"m\x00j-E\xb5\x9e`\xa3\xa9\xe7\xd2\x93\xe8\x03\x82" +
	">\xc0\xb2\x98\xe8\x15\x1b\x9c4\xe2\xe1\x94u:\x9b\xc9" +
	"\xa5u[\xef\xd7\xedx\xb2'\x9d\xce^\xd1\x13\xc1n" +
	"E3\xb5\x8cU\xfe\x91\xec\xa6\x00P\x10U\x81\x8a\x00" +
	"e\xb3\xd1]3\xc6B@\x98(\xf99j\x04\x15\xac" +
	"\x10\x08{\x08Fx_E\xb3\xe3\xc9 oJ3;" +
	"f\x8a\x01\xa8>\x8aj\x03Ag\xc4\xccf\xa2FB" +
	"\x07\x9c@\x11\x08\x8a\x9e\xc9v\x00\xf6(Q\x0f\x9e\xeb" +
	"1\xba\xc92\xd6[\xc4\xbbvY7\xadT\xd6\x88\xa0" +
	"Z\x8b\x9e\\\x01*[\x0fp0\xf4\x98n\x8dK\xbb" +
	"\xf2\x08U\xf2\xf0'4[\xc3: X\x07\xfb\x9a1" +
	"hgM\xdd5c\xbfEP4\xff\x8e\xa4j\x0e\x1a" +
	"1'N\xdb\x16Ts;e\x95*\x01\x13\x88@\x10" +
	"\xab\x81\xf7(\xd1\xf0\xb6\x93\x7f\x15\xed\xad\xd8\xe0:\x8e" +
	"\x02\x10\x14\xaa\xc5\xc7\xa9K\xfb\xe5+\x06\xe8^s\\" +
	"\x80\xed\xdb\xa4\x0e\x03aQ\x09\xb1\xfc\xe2\xa0\xfbX\xb0" +
	".~\xd6.!)?j\xe8\xdeyvd\x19\x08;" +
	",9\xae\xcd@M=\x82\x8e\x9b#\xd0x2\xc2'" +
	"/\x19\x86\xaec\xdd%\xcb\x0e\xb4\xc9\xa5\xf0\xfei\x1d" +
	"h5W\xb7o\xe3\x9f\x00\x00\x00\xff\xffbg\xb4q"

func init() {
	schemas.Register(schema_9bcb07fb35756ee6,
		0x9a90fde15285e327,
		0xa29b8ab519fba593,
		0xb02d2ba0578cc7ff,
		0xb20f728e8e60c3f5,
		0xb74958502f92fefd,
		0xc788029a0ef52479,
		0xdc63044e67499411,
		0xe1a9fd466eca248c,
		0xe7a1e07d1144113e,
		0xebdd19e3dba3370b,
		0xf5692a07c5cf7872,
		0xf834409e30e8009c,
		0xfbab528dd0716804)
}
