// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type User struct{ capnp.Struct }

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0x861de4463c5a4a22

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return User{st}, err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return User{st}, err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.RootPtr()
	return User{root.Struct()}, err
}

func (s User) String() string {
	str, _ := text.Marshal(0x861de4463c5a4a22, s.Struct)
	return str
}

func (s User) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s User) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s User) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s User) PasswordHash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s User) HasPasswordHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s User) PasswordHashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetPasswordHash(v string) error {
	return s.Struct.SetText(1, v)
}

func (s User) Salt() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s User) HasSalt() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s User) SaltBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s User) SetSalt(v string) error {
	return s.Struct.SetText(2, v)
}

func (s User) Folders() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s User) HasFolders() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s User) SetFolders(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s User) NewFolders(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s User) Rights() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.TextList{List: p.List()}, err
}

func (s User) HasRights() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s User) SetRights(v capnp.TextList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewRights sets the rights field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s User) NewRights(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// User_List is a list of User.
type User_List struct{ capnp.List }

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return User_List{l}, err
}

func (s User_List) At(i int) User { return User{s.List.Struct(i)} }

func (s User_List) Set(i int, v User) error { return s.List.SetStruct(i, v.Struct) }

func (s User_List) String() string {
	str, _ := text.MarshalList(0x861de4463c5a4a22, s.List)
	return str
}

// User_Promise is a wrapper for a User promised by a client call.
type User_Promise struct{ *capnp.Pipeline }

func (p User_Promise) Struct() (User, error) {
	s, err := p.Pipeline.Struct()
	return User{s}, err
}

const schema_a0b1c18bd0f965c4 = "x\xda\\\xca\xb1J\x03A\x18\xc4\xf1\x99\xdd;\x05\x09" +
	"\x89\x0b[*\x82\xa5\xa0!m\x10\x14\x0b\x11\xab|\x85" +
	"\x8d\xddj\xd6D\x89\xc9q{\x12-D\x85 \x8a\x0a" +
	"VV\x16\x0a\xbe\x80\x9d\x9d\x08\xdak\xe1\x1b\xf8\x12V" +
	"'\x17Hc\xf7\x9f\x1f3y\xb7\xacj\xf1+\x01\xb1" +
	"\xf1X>\xbb\xbe\xb9\xb8\xfa3}\x0e3\xc5\xfc\xdd\xff" +
	"~^\xbd=? \x8e\xc7\x81\xda\xc7\x04\xcdw\x11_" +
	"3\xc4|\xder\x99\xef\xbb\xa3\xaannU\xb7]\xd2" +
	"M\xaa\x07\xc1\xa7\x0b\xc3\xaco\x04\x9f\x02\x0dR\xac\x8e" +
	"\x80\x88\x809\x9e\x03\xe4PS\x06\x8a\x86\xb4,\xf0l" +
	"\x0f\x90SM\xb9V4JY*\xc0\\\x16\xcf\x81\xa6" +
	"\xdc*\x1a\xad-5`nV\x00\xb9\xd0\x94'E\x13" +
	"E\x96\x11`\x1e\xeb\x80\xdck\xca\x8bb\xa5\xeb\xf6=" +
	"KP,\x81y\xe2B\xe8\xf7\xd2&*k.\xb4G" +
	"\\\x09\xae\x93\x8d\xc6\xc9N\xaf\xd3\xf4i`\x19lh" +
	"\x0e\xb9\x0c.\xa5\xbb\xadv\xf6_\xff\x02\x00\x00\xff\xff" +
	"\x89\xf1=\x11"

func init() {
	schemas.Register(schema_a0b1c18bd0f965c4,
		0x861de4463c5a4a22)
}
