// Code generated by protoc-gen-gogo.
// source: daemon.proto
// DO NOT EDIT!

/*
	Package wire is a generated protocol buffer package.

	It is generated from these files:
		daemon.proto

	It has these top-level messages:
		Command
		Remote
		Response
*/
package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import brig_store "github.com/disorganizer/brig/store/wire"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The ordering in here has no particular meaning.
// The numbers just get incremented in the order that
// they were added - which is a nice history book of brig.
type MessageType int32

const (
	MessageType_STAGE         MessageType = 0
	MessageType_CAT           MessageType = 1
	MessageType_PING          MessageType = 2
	MessageType_QUIT          MessageType = 3
	MessageType_MOUNT         MessageType = 4
	MessageType_UNMOUNT       MessageType = 5
	MessageType_RM            MessageType = 6
	MessageType_ONLINE_STATUS MessageType = 7
	MessageType_SYNC          MessageType = 8
	MessageType_LIST          MessageType = 9
	MessageType_MV            MessageType = 10
	MessageType_MKDIR         MessageType = 11
	MessageType_REMOTE_ADD    MessageType = 12
	MessageType_REMOTE_REMOVE MessageType = 13
	MessageType_REMOTE_LIST   MessageType = 14
	MessageType_REMOTE_LOCATE MessageType = 15
	MessageType_REMOTE_SELF   MessageType = 16
	MessageType_HISTORY       MessageType = 17
	MessageType_STATUS        MessageType = 18
	MessageType_COMMIT        MessageType = 19
	MessageType_DIFF          MessageType = 20
	MessageType_LOG           MessageType = 21
	MessageType_PIN           MessageType = 22
	MessageType_RESET         MessageType = 23
	MessageType_EXPORT        MessageType = 24
	MessageType_IMPORT        MessageType = 25
)

var MessageType_name = map[int32]string{
	0:  "STAGE",
	1:  "CAT",
	2:  "PING",
	3:  "QUIT",
	4:  "MOUNT",
	5:  "UNMOUNT",
	6:  "RM",
	7:  "ONLINE_STATUS",
	8:  "SYNC",
	9:  "LIST",
	10: "MV",
	11: "MKDIR",
	12: "REMOTE_ADD",
	13: "REMOTE_REMOVE",
	14: "REMOTE_LIST",
	15: "REMOTE_LOCATE",
	16: "REMOTE_SELF",
	17: "HISTORY",
	18: "STATUS",
	19: "COMMIT",
	20: "DIFF",
	21: "LOG",
	22: "PIN",
	23: "RESET",
	24: "EXPORT",
	25: "IMPORT",
}
var MessageType_value = map[string]int32{
	"STAGE":         0,
	"CAT":           1,
	"PING":          2,
	"QUIT":          3,
	"MOUNT":         4,
	"UNMOUNT":       5,
	"RM":            6,
	"ONLINE_STATUS": 7,
	"SYNC":          8,
	"LIST":          9,
	"MV":            10,
	"MKDIR":         11,
	"REMOTE_ADD":    12,
	"REMOTE_REMOVE": 13,
	"REMOTE_LIST":   14,
	"REMOTE_LOCATE": 15,
	"REMOTE_SELF":   16,
	"HISTORY":       17,
	"STATUS":        18,
	"COMMIT":        19,
	"DIFF":          20,
	"LOG":           21,
	"PIN":           22,
	"RESET":         23,
	"EXPORT":        24,
	"IMPORT":        25,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

type OnlineQuery int32

const (
	// Connect to the network:
	OnlineQuery_GO_ONLINE OnlineQuery = 0
	// Disconnect all:
	OnlineQuery_GO_OFFLINE OnlineQuery = 1
	// Do not alter status; just return current:
	OnlineQuery_IS_ONLINE OnlineQuery = 2
)

var OnlineQuery_name = map[int32]string{
	0: "GO_ONLINE",
	1: "GO_OFFLINE",
	2: "IS_ONLINE",
}
var OnlineQuery_value = map[string]int32{
	"GO_ONLINE":  0,
	"GO_OFFLINE": 1,
	"IS_ONLINE":  2,
}

func (x OnlineQuery) String() string {
	return proto.EnumName(OnlineQuery_name, int32(x))
}

type Command struct {
	CommandType         MessageType              `protobuf:"varint,1,opt,name=command_type,proto3,enum=brig.daemon.MessageType" json:"command_type,omitempty"`
	AddCommand          *Command_StageCmd        `protobuf:"bytes,2,opt,name=add_command" json:"add_command,omitempty"`
	CatCommand          *Command_CatCmd          `protobuf:"bytes,3,opt,name=cat_command" json:"cat_command,omitempty"`
	PingCommand         *Command_PingCmd         `protobuf:"bytes,4,opt,name=ping_command" json:"ping_command,omitempty"`
	QuitCommand         *Command_QuitCmd         `protobuf:"bytes,5,opt,name=quit_command" json:"quit_command,omitempty"`
	MountCommand        *Command_MountCmd        `protobuf:"bytes,6,opt,name=mount_command" json:"mount_command,omitempty"`
	UnmountCommand      *Command_UnmountCmd      `protobuf:"bytes,7,opt,name=unmount_command" json:"unmount_command,omitempty"`
	RmCommand           *Command_RmCmd           `protobuf:"bytes,8,opt,name=rm_command" json:"rm_command,omitempty"`
	HistoryCommand      *Command_HistoryCmd      `protobuf:"bytes,9,opt,name=history_command" json:"history_command,omitempty"`
	OnlineStatusCommand *Command_OnlineStatusCmd `protobuf:"bytes,10,opt,name=online_status_command" json:"online_status_command,omitempty"`
	SyncCommand         *Command_SyncCmd         `protobuf:"bytes,11,opt,name=sync_command" json:"sync_command,omitempty"`
	ListCommand         *Command_ListCmd         `protobuf:"bytes,12,opt,name=list_command" json:"list_command,omitempty"`
	MvCommand           *Command_MvCmd           `protobuf:"bytes,13,opt,name=mv_command" json:"mv_command,omitempty"`
	MkdirCommand        *Command_MkdirCmd        `protobuf:"bytes,14,opt,name=mkdir_command" json:"mkdir_command,omitempty"`
	RemoteAddCommand    *Command_RemoteAddCmd    `protobuf:"bytes,15,opt,name=remote_add_command" json:"remote_add_command,omitempty"`
	RemoteRemoveCommand *Command_RemoteRemoveCmd `protobuf:"bytes,16,opt,name=remote_remove_command" json:"remote_remove_command,omitempty"`
	RemoteListCommand   *Command_RemoteListCmd   `protobuf:"bytes,17,opt,name=remote_list_command" json:"remote_list_command,omitempty"`
	RemoteLocateCommand *Command_RemoteLocateCmd `protobuf:"bytes,18,opt,name=remote_locate_command" json:"remote_locate_command,omitempty"`
	RemoteSelfCommand   *Command_RemoteSelfCmd   `protobuf:"bytes,19,opt,name=remote_self_command" json:"remote_self_command,omitempty"`
	StatusCommand       *Command_StatusCmd       `protobuf:"bytes,20,opt,name=status_command" json:"status_command,omitempty"`
	CommitCommand       *Command_CommitCmd       `protobuf:"bytes,21,opt,name=commit_command" json:"commit_command,omitempty"`
	DiffCommand         *Command_DiffCmd         `protobuf:"bytes,22,opt,name=diff_command" json:"diff_command,omitempty"`
	LogCommand          *Command_LogCmd          `protobuf:"bytes,23,opt,name=log_command" json:"log_command,omitempty"`
	PinCommand          *Command_PinCmd          `protobuf:"bytes,24,opt,name=pin_command" json:"pin_command,omitempty"`
	ExportCommand       *Command_ExportCmd       `protobuf:"bytes,25,opt,name=export_command" json:"export_command,omitempty"`
	ImportCommand       *Command_ImportCmd       `protobuf:"bytes,26,opt,name=import_command" json:"import_command,omitempty"`
	ResetCommand        *Command_ResetCmd        `protobuf:"bytes,27,opt,name=reset_command" json:"reset_command,omitempty"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}

func (m *Command) GetAddCommand() *Command_StageCmd {
	if m != nil {
		return m.AddCommand
	}
	return nil
}

func (m *Command) GetCatCommand() *Command_CatCmd {
	if m != nil {
		return m.CatCommand
	}
	return nil
}

func (m *Command) GetPingCommand() *Command_PingCmd {
	if m != nil {
		return m.PingCommand
	}
	return nil
}

func (m *Command) GetQuitCommand() *Command_QuitCmd {
	if m != nil {
		return m.QuitCommand
	}
	return nil
}

func (m *Command) GetMountCommand() *Command_MountCmd {
	if m != nil {
		return m.MountCommand
	}
	return nil
}

func (m *Command) GetUnmountCommand() *Command_UnmountCmd {
	if m != nil {
		return m.UnmountCommand
	}
	return nil
}

func (m *Command) GetRmCommand() *Command_RmCmd {
	if m != nil {
		return m.RmCommand
	}
	return nil
}

func (m *Command) GetHistoryCommand() *Command_HistoryCmd {
	if m != nil {
		return m.HistoryCommand
	}
	return nil
}

func (m *Command) GetOnlineStatusCommand() *Command_OnlineStatusCmd {
	if m != nil {
		return m.OnlineStatusCommand
	}
	return nil
}

func (m *Command) GetSyncCommand() *Command_SyncCmd {
	if m != nil {
		return m.SyncCommand
	}
	return nil
}

func (m *Command) GetListCommand() *Command_ListCmd {
	if m != nil {
		return m.ListCommand
	}
	return nil
}

func (m *Command) GetMvCommand() *Command_MvCmd {
	if m != nil {
		return m.MvCommand
	}
	return nil
}

func (m *Command) GetMkdirCommand() *Command_MkdirCmd {
	if m != nil {
		return m.MkdirCommand
	}
	return nil
}

func (m *Command) GetRemoteAddCommand() *Command_RemoteAddCmd {
	if m != nil {
		return m.RemoteAddCommand
	}
	return nil
}

func (m *Command) GetRemoteRemoveCommand() *Command_RemoteRemoveCmd {
	if m != nil {
		return m.RemoteRemoveCommand
	}
	return nil
}

func (m *Command) GetRemoteListCommand() *Command_RemoteListCmd {
	if m != nil {
		return m.RemoteListCommand
	}
	return nil
}

func (m *Command) GetRemoteLocateCommand() *Command_RemoteLocateCmd {
	if m != nil {
		return m.RemoteLocateCommand
	}
	return nil
}

func (m *Command) GetRemoteSelfCommand() *Command_RemoteSelfCmd {
	if m != nil {
		return m.RemoteSelfCommand
	}
	return nil
}

func (m *Command) GetStatusCommand() *Command_StatusCmd {
	if m != nil {
		return m.StatusCommand
	}
	return nil
}

func (m *Command) GetCommitCommand() *Command_CommitCmd {
	if m != nil {
		return m.CommitCommand
	}
	return nil
}

func (m *Command) GetDiffCommand() *Command_DiffCmd {
	if m != nil {
		return m.DiffCommand
	}
	return nil
}

func (m *Command) GetLogCommand() *Command_LogCmd {
	if m != nil {
		return m.LogCommand
	}
	return nil
}

func (m *Command) GetPinCommand() *Command_PinCmd {
	if m != nil {
		return m.PinCommand
	}
	return nil
}

func (m *Command) GetExportCommand() *Command_ExportCmd {
	if m != nil {
		return m.ExportCommand
	}
	return nil
}

func (m *Command) GetImportCommand() *Command_ImportCmd {
	if m != nil {
		return m.ImportCommand
	}
	return nil
}

func (m *Command) GetResetCommand() *Command_ResetCmd {
	if m != nil {
		return m.ResetCommand
	}
	return nil
}

type Command_StageCmd struct {
	// The abs path to the file we're going to add.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,proto3" json:"file_path,omitempty"`
	// The virtual abs path inside the repo (e.g. /photos/me.png)
	RepoPath string `protobuf:"bytes,2,opt,name=repo_path,proto3" json:"repo_path,omitempty"`
}

func (m *Command_StageCmd) Reset()         { *m = Command_StageCmd{} }
func (m *Command_StageCmd) String() string { return proto.CompactTextString(m) }
func (*Command_StageCmd) ProtoMessage()    {}

type Command_CatCmd struct {
	// The abs path of the file to cat inside the repo.
	RepoPath string `protobuf:"bytes,1,opt,name=repo_path,proto3" json:"repo_path,omitempty"`
	// Where to stream the result.
	FilePath string `protobuf:"bytes,2,opt,name=file_path,proto3" json:"file_path,omitempty"`
}

func (m *Command_CatCmd) Reset()         { *m = Command_CatCmd{} }
func (m *Command_CatCmd) String() string { return proto.CompactTextString(m) }
func (*Command_CatCmd) ProtoMessage()    {}

type Command_PingCmd struct {
}

func (m *Command_PingCmd) Reset()         { *m = Command_PingCmd{} }
func (m *Command_PingCmd) String() string { return proto.CompactTextString(m) }
func (*Command_PingCmd) ProtoMessage()    {}

type Command_QuitCmd struct {
}

func (m *Command_QuitCmd) Reset()         { *m = Command_QuitCmd{} }
func (m *Command_QuitCmd) String() string { return proto.CompactTextString(m) }
func (*Command_QuitCmd) ProtoMessage()    {}

type Command_MountCmd struct {
	// Where to mount the filesystem
	MountPoint string `protobuf:"bytes,1,opt,name=mount_point,proto3" json:"mount_point,omitempty"`
}

func (m *Command_MountCmd) Reset()         { *m = Command_MountCmd{} }
func (m *Command_MountCmd) String() string { return proto.CompactTextString(m) }
func (*Command_MountCmd) ProtoMessage()    {}

type Command_UnmountCmd struct {
	// Where to unmount the filesystem
	MountPoint string `protobuf:"bytes,1,opt,name=mount_point,proto3" json:"mount_point,omitempty"`
}

func (m *Command_UnmountCmd) Reset()         { *m = Command_UnmountCmd{} }
func (m *Command_UnmountCmd) String() string { return proto.CompactTextString(m) }
func (*Command_UnmountCmd) ProtoMessage()    {}

type Command_RmCmd struct {
	RepoPath  string `protobuf:"bytes,1,opt,name=repo_path,proto3" json:"repo_path,omitempty"`
	Recursive bool   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (m *Command_RmCmd) Reset()         { *m = Command_RmCmd{} }
func (m *Command_RmCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RmCmd) ProtoMessage()    {}

type Command_HistoryCmd struct {
	// Which file to show the history of:
	RepoPath string `protobuf:"bytes,1,opt,name=repo_path,proto3" json:"repo_path,omitempty"`
}

func (m *Command_HistoryCmd) Reset()         { *m = Command_HistoryCmd{} }
func (m *Command_HistoryCmd) String() string { return proto.CompactTextString(m) }
func (*Command_HistoryCmd) ProtoMessage()    {}

type Command_OnlineStatusCmd struct {
	Query OnlineQuery `protobuf:"varint,1,opt,name=query,proto3,enum=brig.daemon.OnlineQuery" json:"query,omitempty"`
}

func (m *Command_OnlineStatusCmd) Reset()         { *m = Command_OnlineStatusCmd{} }
func (m *Command_OnlineStatusCmd) String() string { return proto.CompactTextString(m) }
func (*Command_OnlineStatusCmd) ProtoMessage()    {}

type Command_SyncCmd struct {
	Who string `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
}

func (m *Command_SyncCmd) Reset()         { *m = Command_SyncCmd{} }
func (m *Command_SyncCmd) String() string { return proto.CompactTextString(m) }
func (*Command_SyncCmd) ProtoMessage()    {}

type Command_ListCmd struct {
	Root  string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Depth int32  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (m *Command_ListCmd) Reset()         { *m = Command_ListCmd{} }
func (m *Command_ListCmd) String() string { return proto.CompactTextString(m) }
func (*Command_ListCmd) ProtoMessage()    {}

type Command_MvCmd struct {
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Dest   string `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
}

func (m *Command_MvCmd) Reset()         { *m = Command_MvCmd{} }
func (m *Command_MvCmd) String() string { return proto.CompactTextString(m) }
func (*Command_MvCmd) ProtoMessage()    {}

type Command_MkdirCmd struct {
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	CreateParents bool   `protobuf:"varint,2,opt,name=create_parents,proto3" json:"create_parents,omitempty"`
}

func (m *Command_MkdirCmd) Reset()         { *m = Command_MkdirCmd{} }
func (m *Command_MkdirCmd) String() string { return proto.CompactTextString(m) }
func (*Command_MkdirCmd) ProtoMessage()    {}

type Command_RemoteAddCmd struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Command_RemoteAddCmd) Reset()         { *m = Command_RemoteAddCmd{} }
func (m *Command_RemoteAddCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RemoteAddCmd) ProtoMessage()    {}

type Command_RemoteRemoveCmd struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Command_RemoteRemoveCmd) Reset()         { *m = Command_RemoteRemoveCmd{} }
func (m *Command_RemoteRemoveCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RemoteRemoveCmd) ProtoMessage()    {}

type Command_RemoteListCmd struct {
	NeedsOnline bool `protobuf:"varint,1,opt,name=needsOnline,proto3" json:"needsOnline,omitempty"`
}

func (m *Command_RemoteListCmd) Reset()         { *m = Command_RemoteListCmd{} }
func (m *Command_RemoteListCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RemoteListCmd) ProtoMessage()    {}

type Command_RemoteLocateCmd struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PeerLimit int32  `protobuf:"varint,2,opt,name=peer_limit,proto3" json:"peer_limit,omitempty"`
	TimeoutMs int32  `protobuf:"varint,3,opt,name=timeout_ms,proto3" json:"timeout_ms,omitempty"`
}

func (m *Command_RemoteLocateCmd) Reset()         { *m = Command_RemoteLocateCmd{} }
func (m *Command_RemoteLocateCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RemoteLocateCmd) ProtoMessage()    {}

type Command_RemoteSelfCmd struct {
}

func (m *Command_RemoteSelfCmd) Reset()         { *m = Command_RemoteSelfCmd{} }
func (m *Command_RemoteSelfCmd) String() string { return proto.CompactTextString(m) }
func (*Command_RemoteSelfCmd) ProtoMessage()    {}

type Command_StatusCmd struct {
}

func (m *Command_StatusCmd) Reset()         { *m = Command_StatusCmd{} }
func (m *Command_StatusCmd) String() string { return proto.CompactTextString(m) }
func (*Command_StatusCmd) ProtoMessage()    {}

type Command_CommitCmd struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Command_CommitCmd) Reset()         { *m = Command_CommitCmd{} }
func (m *Command_CommitCmd) String() string { return proto.CompactTextString(m) }
func (*Command_CommitCmd) ProtoMessage()    {}

type Command_DiffCmd struct {
	Low  []byte `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	High []byte `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *Command_DiffCmd) Reset()         { *m = Command_DiffCmd{} }
func (m *Command_DiffCmd) String() string { return proto.CompactTextString(m) }
func (*Command_DiffCmd) ProtoMessage()    {}

type Command_LogCmd struct {
	Low  []byte `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	High []byte `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *Command_LogCmd) Reset()         { *m = Command_LogCmd{} }
func (m *Command_LogCmd) String() string { return proto.CompactTextString(m) }
func (*Command_LogCmd) ProtoMessage()    {}

type Command_PinCmd struct {
	// Balance can be either:
	//  > 0: Pin the path.
	// == 0: Do nothing (but respond pinning status)
	//  < 0: Unpin the object.
	// Future implementation might use the exact value.
	Balance int32  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *Command_PinCmd) Reset()         { *m = Command_PinCmd{} }
func (m *Command_PinCmd) String() string { return proto.CompactTextString(m) }
func (*Command_PinCmd) ProtoMessage()    {}

type Command_ResetCmd struct {
	RepoPath  string `protobuf:"bytes,1,opt,name=repo_path,proto3" json:"repo_path,omitempty"`
	CommitRef string `protobuf:"bytes,2,opt,name=commit_ref,proto3" json:"commit_ref,omitempty"`
}

func (m *Command_ResetCmd) Reset()         { *m = Command_ResetCmd{} }
func (m *Command_ResetCmd) String() string { return proto.CompactTextString(m) }
func (*Command_ResetCmd) ProtoMessage()    {}

type Command_ExportCmd struct {
	// Which store to export?
	Who string `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
}

func (m *Command_ExportCmd) Reset()         { *m = Command_ExportCmd{} }
func (m *Command_ExportCmd) String() string { return proto.CompactTextString(m) }
func (*Command_ExportCmd) ProtoMessage()    {}

type Command_ImportCmd struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Command_ImportCmd) Reset()         { *m = Command_ImportCmd{} }
func (m *Command_ImportCmd) String() string { return proto.CompactTextString(m) }
func (*Command_ImportCmd) ProtoMessage()    {}

type Remote struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	IsOnline bool   `protobuf:"varint,3,opt,name=is_online,proto3" json:"is_online,omitempty"`
}

func (m *Remote) Reset()         { *m = Remote{} }
func (m *Remote) String() string { return proto.CompactTextString(m) }
func (*Remote) ProtoMessage()    {}

type Response struct {
	ResponseType     MessageType                `protobuf:"varint,1,opt,name=response_type,proto3,enum=brig.daemon.MessageType" json:"response_type,omitempty"`
	Success          bool                       `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error            string                     `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	HistoryResp      *Response_HistoryResp      `protobuf:"bytes,4,opt,name=history_resp" json:"history_resp,omitempty"`
	ListResp         *Response_ListResp         `protobuf:"bytes,5,opt,name=list_resp" json:"list_resp,omitempty"`
	RemoteListResp   *Response_RemoteListResp   `protobuf:"bytes,6,opt,name=remote_list_resp" json:"remote_list_resp,omitempty"`
	RemoteLocateResp *Response_RemoteLocateResp `protobuf:"bytes,7,opt,name=remote_locate_resp" json:"remote_locate_resp,omitempty"`
	RemoteSelfResp   *Response_RemoteSelfResp   `protobuf:"bytes,8,opt,name=remote_self_resp" json:"remote_self_resp,omitempty"`
	OnlineStatusResp *Response_OnlineStatusResp `protobuf:"bytes,9,opt,name=online_status_resp" json:"online_status_resp,omitempty"`
	StatusResp       *Response_StatusResp       `protobuf:"bytes,10,opt,name=status_resp" json:"status_resp,omitempty"`
	LogResp          *Response_LogResp          `protobuf:"bytes,11,opt,name=log_resp" json:"log_resp,omitempty"`
	PinResp          *Response_PinResp          `protobuf:"bytes,12,opt,name=pin_resp" json:"pin_resp,omitempty"`
	ExportResp       *Response_ExportResp       `protobuf:"bytes,13,opt,name=export_resp" json:"export_resp,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetHistoryResp() *Response_HistoryResp {
	if m != nil {
		return m.HistoryResp
	}
	return nil
}

func (m *Response) GetListResp() *Response_ListResp {
	if m != nil {
		return m.ListResp
	}
	return nil
}

func (m *Response) GetRemoteListResp() *Response_RemoteListResp {
	if m != nil {
		return m.RemoteListResp
	}
	return nil
}

func (m *Response) GetRemoteLocateResp() *Response_RemoteLocateResp {
	if m != nil {
		return m.RemoteLocateResp
	}
	return nil
}

func (m *Response) GetRemoteSelfResp() *Response_RemoteSelfResp {
	if m != nil {
		return m.RemoteSelfResp
	}
	return nil
}

func (m *Response) GetOnlineStatusResp() *Response_OnlineStatusResp {
	if m != nil {
		return m.OnlineStatusResp
	}
	return nil
}

func (m *Response) GetStatusResp() *Response_StatusResp {
	if m != nil {
		return m.StatusResp
	}
	return nil
}

func (m *Response) GetLogResp() *Response_LogResp {
	if m != nil {
		return m.LogResp
	}
	return nil
}

func (m *Response) GetPinResp() *Response_PinResp {
	if m != nil {
		return m.PinResp
	}
	return nil
}

func (m *Response) GetExportResp() *Response_ExportResp {
	if m != nil {
		return m.ExportResp
	}
	return nil
}

type Response_ListResp struct {
	Entries *brig_store.Nodes `protobuf:"bytes,1,opt,name=entries" json:"entries,omitempty"`
}

func (m *Response_ListResp) Reset()         { *m = Response_ListResp{} }
func (m *Response_ListResp) String() string { return proto.CompactTextString(m) }
func (*Response_ListResp) ProtoMessage()    {}

func (m *Response_ListResp) GetEntries() *brig_store.Nodes {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Response_HistoryResp struct {
	History *brig_store.History `protobuf:"bytes,1,opt,name=history" json:"history,omitempty"`
}

func (m *Response_HistoryResp) Reset()         { *m = Response_HistoryResp{} }
func (m *Response_HistoryResp) String() string { return proto.CompactTextString(m) }
func (*Response_HistoryResp) ProtoMessage()    {}

func (m *Response_HistoryResp) GetHistory() *brig_store.History {
	if m != nil {
		return m.History
	}
	return nil
}

type Response_RemoteListResp struct {
	Remotes []*Remote `protobuf:"bytes,1,rep,name=remotes" json:"remotes,omitempty"`
}

func (m *Response_RemoteListResp) Reset()         { *m = Response_RemoteListResp{} }
func (m *Response_RemoteListResp) String() string { return proto.CompactTextString(m) }
func (*Response_RemoteListResp) ProtoMessage()    {}

func (m *Response_RemoteListResp) GetRemotes() []*Remote {
	if m != nil {
		return m.Remotes
	}
	return nil
}

type Response_RemoteLocateResp struct {
	Hashes []string `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
}

func (m *Response_RemoteLocateResp) Reset()         { *m = Response_RemoteLocateResp{} }
func (m *Response_RemoteLocateResp) String() string { return proto.CompactTextString(m) }
func (*Response_RemoteLocateResp) ProtoMessage()    {}

type Response_RemoteSelfResp struct {
	Self *Remote `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
}

func (m *Response_RemoteSelfResp) Reset()         { *m = Response_RemoteSelfResp{} }
func (m *Response_RemoteSelfResp) String() string { return proto.CompactTextString(m) }
func (*Response_RemoteSelfResp) ProtoMessage()    {}

func (m *Response_RemoteSelfResp) GetSelf() *Remote {
	if m != nil {
		return m.Self
	}
	return nil
}

type Response_OnlineStatusResp struct {
	IsOnline bool `protobuf:"varint,1,opt,name=is_online,proto3" json:"is_online,omitempty"`
}

func (m *Response_OnlineStatusResp) Reset()         { *m = Response_OnlineStatusResp{} }
func (m *Response_OnlineStatusResp) String() string { return proto.CompactTextString(m) }
func (*Response_OnlineStatusResp) ProtoMessage()    {}

type Response_StatusResp struct {
	StageCommit *brig_store.Node `protobuf:"bytes,1,opt,name=stage_commit" json:"stage_commit,omitempty"`
}

func (m *Response_StatusResp) Reset()         { *m = Response_StatusResp{} }
func (m *Response_StatusResp) String() string { return proto.CompactTextString(m) }
func (*Response_StatusResp) ProtoMessage()    {}

func (m *Response_StatusResp) GetStageCommit() *brig_store.Node {
	if m != nil {
		return m.StageCommit
	}
	return nil
}

type Response_LogResp struct {
	Nodes *brig_store.Nodes `protobuf:"bytes,1,opt,name=Nodes" json:"Nodes,omitempty"`
}

func (m *Response_LogResp) Reset()         { *m = Response_LogResp{} }
func (m *Response_LogResp) String() string { return proto.CompactTextString(m) }
func (*Response_LogResp) ProtoMessage()    {}

func (m *Response_LogResp) GetNodes() *brig_store.Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Response_PinResp struct {
	IsPinned bool `protobuf:"varint,1,opt,name=is_pinned,proto3" json:"is_pinned,omitempty"`
}

func (m *Response_PinResp) Reset()         { *m = Response_PinResp{} }
func (m *Response_PinResp) String() string { return proto.CompactTextString(m) }
func (*Response_PinResp) ProtoMessage()    {}

type Response_ExportResp struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Response_ExportResp) Reset()         { *m = Response_ExportResp{} }
func (m *Response_ExportResp) String() string { return proto.CompactTextString(m) }
func (*Response_ExportResp) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Command)(nil), "brig.daemon.Command")
	proto.RegisterType((*Command_StageCmd)(nil), "brig.daemon.Command.StageCmd")
	proto.RegisterType((*Command_CatCmd)(nil), "brig.daemon.Command.CatCmd")
	proto.RegisterType((*Command_PingCmd)(nil), "brig.daemon.Command.PingCmd")
	proto.RegisterType((*Command_QuitCmd)(nil), "brig.daemon.Command.QuitCmd")
	proto.RegisterType((*Command_MountCmd)(nil), "brig.daemon.Command.MountCmd")
	proto.RegisterType((*Command_UnmountCmd)(nil), "brig.daemon.Command.UnmountCmd")
	proto.RegisterType((*Command_RmCmd)(nil), "brig.daemon.Command.RmCmd")
	proto.RegisterType((*Command_HistoryCmd)(nil), "brig.daemon.Command.HistoryCmd")
	proto.RegisterType((*Command_OnlineStatusCmd)(nil), "brig.daemon.Command.OnlineStatusCmd")
	proto.RegisterType((*Command_SyncCmd)(nil), "brig.daemon.Command.SyncCmd")
	proto.RegisterType((*Command_ListCmd)(nil), "brig.daemon.Command.ListCmd")
	proto.RegisterType((*Command_MvCmd)(nil), "brig.daemon.Command.MvCmd")
	proto.RegisterType((*Command_MkdirCmd)(nil), "brig.daemon.Command.MkdirCmd")
	proto.RegisterType((*Command_RemoteAddCmd)(nil), "brig.daemon.Command.RemoteAddCmd")
	proto.RegisterType((*Command_RemoteRemoveCmd)(nil), "brig.daemon.Command.RemoteRemoveCmd")
	proto.RegisterType((*Command_RemoteListCmd)(nil), "brig.daemon.Command.RemoteListCmd")
	proto.RegisterType((*Command_RemoteLocateCmd)(nil), "brig.daemon.Command.RemoteLocateCmd")
	proto.RegisterType((*Command_RemoteSelfCmd)(nil), "brig.daemon.Command.RemoteSelfCmd")
	proto.RegisterType((*Command_StatusCmd)(nil), "brig.daemon.Command.StatusCmd")
	proto.RegisterType((*Command_CommitCmd)(nil), "brig.daemon.Command.CommitCmd")
	proto.RegisterType((*Command_DiffCmd)(nil), "brig.daemon.Command.DiffCmd")
	proto.RegisterType((*Command_LogCmd)(nil), "brig.daemon.Command.LogCmd")
	proto.RegisterType((*Command_PinCmd)(nil), "brig.daemon.Command.PinCmd")
	proto.RegisterType((*Command_ResetCmd)(nil), "brig.daemon.Command.ResetCmd")
	proto.RegisterType((*Command_ExportCmd)(nil), "brig.daemon.Command.ExportCmd")
	proto.RegisterType((*Command_ImportCmd)(nil), "brig.daemon.Command.ImportCmd")
	proto.RegisterType((*Remote)(nil), "brig.daemon.Remote")
	proto.RegisterType((*Response)(nil), "brig.daemon.Response")
	proto.RegisterType((*Response_ListResp)(nil), "brig.daemon.Response.ListResp")
	proto.RegisterType((*Response_HistoryResp)(nil), "brig.daemon.Response.HistoryResp")
	proto.RegisterType((*Response_RemoteListResp)(nil), "brig.daemon.Response.RemoteListResp")
	proto.RegisterType((*Response_RemoteLocateResp)(nil), "brig.daemon.Response.RemoteLocateResp")
	proto.RegisterType((*Response_RemoteSelfResp)(nil), "brig.daemon.Response.RemoteSelfResp")
	proto.RegisterType((*Response_OnlineStatusResp)(nil), "brig.daemon.Response.OnlineStatusResp")
	proto.RegisterType((*Response_StatusResp)(nil), "brig.daemon.Response.StatusResp")
	proto.RegisterType((*Response_LogResp)(nil), "brig.daemon.Response.LogResp")
	proto.RegisterType((*Response_PinResp)(nil), "brig.daemon.Response.PinResp")
	proto.RegisterType((*Response_ExportResp)(nil), "brig.daemon.Response.ExportResp")
	proto.RegisterEnum("brig.daemon.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("brig.daemon.OnlineQuery", OnlineQuery_name, OnlineQuery_value)
}
func (m *Command) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CommandType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintDaemon(data, i, uint64(m.CommandType))
	}
	if m.AddCommand != nil {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(m.AddCommand.Size()))
		n1, err := m.AddCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CatCommand != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.CatCommand.Size()))
		n2, err := m.CatCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PingCommand != nil {
		data[i] = 0x22
		i++
		i = encodeVarintDaemon(data, i, uint64(m.PingCommand.Size()))
		n3, err := m.PingCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.QuitCommand != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.QuitCommand.Size()))
		n4, err := m.QuitCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.MountCommand != nil {
		data[i] = 0x32
		i++
		i = encodeVarintDaemon(data, i, uint64(m.MountCommand.Size()))
		n5, err := m.MountCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.UnmountCommand != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.UnmountCommand.Size()))
		n6, err := m.UnmountCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.RmCommand != nil {
		data[i] = 0x42
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RmCommand.Size()))
		n7, err := m.RmCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.HistoryCommand != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.HistoryCommand.Size()))
		n8, err := m.HistoryCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.OnlineStatusCommand != nil {
		data[i] = 0x52
		i++
		i = encodeVarintDaemon(data, i, uint64(m.OnlineStatusCommand.Size()))
		n9, err := m.OnlineStatusCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.SyncCommand != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.SyncCommand.Size()))
		n10, err := m.SyncCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ListCommand != nil {
		data[i] = 0x62
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ListCommand.Size()))
		n11, err := m.ListCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.MvCommand != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.MvCommand.Size()))
		n12, err := m.MvCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.MkdirCommand != nil {
		data[i] = 0x72
		i++
		i = encodeVarintDaemon(data, i, uint64(m.MkdirCommand.Size()))
		n13, err := m.MkdirCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.RemoteAddCommand != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteAddCommand.Size()))
		n14, err := m.RemoteAddCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.RemoteRemoveCommand != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteRemoveCommand.Size()))
		n15, err := m.RemoteRemoveCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.RemoteListCommand != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteListCommand.Size()))
		n16, err := m.RemoteListCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.RemoteLocateCommand != nil {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteLocateCommand.Size()))
		n17, err := m.RemoteLocateCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.RemoteSelfCommand != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteSelfCommand.Size()))
		n18, err := m.RemoteSelfCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.StatusCommand != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.StatusCommand.Size()))
		n19, err := m.StatusCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.CommitCommand != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.CommitCommand.Size()))
		n20, err := m.CommitCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.DiffCommand != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.DiffCommand.Size()))
		n21, err := m.DiffCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.LogCommand != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.LogCommand.Size()))
		n22, err := m.LogCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.PinCommand != nil {
		data[i] = 0xc2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.PinCommand.Size()))
		n23, err := m.PinCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.ExportCommand != nil {
		data[i] = 0xca
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ExportCommand.Size()))
		n24, err := m.ExportCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ImportCommand != nil {
		data[i] = 0xd2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ImportCommand.Size()))
		n25, err := m.ImportCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.ResetCommand != nil {
		data[i] = 0xda
		i++
		data[i] = 0x1
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ResetCommand.Size()))
		n26, err := m.ResetCommand.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *Command_StageCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_StageCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.FilePath)))
		i += copy(data[i:], m.FilePath)
	}
	if len(m.RepoPath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.RepoPath)))
		i += copy(data[i:], m.RepoPath)
	}
	return i, nil
}

func (m *Command_CatCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_CatCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RepoPath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.RepoPath)))
		i += copy(data[i:], m.RepoPath)
	}
	if len(m.FilePath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.FilePath)))
		i += copy(data[i:], m.FilePath)
	}
	return i, nil
}

func (m *Command_PingCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_PingCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Command_QuitCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_QuitCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Command_MountCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_MountCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MountPoint) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.MountPoint)))
		i += copy(data[i:], m.MountPoint)
	}
	return i, nil
}

func (m *Command_UnmountCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_UnmountCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MountPoint) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.MountPoint)))
		i += copy(data[i:], m.MountPoint)
	}
	return i, nil
}

func (m *Command_RmCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RmCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RepoPath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.RepoPath)))
		i += copy(data[i:], m.RepoPath)
	}
	if m.Recursive {
		data[i] = 0x10
		i++
		if m.Recursive {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Command_HistoryCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_HistoryCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RepoPath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.RepoPath)))
		i += copy(data[i:], m.RepoPath)
	}
	return i, nil
}

func (m *Command_OnlineStatusCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_OnlineStatusCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Query != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Query))
	}
	return i, nil
}

func (m *Command_SyncCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_SyncCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Who) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Who)))
		i += copy(data[i:], m.Who)
	}
	return i, nil
}

func (m *Command_ListCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_ListCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Root)))
		i += copy(data[i:], m.Root)
	}
	if m.Depth != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Depth))
	}
	return i, nil
}

func (m *Command_MvCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_MvCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Source)))
		i += copy(data[i:], m.Source)
	}
	if len(m.Dest) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Dest)))
		i += copy(data[i:], m.Dest)
	}
	return i, nil
}

func (m *Command_MkdirCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_MkdirCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.CreateParents {
		data[i] = 0x10
		i++
		if m.CreateParents {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Command_RemoteAddCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RemoteAddCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Hash) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	return i, nil
}

func (m *Command_RemoteRemoveCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RemoteRemoveCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *Command_RemoteListCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RemoteListCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeedsOnline {
		data[i] = 0x8
		i++
		if m.NeedsOnline {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Command_RemoteLocateCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RemoteLocateCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.PeerLimit != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDaemon(data, i, uint64(m.PeerLimit))
	}
	if m.TimeoutMs != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintDaemon(data, i, uint64(m.TimeoutMs))
	}
	return i, nil
}

func (m *Command_RemoteSelfCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_RemoteSelfCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Command_StatusCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_StatusCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Command_CommitCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_CommitCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Message)))
		i += copy(data[i:], m.Message)
	}
	return i, nil
}

func (m *Command_DiffCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_DiffCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Low != nil {
		if len(m.Low) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.Low)))
			i += copy(data[i:], m.Low)
		}
	}
	if m.High != nil {
		if len(m.High) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.High)))
			i += copy(data[i:], m.High)
		}
	}
	return i, nil
}

func (m *Command_LogCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_LogCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Low != nil {
		if len(m.Low) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.Low)))
			i += copy(data[i:], m.Low)
		}
	}
	if m.High != nil {
		if len(m.High) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.High)))
			i += copy(data[i:], m.High)
		}
	}
	return i, nil
}

func (m *Command_PinCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_PinCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Balance))
	}
	if len(m.Path) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	return i, nil
}

func (m *Command_ResetCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_ResetCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RepoPath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.RepoPath)))
		i += copy(data[i:], m.RepoPath)
	}
	if len(m.CommitRef) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.CommitRef)))
		i += copy(data[i:], m.CommitRef)
	}
	return i, nil
}

func (m *Command_ExportCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_ExportCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Who) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Who)))
		i += copy(data[i:], m.Who)
	}
	return i, nil
}

func (m *Command_ImportCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command_ImportCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		if len(m.Data) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.Data)))
			i += copy(data[i:], m.Data)
		}
	}
	return i, nil
}

func (m *Remote) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Remote) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Hash) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	if m.IsOnline {
		data[i] = 0x18
		i++
		if m.IsOnline {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Response) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponseType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ResponseType))
	}
	if m.Success {
		data[i] = 0x10
		i++
		if m.Success {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDaemon(data, i, uint64(len(m.Error)))
		i += copy(data[i:], m.Error)
	}
	if m.HistoryResp != nil {
		data[i] = 0x22
		i++
		i = encodeVarintDaemon(data, i, uint64(m.HistoryResp.Size()))
		n27, err := m.HistoryResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.ListResp != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ListResp.Size()))
		n28, err := m.ListResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.RemoteListResp != nil {
		data[i] = 0x32
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteListResp.Size()))
		n29, err := m.RemoteListResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.RemoteLocateResp != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteLocateResp.Size()))
		n30, err := m.RemoteLocateResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.RemoteSelfResp != nil {
		data[i] = 0x42
		i++
		i = encodeVarintDaemon(data, i, uint64(m.RemoteSelfResp.Size()))
		n31, err := m.RemoteSelfResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.OnlineStatusResp != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.OnlineStatusResp.Size()))
		n32, err := m.OnlineStatusResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.StatusResp != nil {
		data[i] = 0x52
		i++
		i = encodeVarintDaemon(data, i, uint64(m.StatusResp.Size()))
		n33, err := m.StatusResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.LogResp != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.LogResp.Size()))
		n34, err := m.LogResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.PinResp != nil {
		data[i] = 0x62
		i++
		i = encodeVarintDaemon(data, i, uint64(m.PinResp.Size()))
		n35, err := m.PinResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.ExportResp != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintDaemon(data, i, uint64(m.ExportResp.Size()))
		n36, err := m.ExportResp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *Response_ListResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_ListResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entries != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Entries.Size()))
		n37, err := m.Entries.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *Response_HistoryResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_HistoryResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.History != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(m.History.Size()))
		n38, err := m.History.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *Response_RemoteListResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_RemoteListResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Remotes) > 0 {
		for _, msg := range m.Remotes {
			data[i] = 0xa
			i++
			i = encodeVarintDaemon(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response_RemoteLocateResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_RemoteLocateResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, s := range m.Hashes {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *Response_RemoteSelfResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_RemoteSelfResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Self.Size()))
		n39, err := m.Self.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *Response_OnlineStatusResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_OnlineStatusResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOnline {
		data[i] = 0x8
		i++
		if m.IsOnline {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Response_StatusResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_StatusResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageCommit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(m.StageCommit.Size()))
		n40, err := m.StageCommit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *Response_LogResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_LogResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nodes != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDaemon(data, i, uint64(m.Nodes.Size()))
		n41, err := m.Nodes.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *Response_PinResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_PinResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsPinned {
		data[i] = 0x8
		i++
		if m.IsPinned {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Response_ExportResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response_ExportResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		if len(m.Data) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintDaemon(data, i, uint64(len(m.Data)))
			i += copy(data[i:], m.Data)
		}
	}
	return i, nil
}

func encodeFixed64Daemon(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Daemon(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDaemon(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.CommandType != 0 {
		n += 1 + sovDaemon(uint64(m.CommandType))
	}
	if m.AddCommand != nil {
		l = m.AddCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.CatCommand != nil {
		l = m.CatCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.PingCommand != nil {
		l = m.PingCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.QuitCommand != nil {
		l = m.QuitCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.MountCommand != nil {
		l = m.MountCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.UnmountCommand != nil {
		l = m.UnmountCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RmCommand != nil {
		l = m.RmCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.HistoryCommand != nil {
		l = m.HistoryCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.OnlineStatusCommand != nil {
		l = m.OnlineStatusCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.SyncCommand != nil {
		l = m.SyncCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.ListCommand != nil {
		l = m.ListCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.MvCommand != nil {
		l = m.MvCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.MkdirCommand != nil {
		l = m.MkdirCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RemoteAddCommand != nil {
		l = m.RemoteAddCommand.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RemoteRemoveCommand != nil {
		l = m.RemoteRemoveCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.RemoteListCommand != nil {
		l = m.RemoteListCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.RemoteLocateCommand != nil {
		l = m.RemoteLocateCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.RemoteSelfCommand != nil {
		l = m.RemoteSelfCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.StatusCommand != nil {
		l = m.StatusCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.CommitCommand != nil {
		l = m.CommitCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.DiffCommand != nil {
		l = m.DiffCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.LogCommand != nil {
		l = m.LogCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.PinCommand != nil {
		l = m.PinCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.ExportCommand != nil {
		l = m.ExportCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.ImportCommand != nil {
		l = m.ImportCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	if m.ResetCommand != nil {
		l = m.ResetCommand.Size()
		n += 2 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_StageCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.RepoPath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_CatCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.RepoPath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_PingCmd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Command_QuitCmd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Command_MountCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.MountPoint)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_UnmountCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.MountPoint)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_RmCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.RepoPath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Recursive {
		n += 2
	}
	return n
}

func (m *Command_HistoryCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.RepoPath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_OnlineStatusCmd) Size() (n int) {
	var l int
	_ = l
	if m.Query != 0 {
		n += 1 + sovDaemon(uint64(m.Query))
	}
	return n
}

func (m *Command_SyncCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Who)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_ListCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Depth != 0 {
		n += 1 + sovDaemon(uint64(m.Depth))
	}
	return n
}

func (m *Command_MvCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.Dest)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_MkdirCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.CreateParents {
		n += 2
	}
	return n
}

func (m *Command_RemoteAddCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_RemoteRemoveCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_RemoteListCmd) Size() (n int) {
	var l int
	_ = l
	if m.NeedsOnline {
		n += 2
	}
	return n
}

func (m *Command_RemoteLocateCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.PeerLimit != 0 {
		n += 1 + sovDaemon(uint64(m.PeerLimit))
	}
	if m.TimeoutMs != 0 {
		n += 1 + sovDaemon(uint64(m.TimeoutMs))
	}
	return n
}

func (m *Command_RemoteSelfCmd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Command_StatusCmd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Command_CommitCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_DiffCmd) Size() (n int) {
	var l int
	_ = l
	if m.Low != nil {
		l = len(m.Low)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	if m.High != nil {
		l = len(m.High)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func (m *Command_LogCmd) Size() (n int) {
	var l int
	_ = l
	if m.Low != nil {
		l = len(m.Low)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	if m.High != nil {
		l = len(m.High)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func (m *Command_PinCmd) Size() (n int) {
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovDaemon(uint64(m.Balance))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_ResetCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.RepoPath)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.CommitRef)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_ExportCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Who)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Command_ImportCmd) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func (m *Remote) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.ResponseType != 0 {
		n += 1 + sovDaemon(uint64(m.ResponseType))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.HistoryResp != nil {
		l = m.HistoryResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.ListResp != nil {
		l = m.ListResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RemoteListResp != nil {
		l = m.RemoteListResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RemoteLocateResp != nil {
		l = m.RemoteLocateResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.RemoteSelfResp != nil {
		l = m.RemoteSelfResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.OnlineStatusResp != nil {
		l = m.OnlineStatusResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.StatusResp != nil {
		l = m.StatusResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.LogResp != nil {
		l = m.LogResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.PinResp != nil {
		l = m.PinResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.ExportResp != nil {
		l = m.ExportResp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_ListResp) Size() (n int) {
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_HistoryResp) Size() (n int) {
	var l int
	_ = l
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_RemoteListResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Remotes) > 0 {
		for _, e := range m.Remotes {
			l = e.Size()
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func (m *Response_RemoteLocateResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, s := range m.Hashes {
			l = len(s)
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func (m *Response_RemoteSelfResp) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_OnlineStatusResp) Size() (n int) {
	var l int
	_ = l
	if m.IsOnline {
		n += 2
	}
	return n
}

func (m *Response_StatusResp) Size() (n int) {
	var l int
	_ = l
	if m.StageCommit != nil {
		l = m.StageCommit.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_LogResp) Size() (n int) {
	var l int
	_ = l
	if m.Nodes != nil {
		l = m.Nodes.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}

func (m *Response_PinResp) Size() (n int) {
	var l int
	_ = l
	if m.IsPinned {
		n += 2
	}
	return n
}

func (m *Response_ExportResp) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		if l > 0 {
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	return n
}

func sovDaemon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDaemon(x uint64) (n int) {
	return sovDaemon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandType", wireType)
			}
			m.CommandType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CommandType |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddCommand == nil {
				m.AddCommand = &Command_StageCmd{}
			}
			if err := m.AddCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CatCommand == nil {
				m.CatCommand = &Command_CatCmd{}
			}
			if err := m.CatCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingCommand == nil {
				m.PingCommand = &Command_PingCmd{}
			}
			if err := m.PingCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuitCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuitCommand == nil {
				m.QuitCommand = &Command_QuitCmd{}
			}
			if err := m.QuitCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MountCommand == nil {
				m.MountCommand = &Command_MountCmd{}
			}
			if err := m.MountCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmountCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnmountCommand == nil {
				m.UnmountCommand = &Command_UnmountCmd{}
			}
			if err := m.UnmountCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RmCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RmCommand == nil {
				m.RmCommand = &Command_RmCmd{}
			}
			if err := m.RmCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryCommand == nil {
				m.HistoryCommand = &Command_HistoryCmd{}
			}
			if err := m.HistoryCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatusCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnlineStatusCommand == nil {
				m.OnlineStatusCommand = &Command_OnlineStatusCmd{}
			}
			if err := m.OnlineStatusCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncCommand == nil {
				m.SyncCommand = &Command_SyncCmd{}
			}
			if err := m.SyncCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListCommand == nil {
				m.ListCommand = &Command_ListCmd{}
			}
			if err := m.ListCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MvCommand == nil {
				m.MvCommand = &Command_MvCmd{}
			}
			if err := m.MvCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MkdirCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MkdirCommand == nil {
				m.MkdirCommand = &Command_MkdirCmd{}
			}
			if err := m.MkdirCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteAddCommand == nil {
				m.RemoteAddCommand = &Command_RemoteAddCmd{}
			}
			if err := m.RemoteAddCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteRemoveCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteRemoveCommand == nil {
				m.RemoteRemoveCommand = &Command_RemoteRemoveCmd{}
			}
			if err := m.RemoteRemoveCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteListCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteListCommand == nil {
				m.RemoteListCommand = &Command_RemoteListCmd{}
			}
			if err := m.RemoteListCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteLocateCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteLocateCommand == nil {
				m.RemoteLocateCommand = &Command_RemoteLocateCmd{}
			}
			if err := m.RemoteLocateCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteSelfCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteSelfCommand == nil {
				m.RemoteSelfCommand = &Command_RemoteSelfCmd{}
			}
			if err := m.RemoteSelfCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusCommand == nil {
				m.StatusCommand = &Command_StatusCmd{}
			}
			if err := m.StatusCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitCommand == nil {
				m.CommitCommand = &Command_CommitCmd{}
			}
			if err := m.CommitCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiffCommand == nil {
				m.DiffCommand = &Command_DiffCmd{}
			}
			if err := m.DiffCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogCommand == nil {
				m.LogCommand = &Command_LogCmd{}
			}
			if err := m.LogCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinCommand == nil {
				m.PinCommand = &Command_PinCmd{}
			}
			if err := m.PinCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportCommand == nil {
				m.ExportCommand = &Command_ExportCmd{}
			}
			if err := m.ExportCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImportCommand == nil {
				m.ImportCommand = &Command_ImportCmd{}
			}
			if err := m.ImportCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResetCommand == nil {
				m.ResetCommand = &Command_ResetCmd{}
			}
			if err := m.ResetCommand.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_StageCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_CatCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_PingCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_QuitCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_MountCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MountCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MountCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPoint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_UnmountCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnmountCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnmountCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPoint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RmCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RmCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RmCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recursive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recursive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_HistoryCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_OnlineStatusCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineStatusCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineStatusCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			m.Query = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Query |= (OnlineQuery(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_SyncCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Who", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Who = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_ListCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Depth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_MvCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MvCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MvCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_MkdirCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MkdirCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MkdirCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateParents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateParents = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoteAddCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteAddCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteAddCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoteRemoveCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteRemoveCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteRemoveCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoteListCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoteLocateCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteLocateCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteLocateCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerLimit", wireType)
			}
			m.PeerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PeerLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutMs", wireType)
			}
			m.TimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimeoutMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoteSelfCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteSelfCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteSelfCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_StatusCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_CommitCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_DiffCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiffCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiffCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Low = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.High = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_LogCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Low = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.High = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_PinCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Balance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_ResetCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitRef = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_ExportCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Who", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Who = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_ImportCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Remote) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Remote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Remote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseType", wireType)
			}
			m.ResponseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ResponseType |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryResp == nil {
				m.HistoryResp = &Response_HistoryResp{}
			}
			if err := m.HistoryResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListResp == nil {
				m.ListResp = &Response_ListResp{}
			}
			if err := m.ListResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteListResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteListResp == nil {
				m.RemoteListResp = &Response_RemoteListResp{}
			}
			if err := m.RemoteListResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteLocateResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteLocateResp == nil {
				m.RemoteLocateResp = &Response_RemoteLocateResp{}
			}
			if err := m.RemoteLocateResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteSelfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteSelfResp == nil {
				m.RemoteSelfResp = &Response_RemoteSelfResp{}
			}
			if err := m.RemoteSelfResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatusResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnlineStatusResp == nil {
				m.OnlineStatusResp = &Response_OnlineStatusResp{}
			}
			if err := m.OnlineStatusResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusResp == nil {
				m.StatusResp = &Response_StatusResp{}
			}
			if err := m.StatusResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogResp == nil {
				m.LogResp = &Response_LogResp{}
			}
			if err := m.LogResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinResp == nil {
				m.PinResp = &Response_PinResp{}
			}
			if err := m.PinResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportResp == nil {
				m.ExportResp = &Response_ExportResp{}
			}
			if err := m.ExportResp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_ListResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &brig_store.Nodes{}
			}
			if err := m.Entries.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_HistoryResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &brig_store.History{}
			}
			if err := m.History.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_RemoteListResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remotes = append(m.Remotes, &Remote{})
			if err := m.Remotes[len(m.Remotes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_RemoteLocateResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteLocateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteLocateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_RemoteSelfResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteSelfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteSelfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &Remote{}
			}
			if err := m.Self.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_OnlineStatusResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_StatusResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StageCommit == nil {
				m.StageCommit = &brig_store.Node{}
			}
			if err := m.StageCommit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_LogResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = &brig_store.Nodes{}
			}
			if err := m.Nodes.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_PinResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPinned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response_ExportResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDaemon(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDaemon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDaemon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDaemon(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDaemon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDaemon   = fmt.Errorf("proto: integer overflow")
)
