// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	math "math"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// StatInfo is a stat-like description of any node
type StatInfo struct{ capnp.Struct }

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xa2305f2ea25a3484

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xa2305f2ea25a3484, s.Struct)
	return str
}

func (s StatInfo) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s StatInfo) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s StatInfo) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s StatInfo) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s StatInfo) Inode() uint64 {
	return s.Struct.Uint64(8)
}

func (s StatInfo) SetInode(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s StatInfo) IsDir() bool {
	return s.Struct.Bit(128)
}

func (s StatInfo) SetIsDir(v bool) {
	s.Struct.SetBit(128, v)
}

func (s StatInfo) Depth() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s StatInfo) SetDepth(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s StatInfo) ModTime() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s StatInfo) HasModTime() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s StatInfo) ModTimeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s StatInfo) SetModTime(v string) error {
	return s.Struct.SetText(2, v)
}

func (s StatInfo) IsPinned() bool {
	return s.Struct.Bit(129)
}

func (s StatInfo) SetIsPinned(v bool) {
	s.Struct.SetBit(129, v)
}

func (s StatInfo) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s StatInfo) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetContent(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s StatInfo) User() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s StatInfo) HasUser() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s StatInfo) UserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s StatInfo) SetUser(v string) error {
	return s.Struct.SetText(4, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xa2305f2ea25a3484, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

// Single log entry
type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xb47c58aa23289d55

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xb47c58aa23289d55, s.Struct)
	return str
}

func (s Commit) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Commit) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Commit) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Commit) Tags() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Commit) HasTags() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Commit) SetTags(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Commit) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Commit) Date() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Commit) HasDate() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Commit) DateBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Commit) SetDate(v string) error {
	return s.Struct.SetText(3, v)
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xb47c58aa23289d55, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

// Key/Value pair in the config
type ConfigPair struct{ capnp.Struct }

// ConfigPair_TypeID is the unique identifier for the type ConfigPair.
const ConfigPair_TypeID = 0xe54de22194de748a

func NewConfigPair(s *capnp.Segment) (ConfigPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigPair{st}, err
}

func NewRootConfigPair(s *capnp.Segment) (ConfigPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigPair{st}, err
}

func ReadRootConfigPair(msg *capnp.Message) (ConfigPair, error) {
	root, err := msg.RootPtr()
	return ConfigPair{root.Struct()}, err
}

func (s ConfigPair) String() string {
	str, _ := text.Marshal(0xe54de22194de748a, s.Struct)
	return str
}

func (s ConfigPair) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConfigPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConfigPair) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigPair) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConfigPair) Val() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfigPair) HasVal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConfigPair) ValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfigPair) SetVal(v string) error {
	return s.Struct.SetText(1, v)
}

// ConfigPair_List is a list of ConfigPair.
type ConfigPair_List struct{ capnp.List }

// NewConfigPair creates a new list of ConfigPair.
func NewConfigPair_List(s *capnp.Segment, sz int32) (ConfigPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConfigPair_List{l}, err
}

func (s ConfigPair_List) At(i int) ConfigPair { return ConfigPair{s.List.Struct(i)} }

func (s ConfigPair_List) Set(i int, v ConfigPair) error { return s.List.SetStruct(i, v.Struct) }

func (s ConfigPair_List) String() string {
	str, _ := text.MarshalList(0xe54de22194de748a, s.List)
	return str
}

// ConfigPair_Promise is a wrapper for a ConfigPair promised by a client call.
type ConfigPair_Promise struct{ *capnp.Pipeline }

func (p ConfigPair_Promise) Struct() (ConfigPair, error) {
	s, err := p.Pipeline.Struct()
	return ConfigPair{s}, err
}

// One History entry for a file
type Change struct{ capnp.Struct }

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0xd01613feea87ee6a

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Change{st}, err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Change{st}, err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.RootPtr()
	return Change{root.Struct()}, err
}

func (s Change) String() string {
	str, _ := text.Marshal(0xd01613feea87ee6a, s.Struct)
	return str
}

func (s Change) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Change) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Change) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Change) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Change) Change() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Change) HasChange() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Change) ChangeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Change) SetChange(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Change) Head() (Commit, error) {
	p, err := s.Struct.Ptr(2)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasHead() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Change) SetHead(v Commit) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewHead() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) Next() (Commit, error) {
	p, err := s.Struct.Ptr(3)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasNext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Change) SetNext(v Commit) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewNext sets the next field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewNext() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) ReferTo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Change) HasReferTo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Change) ReferToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Change) SetReferTo(v string) error {
	return s.Struct.SetText(4, v)
}

// Change_List is a list of Change.
type Change_List struct{ capnp.List }

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return Change_List{l}, err
}

func (s Change_List) At(i int) Change { return Change{s.List.Struct(i)} }

func (s Change_List) Set(i int, v Change) error { return s.List.SetStruct(i, v.Struct) }

func (s Change_List) String() string {
	str, _ := text.MarshalList(0xd01613feea87ee6a, s.List)
	return str
}

// Change_Promise is a wrapper for a Change promised by a client call.
type Change_Promise struct{ *capnp.Pipeline }

func (p Change_Promise) Struct() (Change, error) {
	s, err := p.Pipeline.Struct()
	return Change{s}, err
}

func (p Change_Promise) Head() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Change_Promise) Next() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

// Represent two differing files
type DiffPair struct{ capnp.Struct }

// DiffPair_TypeID is the unique identifier for the type DiffPair.
const DiffPair_TypeID = 0xf8551f83bb42e152

func NewDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func NewRootDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func ReadRootDiffPair(msg *capnp.Message) (DiffPair, error) {
	root, err := msg.RootPtr()
	return DiffPair{root.Struct()}, err
}

func (s DiffPair) String() string {
	str, _ := text.Marshal(0xf8551f83bb42e152, s.Struct)
	return str
}

func (s DiffPair) Src() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetSrc(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSrc sets the src field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewSrc() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DiffPair) Dst() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasDst() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetDst(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDst sets the dst field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewDst() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DiffPair_List is a list of DiffPair.
type DiffPair_List struct{ capnp.List }

// NewDiffPair creates a new list of DiffPair.
func NewDiffPair_List(s *capnp.Segment, sz int32) (DiffPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DiffPair_List{l}, err
}

func (s DiffPair_List) At(i int) DiffPair { return DiffPair{s.List.Struct(i)} }

func (s DiffPair_List) Set(i int, v DiffPair) error { return s.List.SetStruct(i, v.Struct) }

func (s DiffPair_List) String() string {
	str, _ := text.MarshalList(0xf8551f83bb42e152, s.List)
	return str
}

// DiffPair_Promise is a wrapper for a DiffPair promised by a client call.
type DiffPair_Promise struct{ *capnp.Pipeline }

func (p DiffPair_Promise) Struct() (DiffPair, error) {
	s, err := p.Pipeline.Struct()
	return DiffPair{s}, err
}

func (p DiffPair_Promise) Src() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DiffPair_Promise) Dst() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

// Difference between two commits
type Diff struct{ capnp.Struct }

// Diff_TypeID is the unique identifier for the type Diff.
const Diff_TypeID = 0xc9601ec89a6aa066

func NewDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func NewRootDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func ReadRootDiff(msg *capnp.Message) (Diff, error) {
	root, err := msg.RootPtr()
	return Diff{root.Struct()}, err
}

func (s Diff) String() string {
	str, _ := text.Marshal(0xc9601ec89a6aa066, s.Struct)
	return str
}

func (s Diff) Added() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasAdded() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Diff) SetAdded(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAdded sets the added field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewAdded(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Diff) Removed() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasRemoved() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Diff) SetRemoved(v StatInfo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRemoved sets the removed field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewRemoved(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Diff) Ignored() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(2)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasIgnored() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Diff) SetIgnored(v StatInfo_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewIgnored sets the ignored field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewIgnored(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Diff) Missing() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(3)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasMissing() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Diff) SetMissing(v StatInfo_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMissing sets the missing field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewMissing(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Diff) Moved() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(4)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMoved() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Diff) SetMoved(v DiffPair_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMoved sets the moved field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMoved(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Diff) Merged() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(5)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMerged() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Diff) SetMerged(v DiffPair_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewMerged sets the merged field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMerged(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Diff) Conflict() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(6)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasConflict() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Diff) SetConflict(v DiffPair_List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewConflict sets the conflict field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewConflict(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

// Diff_List is a list of Diff.
type Diff_List struct{ capnp.List }

// NewDiff creates a new list of Diff.
func NewDiff_List(s *capnp.Segment, sz int32) (Diff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return Diff_List{l}, err
}

func (s Diff_List) At(i int) Diff { return Diff{s.List.Struct(i)} }

func (s Diff_List) Set(i int, v Diff) error { return s.List.SetStruct(i, v.Struct) }

func (s Diff_List) String() string {
	str, _ := text.MarshalList(0xc9601ec89a6aa066, s.List)
	return str
}

// Diff_Promise is a wrapper for a Diff promised by a client call.
type Diff_Promise struct{ *capnp.Pipeline }

func (p Diff_Promise) Struct() (Diff, error) {
	s, err := p.Pipeline.Struct()
	return Diff{s}, err
}

// A folder that a remote is allowed to access
type RemoteFolder struct{ capnp.Struct }

// RemoteFolder_TypeID is the unique identifier for the type RemoteFolder.
const RemoteFolder_TypeID = 0x8ed051e9369ac720

func NewRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RemoteFolder{st}, err
}

func NewRootRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RemoteFolder{st}, err
}

func ReadRootRemoteFolder(msg *capnp.Message) (RemoteFolder, error) {
	root, err := msg.RootPtr()
	return RemoteFolder{root.Struct()}, err
}

func (s RemoteFolder) String() string {
	str, _ := text.Marshal(0x8ed051e9369ac720, s.Struct)
	return str
}

func (s RemoteFolder) Folder() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RemoteFolder) HasFolder() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RemoteFolder) FolderBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RemoteFolder) SetFolder(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RemoteFolder) Perms() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s RemoteFolder) HasPerms() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RemoteFolder) PermsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s RemoteFolder) SetPerms(v string) error {
	return s.Struct.SetText(1, v)
}

// RemoteFolder_List is a list of RemoteFolder.
type RemoteFolder_List struct{ capnp.List }

// NewRemoteFolder creates a new list of RemoteFolder.
func NewRemoteFolder_List(s *capnp.Segment, sz int32) (RemoteFolder_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RemoteFolder_List{l}, err
}

func (s RemoteFolder_List) At(i int) RemoteFolder { return RemoteFolder{s.List.Struct(i)} }

func (s RemoteFolder_List) Set(i int, v RemoteFolder) error { return s.List.SetStruct(i, v.Struct) }

func (s RemoteFolder_List) String() string {
	str, _ := text.MarshalList(0x8ed051e9369ac720, s.List)
	return str
}

// RemoteFolder_Promise is a wrapper for a RemoteFolder promised by a client call.
type RemoteFolder_Promise struct{ *capnp.Pipeline }

func (p RemoteFolder_Promise) Struct() (RemoteFolder, error) {
	s, err := p.Pipeline.Struct()
	return RemoteFolder{s}, err
}

// Info a remote peer we might sync with
type Remote struct{ capnp.Struct }

// Remote_TypeID is the unique identifier for the type Remote.
const Remote_TypeID = 0xbe71bb7b0ed4539a

func NewRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Remote{st}, err
}

func NewRootRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Remote{st}, err
}

func ReadRootRemote(msg *capnp.Message) (Remote, error) {
	root, err := msg.RootPtr()
	return Remote{root.Struct()}, err
}

func (s Remote) String() string {
	str, _ := text.Marshal(0xbe71bb7b0ed4539a, s.Struct)
	return str
}

func (s Remote) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Remote) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Remote) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Remote) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Remote) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Remote) HasFingerprint() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Remote) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Remote) SetFingerprint(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Remote) Folders() (RemoteFolder_List, error) {
	p, err := s.Struct.Ptr(2)
	return RemoteFolder_List{List: p.List()}, err
}

func (s Remote) HasFolders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Remote) SetFolders(v RemoteFolder_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated RemoteFolder_List, preferring placement in s's segment.
func (s Remote) NewFolders(n int32) (RemoteFolder_List, error) {
	l, err := NewRemoteFolder_List(s.Struct.Segment(), n)
	if err != nil {
		return RemoteFolder_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Remote_List is a list of Remote.
type Remote_List struct{ capnp.List }

// NewRemote creates a new list of Remote.
func NewRemote_List(s *capnp.Segment, sz int32) (Remote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Remote_List{l}, err
}

func (s Remote_List) At(i int) Remote { return Remote{s.List.Struct(i)} }

func (s Remote_List) Set(i int, v Remote) error { return s.List.SetStruct(i, v.Struct) }

func (s Remote_List) String() string {
	str, _ := text.MarshalList(0xbe71bb7b0ed4539a, s.List)
	return str
}

// Remote_Promise is a wrapper for a Remote promised by a client call.
type Remote_Promise struct{ *capnp.Pipeline }

func (p Remote_Promise) Struct() (Remote, error) {
	s, err := p.Pipeline.Struct()
	return Remote{s}, err
}

type LocateResult struct{ capnp.Struct }

// LocateResult_TypeID is the unique identifier for the type LocateResult.
const LocateResult_TypeID = 0xd95473f6f8a89a69

func NewLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func NewRootLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func ReadRootLocateResult(msg *capnp.Message) (LocateResult, error) {
	root, err := msg.RootPtr()
	return LocateResult{root.Struct()}, err
}

func (s LocateResult) String() string {
	str, _ := text.Marshal(0xd95473f6f8a89a69, s.Struct)
	return str
}

func (s LocateResult) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocateResult) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LocateResult) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocateResult) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocateResult) Addr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LocateResult) HasAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LocateResult) AddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LocateResult) SetAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LocateResult) Mask() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s LocateResult) HasMask() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LocateResult) MaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s LocateResult) SetMask(v string) error {
	return s.Struct.SetText(2, v)
}

func (s LocateResult) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s LocateResult) HasFingerprint() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s LocateResult) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s LocateResult) SetFingerprint(v string) error {
	return s.Struct.SetText(3, v)
}

// LocateResult_List is a list of LocateResult.
type LocateResult_List struct{ capnp.List }

// NewLocateResult creates a new list of LocateResult.
func NewLocateResult_List(s *capnp.Segment, sz int32) (LocateResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return LocateResult_List{l}, err
}

func (s LocateResult_List) At(i int) LocateResult { return LocateResult{s.List.Struct(i)} }

func (s LocateResult_List) Set(i int, v LocateResult) error { return s.List.SetStruct(i, v.Struct) }

func (s LocateResult_List) String() string {
	str, _ := text.MarshalList(0xd95473f6f8a89a69, s.List)
	return str
}

// LocateResult_Promise is a wrapper for a LocateResult promised by a client call.
type LocateResult_Promise struct{ *capnp.Pipeline }

func (p LocateResult_Promise) Struct() (LocateResult, error) {
	s, err := p.Pipeline.Struct()
	return LocateResult{s}, err
}

// Info about our current user state
type Identity struct{ capnp.Struct }

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xd49a2570fb5a4342

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.RootPtr()
	return Identity{root.Struct()}, err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xd49a2570fb5a4342, s.Struct)
	return str
}

func (s Identity) CurrentUser() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Identity) HasCurrentUser() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Identity) CurrentUserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetCurrentUser(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Identity) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Identity) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Identity) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Identity) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Identity) HasFingerprint() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Identity) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetFingerprint(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Identity) IsOnline() bool {
	return s.Struct.Bit(0)
}

func (s Identity) SetIsOnline(v bool) {
	s.Struct.SetBit(0, v)
}

// Identity_List is a list of Identity.
type Identity_List struct{ capnp.List }

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Identity_List{l}, err
}

func (s Identity_List) At(i int) Identity { return Identity{s.List.Struct(i)} }

func (s Identity_List) Set(i int, v Identity) error { return s.List.SetStruct(i, v.Struct) }

func (s Identity_List) String() string {
	str, _ := text.MarshalList(0xd49a2570fb5a4342, s.List)
	return str
}

// Identity_Promise is a wrapper for a Identity promised by a client call.
type Identity_Promise struct{ *capnp.Pipeline }

func (p Identity_Promise) Struct() (Identity, error) {
	s, err := p.Pipeline.Struct()
	return Identity{s}, err
}

type MountOptions struct{ capnp.Struct }

// MountOptions_TypeID is the unique identifier for the type MountOptions.
const MountOptions_TypeID = 0xbc4d5c31427dc498

func NewMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MountOptions{st}, err
}

func NewRootMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MountOptions{st}, err
}

func ReadRootMountOptions(msg *capnp.Message) (MountOptions, error) {
	root, err := msg.RootPtr()
	return MountOptions{root.Struct()}, err
}

func (s MountOptions) String() string {
	str, _ := text.Marshal(0xbc4d5c31427dc498, s.Struct)
	return str
}

// MountOptions_List is a list of MountOptions.
type MountOptions_List struct{ capnp.List }

// NewMountOptions creates a new list of MountOptions.
func NewMountOptions_List(s *capnp.Segment, sz int32) (MountOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MountOptions_List{l}, err
}

func (s MountOptions_List) At(i int) MountOptions { return MountOptions{s.List.Struct(i)} }

func (s MountOptions_List) Set(i int, v MountOptions) error { return s.List.SetStruct(i, v.Struct) }

func (s MountOptions_List) String() string {
	str, _ := text.MarshalList(0xbc4d5c31427dc498, s.List)
	return str
}

// MountOptions_Promise is a wrapper for a MountOptions promised by a client call.
type MountOptions_Promise struct{ *capnp.Pipeline }

func (p MountOptions_Promise) Struct() (MountOptions, error) {
	s, err := p.Pipeline.Struct()
	return MountOptions{s}, err
}

// net status of a peer
type PeerStatus struct{ capnp.Struct }

// PeerStatus_TypeID is the unique identifier for the type PeerStatus.
const PeerStatus_TypeID = 0x8167eafcc8695b1c

func NewPeerStatus(s *capnp.Segment) (PeerStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return PeerStatus{st}, err
}

func NewRootPeerStatus(s *capnp.Segment) (PeerStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return PeerStatus{st}, err
}

func ReadRootPeerStatus(msg *capnp.Message) (PeerStatus, error) {
	root, err := msg.RootPtr()
	return PeerStatus{root.Struct()}, err
}

func (s PeerStatus) String() string {
	str, _ := text.Marshal(0x8167eafcc8695b1c, s.Struct)
	return str
}

func (s PeerStatus) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PeerStatus) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PeerStatus) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PeerStatus) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PeerStatus) Addr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PeerStatus) HasAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PeerStatus) AddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PeerStatus) SetAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PeerStatus) LastSeen() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PeerStatus) HasLastSeen() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PeerStatus) LastSeenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PeerStatus) SetLastSeen(v string) error {
	return s.Struct.SetText(2, v)
}

func (s PeerStatus) RoundtripMs() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PeerStatus) SetRoundtripMs(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s PeerStatus) Error() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PeerStatus) HasError() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s PeerStatus) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PeerStatus) SetError(v string) error {
	return s.Struct.SetText(3, v)
}

// PeerStatus_List is a list of PeerStatus.
type PeerStatus_List struct{ capnp.List }

// NewPeerStatus creates a new list of PeerStatus.
func NewPeerStatus_List(s *capnp.Segment, sz int32) (PeerStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return PeerStatus_List{l}, err
}

func (s PeerStatus_List) At(i int) PeerStatus { return PeerStatus{s.List.Struct(i)} }

func (s PeerStatus_List) Set(i int, v PeerStatus) error { return s.List.SetStruct(i, v.Struct) }

func (s PeerStatus_List) String() string {
	str, _ := text.MarshalList(0x8167eafcc8695b1c, s.List)
	return str
}

// PeerStatus_Promise is a wrapper for a PeerStatus promised by a client call.
type PeerStatus_Promise struct{ *capnp.Pipeline }

func (p PeerStatus_Promise) Struct() (PeerStatus, error) {
	s, err := p.Pipeline.Struct()
	return PeerStatus{s}, err
}

// A single item that was killed by the gc
type GarbageItem struct{ capnp.Struct }

// GarbageItem_TypeID is the unique identifier for the type GarbageItem.
const GarbageItem_TypeID = 0xecb10f87fbe0d6c5

func NewGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func NewRootGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func ReadRootGarbageItem(msg *capnp.Message) (GarbageItem, error) {
	root, err := msg.RootPtr()
	return GarbageItem{root.Struct()}, err
}

func (s GarbageItem) String() string {
	str, _ := text.Marshal(0xecb10f87fbe0d6c5, s.Struct)
	return str
}

func (s GarbageItem) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GarbageItem) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GarbageItem) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GarbageItem) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GarbageItem) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s GarbageItem) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GarbageItem) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s GarbageItem) Owner() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GarbageItem) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GarbageItem) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GarbageItem) SetOwner(v string) error {
	return s.Struct.SetText(2, v)
}

// GarbageItem_List is a list of GarbageItem.
type GarbageItem_List struct{ capnp.List }

// NewGarbageItem creates a new list of GarbageItem.
func NewGarbageItem_List(s *capnp.Segment, sz int32) (GarbageItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return GarbageItem_List{l}, err
}

func (s GarbageItem_List) At(i int) GarbageItem { return GarbageItem{s.List.Struct(i)} }

func (s GarbageItem_List) Set(i int, v GarbageItem) error { return s.List.SetStruct(i, v.Struct) }

func (s GarbageItem_List) String() string {
	str, _ := text.MarshalList(0xecb10f87fbe0d6c5, s.List)
	return str
}

// GarbageItem_Promise is a wrapper for a GarbageItem promised by a client call.
type GarbageItem_Promise struct{ *capnp.Pipeline }

func (p GarbageItem_Promise) Struct() (GarbageItem, error) {
	s, err := p.Pipeline.Struct()
	return GarbageItem{s}, err
}

type Version struct{ capnp.Struct }

// Version_TypeID is the unique identifier for the type Version.
const Version_TypeID = 0xe1b522247fc407ad

func NewVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func NewRootVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func ReadRootVersion(msg *capnp.Message) (Version, error) {
	root, err := msg.RootPtr()
	return Version{root.Struct()}, err
}

func (s Version) String() string {
	str, _ := text.Marshal(0xe1b522247fc407ad, s.Struct)
	return str
}

func (s Version) ServerVersion() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Version) HasServerVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Version) ServerVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Version) SetServerVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Version) ServerRev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Version) HasServerRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Version) ServerRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Version) SetServerRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Version) BackendVersion() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Version) HasBackendVersion() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Version) BackendVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Version) SetBackendVersion(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Version) BackendRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Version) HasBackendRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Version) BackendRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Version) SetBackendRev(v string) error {
	return s.Struct.SetText(3, v)
}

// Version_List is a list of Version.
type Version_List struct{ capnp.List }

// NewVersion creates a new list of Version.
func NewVersion_List(s *capnp.Segment, sz int32) (Version_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Version_List{l}, err
}

func (s Version_List) At(i int) Version { return Version{s.List.Struct(i)} }

func (s Version_List) Set(i int, v Version) error { return s.List.SetStruct(i, v.Struct) }

func (s Version_List) String() string {
	str, _ := text.MarshalList(0xe1b522247fc407ad, s.List)
	return str
}

// Version_Promise is a wrapper for a Version promised by a client call.
type Version_Promise struct{ *capnp.Pipeline }

func (p Version_Promise) Struct() (Version, error) {
	s, err := p.Pipeline.Struct()
	return Version{s}, err
}

type FS struct{ Client capnp.Client }

// FS_TypeID is the unique identifier for the type FS.
const FS_TypeID = 0xe2b3585db47cd4f9

func (c FS) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) StageFromData(ctx context.Context, params func(FS_stageFromData_Params) error, opts ...capnp.CallOption) FS_stageFromData_Results_Promise {
	if c.Client == nil {
		return FS_stageFromData_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stageFromData",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stageFromData_Params{Struct: s}) }
	}
	return FS_stageFromData_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type FS_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	StageFromData(FS_stageFromData) error
}

func FS_ServerToClient(s FS_Server) FS {
	c, _ := s.(server.Closer)
	return FS{Client: server.New(FS_Methods(nil, s), c)}
}

func FS_Methods(methods []server.Method, s FS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 14)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stageFromData",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stageFromData{c, opts, FS_stageFromData_Params{Struct: p}, FS_stageFromData_Results{Struct: r}}
			return s.StageFromData(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// FS_stage holds the arguments for a server call to FS.stage.
type FS_stage struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stage_Params
	Results FS_stage_Results
}

// FS_list holds the arguments for a server call to FS.list.
type FS_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_list_Params
	Results FS_list_Results
}

// FS_cat holds the arguments for a server call to FS.cat.
type FS_cat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_cat_Params
	Results FS_cat_Results
}

// FS_mkdir holds the arguments for a server call to FS.mkdir.
type FS_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_mkdir_Params
	Results FS_mkdir_Results
}

// FS_remove holds the arguments for a server call to FS.remove.
type FS_remove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_remove_Params
	Results FS_remove_Results
}

// FS_move holds the arguments for a server call to FS.move.
type FS_move struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_move_Params
	Results FS_move_Results
}

// FS_copy holds the arguments for a server call to FS.copy.
type FS_copy struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_copy_Params
	Results FS_copy_Results
}

// FS_pin holds the arguments for a server call to FS.pin.
type FS_pin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_pin_Params
	Results FS_pin_Results
}

// FS_unpin holds the arguments for a server call to FS.unpin.
type FS_unpin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_unpin_Params
	Results FS_unpin_Results
}

// FS_stat holds the arguments for a server call to FS.stat.
type FS_stat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stat_Params
	Results FS_stat_Results
}

// FS_garbageCollect holds the arguments for a server call to FS.garbageCollect.
type FS_garbageCollect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_garbageCollect_Params
	Results FS_garbageCollect_Results
}

// FS_touch holds the arguments for a server call to FS.touch.
type FS_touch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_touch_Params
	Results FS_touch_Results
}

// FS_exists holds the arguments for a server call to FS.exists.
type FS_exists struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_exists_Params
	Results FS_exists_Results
}

// FS_stageFromData holds the arguments for a server call to FS.stageFromData.
type FS_stageFromData struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stageFromData_Params
	Results FS_stageFromData_Results
}

type FS_stage_Params struct{ capnp.Struct }

// FS_stage_Params_TypeID is the unique identifier for the type FS_stage_Params.
const FS_stage_Params_TypeID = 0x9ba7a818970a029c

func NewFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func NewRootFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func ReadRootFS_stage_Params(msg *capnp.Message) (FS_stage_Params, error) {
	root, err := msg.RootPtr()
	return FS_stage_Params{root.Struct()}, err
}

func (s FS_stage_Params) String() string {
	str, _ := text.Marshal(0x9ba7a818970a029c, s.Struct)
	return str
}

func (s FS_stage_Params) LocalPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stage_Params) HasLocalPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) LocalPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetLocalPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_stage_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_stage_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_stage_Params_List is a list of FS_stage_Params.
type FS_stage_Params_List struct{ capnp.List }

// NewFS_stage_Params creates a new list of FS_stage_Params.
func NewFS_stage_Params_List(s *capnp.Segment, sz int32) (FS_stage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_stage_Params_List{l}, err
}

func (s FS_stage_Params_List) At(i int) FS_stage_Params { return FS_stage_Params{s.List.Struct(i)} }

func (s FS_stage_Params_List) Set(i int, v FS_stage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Params_List) String() string {
	str, _ := text.MarshalList(0x9ba7a818970a029c, s.List)
	return str
}

// FS_stage_Params_Promise is a wrapper for a FS_stage_Params promised by a client call.
type FS_stage_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Params_Promise) Struct() (FS_stage_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Params{s}, err
}

type FS_stage_Results struct{ capnp.Struct }

// FS_stage_Results_TypeID is the unique identifier for the type FS_stage_Results.
const FS_stage_Results_TypeID = 0x884238694e8b8d88

func NewFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func NewRootFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func ReadRootFS_stage_Results(msg *capnp.Message) (FS_stage_Results, error) {
	root, err := msg.RootPtr()
	return FS_stage_Results{root.Struct()}, err
}

func (s FS_stage_Results) String() string {
	str, _ := text.Marshal(0x884238694e8b8d88, s.Struct)
	return str
}

// FS_stage_Results_List is a list of FS_stage_Results.
type FS_stage_Results_List struct{ capnp.List }

// NewFS_stage_Results creates a new list of FS_stage_Results.
func NewFS_stage_Results_List(s *capnp.Segment, sz int32) (FS_stage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_stage_Results_List{l}, err
}

func (s FS_stage_Results_List) At(i int) FS_stage_Results { return FS_stage_Results{s.List.Struct(i)} }

func (s FS_stage_Results_List) Set(i int, v FS_stage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Results_List) String() string {
	str, _ := text.MarshalList(0x884238694e8b8d88, s.List)
	return str
}

// FS_stage_Results_Promise is a wrapper for a FS_stage_Results promised by a client call.
type FS_stage_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Results_Promise) Struct() (FS_stage_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Results{s}, err
}

type FS_list_Params struct{ capnp.Struct }

// FS_list_Params_TypeID is the unique identifier for the type FS_list_Params.
const FS_list_Params_TypeID = 0xfd86771dd5950237

func NewFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func NewRootFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func ReadRootFS_list_Params(msg *capnp.Message) (FS_list_Params, error) {
	root, err := msg.RootPtr()
	return FS_list_Params{root.Struct()}, err
}

func (s FS_list_Params) String() string {
	str, _ := text.Marshal(0xfd86771dd5950237, s.Struct)
	return str
}

func (s FS_list_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_list_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_list_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_list_Params) MaxDepth() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_list_Params) SetMaxDepth(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_list_Params_List is a list of FS_list_Params.
type FS_list_Params_List struct{ capnp.List }

// NewFS_list_Params creates a new list of FS_list_Params.
func NewFS_list_Params_List(s *capnp.Segment, sz int32) (FS_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_list_Params_List{l}, err
}

func (s FS_list_Params_List) At(i int) FS_list_Params { return FS_list_Params{s.List.Struct(i)} }

func (s FS_list_Params_List) Set(i int, v FS_list_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_list_Params_List) String() string {
	str, _ := text.MarshalList(0xfd86771dd5950237, s.List)
	return str
}

// FS_list_Params_Promise is a wrapper for a FS_list_Params promised by a client call.
type FS_list_Params_Promise struct{ *capnp.Pipeline }

func (p FS_list_Params_Promise) Struct() (FS_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Params{s}, err
}

type FS_list_Results struct{ capnp.Struct }

// FS_list_Results_TypeID is the unique identifier for the type FS_list_Results.
const FS_list_Results_TypeID = 0xe92935bf20cc2856

func NewFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func NewRootFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func ReadRootFS_list_Results(msg *capnp.Message) (FS_list_Results, error) {
	root, err := msg.RootPtr()
	return FS_list_Results{root.Struct()}, err
}

func (s FS_list_Results) String() string {
	str, _ := text.Marshal(0xe92935bf20cc2856, s.Struct)
	return str
}

func (s FS_list_Results) Entries() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_list_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Results) SetEntries(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_list_Results) NewEntries(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_list_Results_List is a list of FS_list_Results.
type FS_list_Results_List struct{ capnp.List }

// NewFS_list_Results creates a new list of FS_list_Results.
func NewFS_list_Results_List(s *capnp.Segment, sz int32) (FS_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_list_Results_List{l}, err
}

func (s FS_list_Results_List) At(i int) FS_list_Results { return FS_list_Results{s.List.Struct(i)} }

func (s FS_list_Results_List) Set(i int, v FS_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_list_Results_List) String() string {
	str, _ := text.MarshalList(0xe92935bf20cc2856, s.List)
	return str
}

// FS_list_Results_Promise is a wrapper for a FS_list_Results promised by a client call.
type FS_list_Results_Promise struct{ *capnp.Pipeline }

func (p FS_list_Results_Promise) Struct() (FS_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Results{s}, err
}

type FS_cat_Params struct{ capnp.Struct }

// FS_cat_Params_TypeID is the unique identifier for the type FS_cat_Params.
const FS_cat_Params_TypeID = 0xa9095b4cff1e5634

func NewFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func NewRootFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func ReadRootFS_cat_Params(msg *capnp.Message) (FS_cat_Params, error) {
	root, err := msg.RootPtr()
	return FS_cat_Params{root.Struct()}, err
}

func (s FS_cat_Params) String() string {
	str, _ := text.Marshal(0xa9095b4cff1e5634, s.Struct)
	return str
}

func (s FS_cat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Params_List is a list of FS_cat_Params.
type FS_cat_Params_List struct{ capnp.List }

// NewFS_cat_Params creates a new list of FS_cat_Params.
func NewFS_cat_Params_List(s *capnp.Segment, sz int32) (FS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Params_List{l}, err
}

func (s FS_cat_Params_List) At(i int) FS_cat_Params { return FS_cat_Params{s.List.Struct(i)} }

func (s FS_cat_Params_List) Set(i int, v FS_cat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Params_List) String() string {
	str, _ := text.MarshalList(0xa9095b4cff1e5634, s.List)
	return str
}

// FS_cat_Params_Promise is a wrapper for a FS_cat_Params promised by a client call.
type FS_cat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Params_Promise) Struct() (FS_cat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Params{s}, err
}

type FS_cat_Results struct{ capnp.Struct }

// FS_cat_Results_TypeID is the unique identifier for the type FS_cat_Results.
const FS_cat_Results_TypeID = 0x9fe8d2cd92c27a38

func NewFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func NewRootFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func ReadRootFS_cat_Results(msg *capnp.Message) (FS_cat_Results, error) {
	root, err := msg.RootPtr()
	return FS_cat_Results{root.Struct()}, err
}

func (s FS_cat_Results) String() string {
	str, _ := text.Marshal(0x9fe8d2cd92c27a38, s.Struct)
	return str
}

func (s FS_cat_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_cat_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_cat_Results_List is a list of FS_cat_Results.
type FS_cat_Results_List struct{ capnp.List }

// NewFS_cat_Results creates a new list of FS_cat_Results.
func NewFS_cat_Results_List(s *capnp.Segment, sz int32) (FS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_cat_Results_List{l}, err
}

func (s FS_cat_Results_List) At(i int) FS_cat_Results { return FS_cat_Results{s.List.Struct(i)} }

func (s FS_cat_Results_List) Set(i int, v FS_cat_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Results_List) String() string {
	str, _ := text.MarshalList(0x9fe8d2cd92c27a38, s.List)
	return str
}

// FS_cat_Results_Promise is a wrapper for a FS_cat_Results promised by a client call.
type FS_cat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Results_Promise) Struct() (FS_cat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Results{s}, err
}

type FS_mkdir_Params struct{ capnp.Struct }

// FS_mkdir_Params_TypeID is the unique identifier for the type FS_mkdir_Params.
const FS_mkdir_Params_TypeID = 0xb030fc18cb3b0e61

func NewFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func NewRootFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func ReadRootFS_mkdir_Params(msg *capnp.Message) (FS_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Params{root.Struct()}, err
}

func (s FS_mkdir_Params) String() string {
	str, _ := text.Marshal(0xb030fc18cb3b0e61, s.Struct)
	return str
}

func (s FS_mkdir_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_mkdir_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_mkdir_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_mkdir_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_mkdir_Params) CreateParents() bool {
	return s.Struct.Bit(0)
}

func (s FS_mkdir_Params) SetCreateParents(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_mkdir_Params_List is a list of FS_mkdir_Params.
type FS_mkdir_Params_List struct{ capnp.List }

// NewFS_mkdir_Params creates a new list of FS_mkdir_Params.
func NewFS_mkdir_Params_List(s *capnp.Segment, sz int32) (FS_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_mkdir_Params_List{l}, err
}

func (s FS_mkdir_Params_List) At(i int) FS_mkdir_Params { return FS_mkdir_Params{s.List.Struct(i)} }

func (s FS_mkdir_Params_List) Set(i int, v FS_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xb030fc18cb3b0e61, s.List)
	return str
}

// FS_mkdir_Params_Promise is a wrapper for a FS_mkdir_Params promised by a client call.
type FS_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Params_Promise) Struct() (FS_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Params{s}, err
}

type FS_mkdir_Results struct{ capnp.Struct }

// FS_mkdir_Results_TypeID is the unique identifier for the type FS_mkdir_Results.
const FS_mkdir_Results_TypeID = 0xf3243256580294f3

func NewFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func NewRootFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func ReadRootFS_mkdir_Results(msg *capnp.Message) (FS_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Results{root.Struct()}, err
}

func (s FS_mkdir_Results) String() string {
	str, _ := text.Marshal(0xf3243256580294f3, s.Struct)
	return str
}

// FS_mkdir_Results_List is a list of FS_mkdir_Results.
type FS_mkdir_Results_List struct{ capnp.List }

// NewFS_mkdir_Results creates a new list of FS_mkdir_Results.
func NewFS_mkdir_Results_List(s *capnp.Segment, sz int32) (FS_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_mkdir_Results_List{l}, err
}

func (s FS_mkdir_Results_List) At(i int) FS_mkdir_Results { return FS_mkdir_Results{s.List.Struct(i)} }

func (s FS_mkdir_Results_List) Set(i int, v FS_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xf3243256580294f3, s.List)
	return str
}

// FS_mkdir_Results_Promise is a wrapper for a FS_mkdir_Results promised by a client call.
type FS_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Results_Promise) Struct() (FS_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Results{s}, err
}

type FS_remove_Params struct{ capnp.Struct }

// FS_remove_Params_TypeID is the unique identifier for the type FS_remove_Params.
const FS_remove_Params_TypeID = 0xa99c622e110c1203

func NewFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func NewRootFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func ReadRootFS_remove_Params(msg *capnp.Message) (FS_remove_Params, error) {
	root, err := msg.RootPtr()
	return FS_remove_Params{root.Struct()}, err
}

func (s FS_remove_Params) String() string {
	str, _ := text.Marshal(0xa99c622e110c1203, s.Struct)
	return str
}

func (s FS_remove_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_remove_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_remove_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_remove_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_remove_Params_List is a list of FS_remove_Params.
type FS_remove_Params_List struct{ capnp.List }

// NewFS_remove_Params creates a new list of FS_remove_Params.
func NewFS_remove_Params_List(s *capnp.Segment, sz int32) (FS_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_remove_Params_List{l}, err
}

func (s FS_remove_Params_List) At(i int) FS_remove_Params { return FS_remove_Params{s.List.Struct(i)} }

func (s FS_remove_Params_List) Set(i int, v FS_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xa99c622e110c1203, s.List)
	return str
}

// FS_remove_Params_Promise is a wrapper for a FS_remove_Params promised by a client call.
type FS_remove_Params_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Params_Promise) Struct() (FS_remove_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Params{s}, err
}

type FS_remove_Results struct{ capnp.Struct }

// FS_remove_Results_TypeID is the unique identifier for the type FS_remove_Results.
const FS_remove_Results_TypeID = 0xc9b3a8263f6853d7

func NewFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func NewRootFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func ReadRootFS_remove_Results(msg *capnp.Message) (FS_remove_Results, error) {
	root, err := msg.RootPtr()
	return FS_remove_Results{root.Struct()}, err
}

func (s FS_remove_Results) String() string {
	str, _ := text.Marshal(0xc9b3a8263f6853d7, s.Struct)
	return str
}

// FS_remove_Results_List is a list of FS_remove_Results.
type FS_remove_Results_List struct{ capnp.List }

// NewFS_remove_Results creates a new list of FS_remove_Results.
func NewFS_remove_Results_List(s *capnp.Segment, sz int32) (FS_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_remove_Results_List{l}, err
}

func (s FS_remove_Results_List) At(i int) FS_remove_Results {
	return FS_remove_Results{s.List.Struct(i)}
}

func (s FS_remove_Results_List) Set(i int, v FS_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xc9b3a8263f6853d7, s.List)
	return str
}

// FS_remove_Results_Promise is a wrapper for a FS_remove_Results promised by a client call.
type FS_remove_Results_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Results_Promise) Struct() (FS_remove_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Results{s}, err
}

type FS_move_Params struct{ capnp.Struct }

// FS_move_Params_TypeID is the unique identifier for the type FS_move_Params.
const FS_move_Params_TypeID = 0xb76f3dc1dcf4fdf1

func NewFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func NewRootFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func ReadRootFS_move_Params(msg *capnp.Message) (FS_move_Params, error) {
	root, err := msg.RootPtr()
	return FS_move_Params{root.Struct()}, err
}

func (s FS_move_Params) String() string {
	str, _ := text.Marshal(0xb76f3dc1dcf4fdf1, s.Struct)
	return str
}

func (s FS_move_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_move_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_move_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_move_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_move_Params_List is a list of FS_move_Params.
type FS_move_Params_List struct{ capnp.List }

// NewFS_move_Params creates a new list of FS_move_Params.
func NewFS_move_Params_List(s *capnp.Segment, sz int32) (FS_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_move_Params_List{l}, err
}

func (s FS_move_Params_List) At(i int) FS_move_Params { return FS_move_Params{s.List.Struct(i)} }

func (s FS_move_Params_List) Set(i int, v FS_move_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_move_Params_List) String() string {
	str, _ := text.MarshalList(0xb76f3dc1dcf4fdf1, s.List)
	return str
}

// FS_move_Params_Promise is a wrapper for a FS_move_Params promised by a client call.
type FS_move_Params_Promise struct{ *capnp.Pipeline }

func (p FS_move_Params_Promise) Struct() (FS_move_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Params{s}, err
}

type FS_move_Results struct{ capnp.Struct }

// FS_move_Results_TypeID is the unique identifier for the type FS_move_Results.
const FS_move_Results_TypeID = 0xab89c6fc9bf26f2a

func NewFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func NewRootFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func ReadRootFS_move_Results(msg *capnp.Message) (FS_move_Results, error) {
	root, err := msg.RootPtr()
	return FS_move_Results{root.Struct()}, err
}

func (s FS_move_Results) String() string {
	str, _ := text.Marshal(0xab89c6fc9bf26f2a, s.Struct)
	return str
}

// FS_move_Results_List is a list of FS_move_Results.
type FS_move_Results_List struct{ capnp.List }

// NewFS_move_Results creates a new list of FS_move_Results.
func NewFS_move_Results_List(s *capnp.Segment, sz int32) (FS_move_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_move_Results_List{l}, err
}

func (s FS_move_Results_List) At(i int) FS_move_Results { return FS_move_Results{s.List.Struct(i)} }

func (s FS_move_Results_List) Set(i int, v FS_move_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_move_Results_List) String() string {
	str, _ := text.MarshalList(0xab89c6fc9bf26f2a, s.List)
	return str
}

// FS_move_Results_Promise is a wrapper for a FS_move_Results promised by a client call.
type FS_move_Results_Promise struct{ *capnp.Pipeline }

func (p FS_move_Results_Promise) Struct() (FS_move_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Results{s}, err
}

type FS_copy_Params struct{ capnp.Struct }

// FS_copy_Params_TypeID is the unique identifier for the type FS_copy_Params.
const FS_copy_Params_TypeID = 0xc0dd66dedad92ef8

func NewFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func NewRootFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func ReadRootFS_copy_Params(msg *capnp.Message) (FS_copy_Params, error) {
	root, err := msg.RootPtr()
	return FS_copy_Params{root.Struct()}, err
}

func (s FS_copy_Params) String() string {
	str, _ := text.Marshal(0xc0dd66dedad92ef8, s.Struct)
	return str
}

func (s FS_copy_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_copy_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_copy_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_copy_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_copy_Params_List is a list of FS_copy_Params.
type FS_copy_Params_List struct{ capnp.List }

// NewFS_copy_Params creates a new list of FS_copy_Params.
func NewFS_copy_Params_List(s *capnp.Segment, sz int32) (FS_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_copy_Params_List{l}, err
}

func (s FS_copy_Params_List) At(i int) FS_copy_Params { return FS_copy_Params{s.List.Struct(i)} }

func (s FS_copy_Params_List) Set(i int, v FS_copy_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_copy_Params_List) String() string {
	str, _ := text.MarshalList(0xc0dd66dedad92ef8, s.List)
	return str
}

// FS_copy_Params_Promise is a wrapper for a FS_copy_Params promised by a client call.
type FS_copy_Params_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Params_Promise) Struct() (FS_copy_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Params{s}, err
}

type FS_copy_Results struct{ capnp.Struct }

// FS_copy_Results_TypeID is the unique identifier for the type FS_copy_Results.
const FS_copy_Results_TypeID = 0xccf4f28c8951edf6

func NewFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func NewRootFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func ReadRootFS_copy_Results(msg *capnp.Message) (FS_copy_Results, error) {
	root, err := msg.RootPtr()
	return FS_copy_Results{root.Struct()}, err
}

func (s FS_copy_Results) String() string {
	str, _ := text.Marshal(0xccf4f28c8951edf6, s.Struct)
	return str
}

// FS_copy_Results_List is a list of FS_copy_Results.
type FS_copy_Results_List struct{ capnp.List }

// NewFS_copy_Results creates a new list of FS_copy_Results.
func NewFS_copy_Results_List(s *capnp.Segment, sz int32) (FS_copy_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_copy_Results_List{l}, err
}

func (s FS_copy_Results_List) At(i int) FS_copy_Results { return FS_copy_Results{s.List.Struct(i)} }

func (s FS_copy_Results_List) Set(i int, v FS_copy_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_copy_Results_List) String() string {
	str, _ := text.MarshalList(0xccf4f28c8951edf6, s.List)
	return str
}

// FS_copy_Results_Promise is a wrapper for a FS_copy_Results promised by a client call.
type FS_copy_Results_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Results_Promise) Struct() (FS_copy_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Results{s}, err
}

type FS_pin_Params struct{ capnp.Struct }

// FS_pin_Params_TypeID is the unique identifier for the type FS_pin_Params.
const FS_pin_Params_TypeID = 0x9efc974402f016f6

func NewFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func NewRootFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func ReadRootFS_pin_Params(msg *capnp.Message) (FS_pin_Params, error) {
	root, err := msg.RootPtr()
	return FS_pin_Params{root.Struct()}, err
}

func (s FS_pin_Params) String() string {
	str, _ := text.Marshal(0x9efc974402f016f6, s.Struct)
	return str
}

func (s FS_pin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_pin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_pin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_pin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_pin_Params_List is a list of FS_pin_Params.
type FS_pin_Params_List struct{ capnp.List }

// NewFS_pin_Params creates a new list of FS_pin_Params.
func NewFS_pin_Params_List(s *capnp.Segment, sz int32) (FS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_pin_Params_List{l}, err
}

func (s FS_pin_Params_List) At(i int) FS_pin_Params { return FS_pin_Params{s.List.Struct(i)} }

func (s FS_pin_Params_List) Set(i int, v FS_pin_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Params_List) String() string {
	str, _ := text.MarshalList(0x9efc974402f016f6, s.List)
	return str
}

// FS_pin_Params_Promise is a wrapper for a FS_pin_Params promised by a client call.
type FS_pin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Params_Promise) Struct() (FS_pin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Params{s}, err
}

type FS_pin_Results struct{ capnp.Struct }

// FS_pin_Results_TypeID is the unique identifier for the type FS_pin_Results.
const FS_pin_Results_TypeID = 0xdba8e30445acc3f4

func NewFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func NewRootFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func ReadRootFS_pin_Results(msg *capnp.Message) (FS_pin_Results, error) {
	root, err := msg.RootPtr()
	return FS_pin_Results{root.Struct()}, err
}

func (s FS_pin_Results) String() string {
	str, _ := text.Marshal(0xdba8e30445acc3f4, s.Struct)
	return str
}

// FS_pin_Results_List is a list of FS_pin_Results.
type FS_pin_Results_List struct{ capnp.List }

// NewFS_pin_Results creates a new list of FS_pin_Results.
func NewFS_pin_Results_List(s *capnp.Segment, sz int32) (FS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_pin_Results_List{l}, err
}

func (s FS_pin_Results_List) At(i int) FS_pin_Results { return FS_pin_Results{s.List.Struct(i)} }

func (s FS_pin_Results_List) Set(i int, v FS_pin_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Results_List) String() string {
	str, _ := text.MarshalList(0xdba8e30445acc3f4, s.List)
	return str
}

// FS_pin_Results_Promise is a wrapper for a FS_pin_Results promised by a client call.
type FS_pin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Results_Promise) Struct() (FS_pin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Results{s}, err
}

type FS_unpin_Params struct{ capnp.Struct }

// FS_unpin_Params_TypeID is the unique identifier for the type FS_unpin_Params.
const FS_unpin_Params_TypeID = 0xc9558eac26b0f15e

func NewFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func NewRootFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func ReadRootFS_unpin_Params(msg *capnp.Message) (FS_unpin_Params, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Params{root.Struct()}, err
}

func (s FS_unpin_Params) String() string {
	str, _ := text.Marshal(0xc9558eac26b0f15e, s.Struct)
	return str
}

func (s FS_unpin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_unpin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_unpin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_unpin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_unpin_Params_List is a list of FS_unpin_Params.
type FS_unpin_Params_List struct{ capnp.List }

// NewFS_unpin_Params creates a new list of FS_unpin_Params.
func NewFS_unpin_Params_List(s *capnp.Segment, sz int32) (FS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_unpin_Params_List{l}, err
}

func (s FS_unpin_Params_List) At(i int) FS_unpin_Params { return FS_unpin_Params{s.List.Struct(i)} }

func (s FS_unpin_Params_List) Set(i int, v FS_unpin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Params_List) String() string {
	str, _ := text.MarshalList(0xc9558eac26b0f15e, s.List)
	return str
}

// FS_unpin_Params_Promise is a wrapper for a FS_unpin_Params promised by a client call.
type FS_unpin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Params_Promise) Struct() (FS_unpin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Params{s}, err
}

type FS_unpin_Results struct{ capnp.Struct }

// FS_unpin_Results_TypeID is the unique identifier for the type FS_unpin_Results.
const FS_unpin_Results_TypeID = 0x87c49e302c6516f8

func NewFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func NewRootFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func ReadRootFS_unpin_Results(msg *capnp.Message) (FS_unpin_Results, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Results{root.Struct()}, err
}

func (s FS_unpin_Results) String() string {
	str, _ := text.Marshal(0x87c49e302c6516f8, s.Struct)
	return str
}

// FS_unpin_Results_List is a list of FS_unpin_Results.
type FS_unpin_Results_List struct{ capnp.List }

// NewFS_unpin_Results creates a new list of FS_unpin_Results.
func NewFS_unpin_Results_List(s *capnp.Segment, sz int32) (FS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_unpin_Results_List{l}, err
}

func (s FS_unpin_Results_List) At(i int) FS_unpin_Results { return FS_unpin_Results{s.List.Struct(i)} }

func (s FS_unpin_Results_List) Set(i int, v FS_unpin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Results_List) String() string {
	str, _ := text.MarshalList(0x87c49e302c6516f8, s.List)
	return str
}

// FS_unpin_Results_Promise is a wrapper for a FS_unpin_Results promised by a client call.
type FS_unpin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Results_Promise) Struct() (FS_unpin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Results{s}, err
}

type FS_stat_Params struct{ capnp.Struct }

// FS_stat_Params_TypeID is the unique identifier for the type FS_stat_Params.
const FS_stat_Params_TypeID = 0xd78724f6fbd5c5c5

func NewFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func NewRootFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func ReadRootFS_stat_Params(msg *capnp.Message) (FS_stat_Params, error) {
	root, err := msg.RootPtr()
	return FS_stat_Params{root.Struct()}, err
}

func (s FS_stat_Params) String() string {
	str, _ := text.Marshal(0xd78724f6fbd5c5c5, s.Struct)
	return str
}

func (s FS_stat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_stat_Params_List is a list of FS_stat_Params.
type FS_stat_Params_List struct{ capnp.List }

// NewFS_stat_Params creates a new list of FS_stat_Params.
func NewFS_stat_Params_List(s *capnp.Segment, sz int32) (FS_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Params_List{l}, err
}

func (s FS_stat_Params_List) At(i int) FS_stat_Params { return FS_stat_Params{s.List.Struct(i)} }

func (s FS_stat_Params_List) Set(i int, v FS_stat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_stat_Params_List) String() string {
	str, _ := text.MarshalList(0xd78724f6fbd5c5c5, s.List)
	return str
}

// FS_stat_Params_Promise is a wrapper for a FS_stat_Params promised by a client call.
type FS_stat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Params_Promise) Struct() (FS_stat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Params{s}, err
}

type FS_stat_Results struct{ capnp.Struct }

// FS_stat_Results_TypeID is the unique identifier for the type FS_stat_Results.
const FS_stat_Results_TypeID = 0xbdb679ec96303b53

func NewFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func NewRootFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func ReadRootFS_stat_Results(msg *capnp.Message) (FS_stat_Results, error) {
	root, err := msg.RootPtr()
	return FS_stat_Results{root.Struct()}, err
}

func (s FS_stat_Results) String() string {
	str, _ := text.Marshal(0xbdb679ec96303b53, s.Struct)
	return str
}

func (s FS_stat_Results) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s FS_stat_Results) HasInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Results) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s FS_stat_Results) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FS_stat_Results_List is a list of FS_stat_Results.
type FS_stat_Results_List struct{ capnp.List }

// NewFS_stat_Results creates a new list of FS_stat_Results.
func NewFS_stat_Results_List(s *capnp.Segment, sz int32) (FS_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Results_List{l}, err
}

func (s FS_stat_Results_List) At(i int) FS_stat_Results { return FS_stat_Results{s.List.Struct(i)} }

func (s FS_stat_Results_List) Set(i int, v FS_stat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stat_Results_List) String() string {
	str, _ := text.MarshalList(0xbdb679ec96303b53, s.List)
	return str
}

// FS_stat_Results_Promise is a wrapper for a FS_stat_Results promised by a client call.
type FS_stat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Results_Promise) Struct() (FS_stat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Results{s}, err
}

func (p FS_stat_Results_Promise) Info() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FS_garbageCollect_Params struct{ capnp.Struct }

// FS_garbageCollect_Params_TypeID is the unique identifier for the type FS_garbageCollect_Params.
const FS_garbageCollect_Params_TypeID = 0x9cb31f0ede4f5117

func NewFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func NewRootFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func ReadRootFS_garbageCollect_Params(msg *capnp.Message) (FS_garbageCollect_Params, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Params{root.Struct()}, err
}

func (s FS_garbageCollect_Params) String() string {
	str, _ := text.Marshal(0x9cb31f0ede4f5117, s.Struct)
	return str
}

func (s FS_garbageCollect_Params) Aggressive() bool {
	return s.Struct.Bit(0)
}

func (s FS_garbageCollect_Params) SetAggressive(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_garbageCollect_Params_List is a list of FS_garbageCollect_Params.
type FS_garbageCollect_Params_List struct{ capnp.List }

// NewFS_garbageCollect_Params creates a new list of FS_garbageCollect_Params.
func NewFS_garbageCollect_Params_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_garbageCollect_Params_List{l}, err
}

func (s FS_garbageCollect_Params_List) At(i int) FS_garbageCollect_Params {
	return FS_garbageCollect_Params{s.List.Struct(i)}
}

func (s FS_garbageCollect_Params_List) Set(i int, v FS_garbageCollect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Params_List) String() string {
	str, _ := text.MarshalList(0x9cb31f0ede4f5117, s.List)
	return str
}

// FS_garbageCollect_Params_Promise is a wrapper for a FS_garbageCollect_Params promised by a client call.
type FS_garbageCollect_Params_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Params_Promise) Struct() (FS_garbageCollect_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Params{s}, err
}

type FS_garbageCollect_Results struct{ capnp.Struct }

// FS_garbageCollect_Results_TypeID is the unique identifier for the type FS_garbageCollect_Results.
const FS_garbageCollect_Results_TypeID = 0xbb5ea9a03dfddab3

func NewFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func NewRootFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func ReadRootFS_garbageCollect_Results(msg *capnp.Message) (FS_garbageCollect_Results, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Results{root.Struct()}, err
}

func (s FS_garbageCollect_Results) String() string {
	str, _ := text.Marshal(0xbb5ea9a03dfddab3, s.Struct)
	return str
}

func (s FS_garbageCollect_Results) Freed() (GarbageItem_List, error) {
	p, err := s.Struct.Ptr(0)
	return GarbageItem_List{List: p.List()}, err
}

func (s FS_garbageCollect_Results) HasFreed() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_garbageCollect_Results) SetFreed(v GarbageItem_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFreed sets the freed field to a newly
// allocated GarbageItem_List, preferring placement in s's segment.
func (s FS_garbageCollect_Results) NewFreed(n int32) (GarbageItem_List, error) {
	l, err := NewGarbageItem_List(s.Struct.Segment(), n)
	if err != nil {
		return GarbageItem_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_garbageCollect_Results_List is a list of FS_garbageCollect_Results.
type FS_garbageCollect_Results_List struct{ capnp.List }

// NewFS_garbageCollect_Results creates a new list of FS_garbageCollect_Results.
func NewFS_garbageCollect_Results_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_garbageCollect_Results_List{l}, err
}

func (s FS_garbageCollect_Results_List) At(i int) FS_garbageCollect_Results {
	return FS_garbageCollect_Results{s.List.Struct(i)}
}

func (s FS_garbageCollect_Results_List) Set(i int, v FS_garbageCollect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Results_List) String() string {
	str, _ := text.MarshalList(0xbb5ea9a03dfddab3, s.List)
	return str
}

// FS_garbageCollect_Results_Promise is a wrapper for a FS_garbageCollect_Results promised by a client call.
type FS_garbageCollect_Results_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Results_Promise) Struct() (FS_garbageCollect_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Results{s}, err
}

type FS_touch_Params struct{ capnp.Struct }

// FS_touch_Params_TypeID is the unique identifier for the type FS_touch_Params.
const FS_touch_Params_TypeID = 0xab1e48e58e4c69af

func NewFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func NewRootFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func ReadRootFS_touch_Params(msg *capnp.Message) (FS_touch_Params, error) {
	root, err := msg.RootPtr()
	return FS_touch_Params{root.Struct()}, err
}

func (s FS_touch_Params) String() string {
	str, _ := text.Marshal(0xab1e48e58e4c69af, s.Struct)
	return str
}

func (s FS_touch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_touch_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_touch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_touch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_touch_Params_List is a list of FS_touch_Params.
type FS_touch_Params_List struct{ capnp.List }

// NewFS_touch_Params creates a new list of FS_touch_Params.
func NewFS_touch_Params_List(s *capnp.Segment, sz int32) (FS_touch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_touch_Params_List{l}, err
}

func (s FS_touch_Params_List) At(i int) FS_touch_Params { return FS_touch_Params{s.List.Struct(i)} }

func (s FS_touch_Params_List) Set(i int, v FS_touch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Params_List) String() string {
	str, _ := text.MarshalList(0xab1e48e58e4c69af, s.List)
	return str
}

// FS_touch_Params_Promise is a wrapper for a FS_touch_Params promised by a client call.
type FS_touch_Params_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Params_Promise) Struct() (FS_touch_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Params{s}, err
}

type FS_touch_Results struct{ capnp.Struct }

// FS_touch_Results_TypeID is the unique identifier for the type FS_touch_Results.
const FS_touch_Results_TypeID = 0xbf1cf3d6e654e947

func NewFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func NewRootFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func ReadRootFS_touch_Results(msg *capnp.Message) (FS_touch_Results, error) {
	root, err := msg.RootPtr()
	return FS_touch_Results{root.Struct()}, err
}

func (s FS_touch_Results) String() string {
	str, _ := text.Marshal(0xbf1cf3d6e654e947, s.Struct)
	return str
}

// FS_touch_Results_List is a list of FS_touch_Results.
type FS_touch_Results_List struct{ capnp.List }

// NewFS_touch_Results creates a new list of FS_touch_Results.
func NewFS_touch_Results_List(s *capnp.Segment, sz int32) (FS_touch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_touch_Results_List{l}, err
}

func (s FS_touch_Results_List) At(i int) FS_touch_Results { return FS_touch_Results{s.List.Struct(i)} }

func (s FS_touch_Results_List) Set(i int, v FS_touch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Results_List) String() string {
	str, _ := text.MarshalList(0xbf1cf3d6e654e947, s.List)
	return str
}

// FS_touch_Results_Promise is a wrapper for a FS_touch_Results promised by a client call.
type FS_touch_Results_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Results_Promise) Struct() (FS_touch_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Results{s}, err
}

type FS_exists_Params struct{ capnp.Struct }

// FS_exists_Params_TypeID is the unique identifier for the type FS_exists_Params.
const FS_exists_Params_TypeID = 0xdb27e243a580d2f0

func NewFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func NewRootFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func ReadRootFS_exists_Params(msg *capnp.Message) (FS_exists_Params, error) {
	root, err := msg.RootPtr()
	return FS_exists_Params{root.Struct()}, err
}

func (s FS_exists_Params) String() string {
	str, _ := text.Marshal(0xdb27e243a580d2f0, s.Struct)
	return str
}

func (s FS_exists_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_exists_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_exists_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_exists_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_exists_Params_List is a list of FS_exists_Params.
type FS_exists_Params_List struct{ capnp.List }

// NewFS_exists_Params creates a new list of FS_exists_Params.
func NewFS_exists_Params_List(s *capnp.Segment, sz int32) (FS_exists_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_exists_Params_List{l}, err
}

func (s FS_exists_Params_List) At(i int) FS_exists_Params { return FS_exists_Params{s.List.Struct(i)} }

func (s FS_exists_Params_List) Set(i int, v FS_exists_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Params_List) String() string {
	str, _ := text.MarshalList(0xdb27e243a580d2f0, s.List)
	return str
}

// FS_exists_Params_Promise is a wrapper for a FS_exists_Params promised by a client call.
type FS_exists_Params_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Params_Promise) Struct() (FS_exists_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Params{s}, err
}

type FS_exists_Results struct{ capnp.Struct }

// FS_exists_Results_TypeID is the unique identifier for the type FS_exists_Results.
const FS_exists_Results_TypeID = 0xa5753d28ca12d2ba

func NewFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func NewRootFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func ReadRootFS_exists_Results(msg *capnp.Message) (FS_exists_Results, error) {
	root, err := msg.RootPtr()
	return FS_exists_Results{root.Struct()}, err
}

func (s FS_exists_Results) String() string {
	str, _ := text.Marshal(0xa5753d28ca12d2ba, s.Struct)
	return str
}

func (s FS_exists_Results) Exists() bool {
	return s.Struct.Bit(0)
}

func (s FS_exists_Results) SetExists(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_exists_Results_List is a list of FS_exists_Results.
type FS_exists_Results_List struct{ capnp.List }

// NewFS_exists_Results creates a new list of FS_exists_Results.
func NewFS_exists_Results_List(s *capnp.Segment, sz int32) (FS_exists_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_exists_Results_List{l}, err
}

func (s FS_exists_Results_List) At(i int) FS_exists_Results {
	return FS_exists_Results{s.List.Struct(i)}
}

func (s FS_exists_Results_List) Set(i int, v FS_exists_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Results_List) String() string {
	str, _ := text.MarshalList(0xa5753d28ca12d2ba, s.List)
	return str
}

// FS_exists_Results_Promise is a wrapper for a FS_exists_Results promised by a client call.
type FS_exists_Results_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Results_Promise) Struct() (FS_exists_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Results{s}, err
}

type FS_stageFromData_Params struct{ capnp.Struct }

// FS_stageFromData_Params_TypeID is the unique identifier for the type FS_stageFromData_Params.
const FS_stageFromData_Params_TypeID = 0x958ea6b33d4e8cbb

func NewFS_stageFromData_Params(s *capnp.Segment) (FS_stageFromData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stageFromData_Params{st}, err
}

func NewRootFS_stageFromData_Params(s *capnp.Segment) (FS_stageFromData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stageFromData_Params{st}, err
}

func ReadRootFS_stageFromData_Params(msg *capnp.Message) (FS_stageFromData_Params, error) {
	root, err := msg.RootPtr()
	return FS_stageFromData_Params{root.Struct()}, err
}

func (s FS_stageFromData_Params) String() string {
	str, _ := text.Marshal(0x958ea6b33d4e8cbb, s.Struct)
	return str
}

func (s FS_stageFromData_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stageFromData_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stageFromData_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stageFromData_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_stageFromData_Params_List is a list of FS_stageFromData_Params.
type FS_stageFromData_Params_List struct{ capnp.List }

// NewFS_stageFromData_Params creates a new list of FS_stageFromData_Params.
func NewFS_stageFromData_Params_List(s *capnp.Segment, sz int32) (FS_stageFromData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stageFromData_Params_List{l}, err
}

func (s FS_stageFromData_Params_List) At(i int) FS_stageFromData_Params {
	return FS_stageFromData_Params{s.List.Struct(i)}
}

func (s FS_stageFromData_Params_List) Set(i int, v FS_stageFromData_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stageFromData_Params_List) String() string {
	str, _ := text.MarshalList(0x958ea6b33d4e8cbb, s.List)
	return str
}

// FS_stageFromData_Params_Promise is a wrapper for a FS_stageFromData_Params promised by a client call.
type FS_stageFromData_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stageFromData_Params_Promise) Struct() (FS_stageFromData_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stageFromData_Params{s}, err
}

type FS_stageFromData_Results struct{ capnp.Struct }

// FS_stageFromData_Results_TypeID is the unique identifier for the type FS_stageFromData_Results.
const FS_stageFromData_Results_TypeID = 0x809d4e73dc197b11

func NewFS_stageFromData_Results(s *capnp.Segment) (FS_stageFromData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_stageFromData_Results{st}, err
}

func NewRootFS_stageFromData_Results(s *capnp.Segment) (FS_stageFromData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_stageFromData_Results{st}, err
}

func ReadRootFS_stageFromData_Results(msg *capnp.Message) (FS_stageFromData_Results, error) {
	root, err := msg.RootPtr()
	return FS_stageFromData_Results{root.Struct()}, err
}

func (s FS_stageFromData_Results) String() string {
	str, _ := text.Marshal(0x809d4e73dc197b11, s.Struct)
	return str
}

func (s FS_stageFromData_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_stageFromData_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_stageFromData_Results_List is a list of FS_stageFromData_Results.
type FS_stageFromData_Results_List struct{ capnp.List }

// NewFS_stageFromData_Results creates a new list of FS_stageFromData_Results.
func NewFS_stageFromData_Results_List(s *capnp.Segment, sz int32) (FS_stageFromData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_stageFromData_Results_List{l}, err
}

func (s FS_stageFromData_Results_List) At(i int) FS_stageFromData_Results {
	return FS_stageFromData_Results{s.List.Struct(i)}
}

func (s FS_stageFromData_Results_List) Set(i int, v FS_stageFromData_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stageFromData_Results_List) String() string {
	str, _ := text.MarshalList(0x809d4e73dc197b11, s.List)
	return str
}

// FS_stageFromData_Results_Promise is a wrapper for a FS_stageFromData_Results promised by a client call.
type FS_stageFromData_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stageFromData_Results_Promise) Struct() (FS_stageFromData_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stageFromData_Results{s}, err
}

type VCS struct{ Client capnp.Client }

// VCS_TypeID is the unique identifier for the type VCS.
const VCS_TypeID = 0xfaa680ef12c44624

func (c VCS) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type VCS_Server interface {
	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error
}

func VCS_ServerToClient(s VCS_Server) VCS {
	c, _ := s.(server.Closer)
	return VCS{Client: server.New(VCS_Methods(nil, s), c)}
}

func VCS_Methods(methods []server.Method, s VCS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// VCS_log holds the arguments for a server call to VCS.log.
type VCS_log struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_log_Params
	Results VCS_log_Results
}

// VCS_commit holds the arguments for a server call to VCS.commit.
type VCS_commit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commit_Params
	Results VCS_commit_Results
}

// VCS_tag holds the arguments for a server call to VCS.tag.
type VCS_tag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_tag_Params
	Results VCS_tag_Results
}

// VCS_untag holds the arguments for a server call to VCS.untag.
type VCS_untag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_untag_Params
	Results VCS_untag_Results
}

// VCS_reset holds the arguments for a server call to VCS.reset.
type VCS_reset struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_reset_Params
	Results VCS_reset_Results
}

// VCS_history holds the arguments for a server call to VCS.history.
type VCS_history struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_history_Params
	Results VCS_history_Results
}

// VCS_makeDiff holds the arguments for a server call to VCS.makeDiff.
type VCS_makeDiff struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_makeDiff_Params
	Results VCS_makeDiff_Results
}

// VCS_sync holds the arguments for a server call to VCS.sync.
type VCS_sync struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_sync_Params
	Results VCS_sync_Results
}

// VCS_fetch holds the arguments for a server call to VCS.fetch.
type VCS_fetch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_fetch_Params
	Results VCS_fetch_Results
}

type VCS_log_Params struct{ capnp.Struct }

// VCS_log_Params_TypeID is the unique identifier for the type VCS_log_Params.
const VCS_log_Params_TypeID = 0xa4efd353c57d2b85

func NewVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func NewRootVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func ReadRootVCS_log_Params(msg *capnp.Message) (VCS_log_Params, error) {
	root, err := msg.RootPtr()
	return VCS_log_Params{root.Struct()}, err
}

func (s VCS_log_Params) String() string {
	str, _ := text.Marshal(0xa4efd353c57d2b85, s.Struct)
	return str
}

// VCS_log_Params_List is a list of VCS_log_Params.
type VCS_log_Params_List struct{ capnp.List }

// NewVCS_log_Params creates a new list of VCS_log_Params.
func NewVCS_log_Params_List(s *capnp.Segment, sz int32) (VCS_log_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_log_Params_List{l}, err
}

func (s VCS_log_Params_List) At(i int) VCS_log_Params { return VCS_log_Params{s.List.Struct(i)} }

func (s VCS_log_Params_List) Set(i int, v VCS_log_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_log_Params_List) String() string {
	str, _ := text.MarshalList(0xa4efd353c57d2b85, s.List)
	return str
}

// VCS_log_Params_Promise is a wrapper for a VCS_log_Params promised by a client call.
type VCS_log_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Params_Promise) Struct() (VCS_log_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Params{s}, err
}

type VCS_log_Results struct{ capnp.Struct }

// VCS_log_Results_TypeID is the unique identifier for the type VCS_log_Results.
const VCS_log_Results_TypeID = 0xf7250939585a23f6

func NewVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func NewRootVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func ReadRootVCS_log_Results(msg *capnp.Message) (VCS_log_Results, error) {
	root, err := msg.RootPtr()
	return VCS_log_Results{root.Struct()}, err
}

func (s VCS_log_Results) String() string {
	str, _ := text.Marshal(0xf7250939585a23f6, s.Struct)
	return str
}

func (s VCS_log_Results) Entries() (Commit_List, error) {
	p, err := s.Struct.Ptr(0)
	return Commit_List{List: p.List()}, err
}

func (s VCS_log_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_log_Results) SetEntries(v Commit_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Commit_List, preferring placement in s's segment.
func (s VCS_log_Results) NewEntries(n int32) (Commit_List, error) {
	l, err := NewCommit_List(s.Struct.Segment(), n)
	if err != nil {
		return Commit_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_log_Results_List is a list of VCS_log_Results.
type VCS_log_Results_List struct{ capnp.List }

// NewVCS_log_Results creates a new list of VCS_log_Results.
func NewVCS_log_Results_List(s *capnp.Segment, sz int32) (VCS_log_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_log_Results_List{l}, err
}

func (s VCS_log_Results_List) At(i int) VCS_log_Results { return VCS_log_Results{s.List.Struct(i)} }

func (s VCS_log_Results_List) Set(i int, v VCS_log_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_log_Results_List) String() string {
	str, _ := text.MarshalList(0xf7250939585a23f6, s.List)
	return str
}

// VCS_log_Results_Promise is a wrapper for a VCS_log_Results promised by a client call.
type VCS_log_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Results_Promise) Struct() (VCS_log_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Results{s}, err
}

type VCS_commit_Params struct{ capnp.Struct }

// VCS_commit_Params_TypeID is the unique identifier for the type VCS_commit_Params.
const VCS_commit_Params_TypeID = 0xd9459f2361338d96

func NewVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func NewRootVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func ReadRootVCS_commit_Params(msg *capnp.Message) (VCS_commit_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Params{root.Struct()}, err
}

func (s VCS_commit_Params) String() string {
	str, _ := text.Marshal(0xd9459f2361338d96, s.Struct)
	return str
}

func (s VCS_commit_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commit_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commit_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commit_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commit_Params_List is a list of VCS_commit_Params.
type VCS_commit_Params_List struct{ capnp.List }

// NewVCS_commit_Params creates a new list of VCS_commit_Params.
func NewVCS_commit_Params_List(s *capnp.Segment, sz int32) (VCS_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commit_Params_List{l}, err
}

func (s VCS_commit_Params_List) At(i int) VCS_commit_Params {
	return VCS_commit_Params{s.List.Struct(i)}
}

func (s VCS_commit_Params_List) Set(i int, v VCS_commit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Params_List) String() string {
	str, _ := text.MarshalList(0xd9459f2361338d96, s.List)
	return str
}

// VCS_commit_Params_Promise is a wrapper for a VCS_commit_Params promised by a client call.
type VCS_commit_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Params_Promise) Struct() (VCS_commit_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Params{s}, err
}

type VCS_commit_Results struct{ capnp.Struct }

// VCS_commit_Results_TypeID is the unique identifier for the type VCS_commit_Results.
const VCS_commit_Results_TypeID = 0xb7d0dd6b467e7539

func NewVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func NewRootVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func ReadRootVCS_commit_Results(msg *capnp.Message) (VCS_commit_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Results{root.Struct()}, err
}

func (s VCS_commit_Results) String() string {
	str, _ := text.Marshal(0xb7d0dd6b467e7539, s.Struct)
	return str
}

// VCS_commit_Results_List is a list of VCS_commit_Results.
type VCS_commit_Results_List struct{ capnp.List }

// NewVCS_commit_Results creates a new list of VCS_commit_Results.
func NewVCS_commit_Results_List(s *capnp.Segment, sz int32) (VCS_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_commit_Results_List{l}, err
}

func (s VCS_commit_Results_List) At(i int) VCS_commit_Results {
	return VCS_commit_Results{s.List.Struct(i)}
}

func (s VCS_commit_Results_List) Set(i int, v VCS_commit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Results_List) String() string {
	str, _ := text.MarshalList(0xb7d0dd6b467e7539, s.List)
	return str
}

// VCS_commit_Results_Promise is a wrapper for a VCS_commit_Results promised by a client call.
type VCS_commit_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Results_Promise) Struct() (VCS_commit_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Results{s}, err
}

type VCS_tag_Params struct{ capnp.Struct }

// VCS_tag_Params_TypeID is the unique identifier for the type VCS_tag_Params.
const VCS_tag_Params_TypeID = 0xa97d67096ee7d46d

func NewVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func NewRootVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func ReadRootVCS_tag_Params(msg *capnp.Message) (VCS_tag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Params{root.Struct()}, err
}

func (s VCS_tag_Params) String() string {
	str, _ := text.Marshal(0xa97d67096ee7d46d, s.Struct)
	return str
}

func (s VCS_tag_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_tag_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_tag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_tag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetTagName(v string) error {
	return s.Struct.SetText(1, v)
}

// VCS_tag_Params_List is a list of VCS_tag_Params.
type VCS_tag_Params_List struct{ capnp.List }

// NewVCS_tag_Params creates a new list of VCS_tag_Params.
func NewVCS_tag_Params_List(s *capnp.Segment, sz int32) (VCS_tag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VCS_tag_Params_List{l}, err
}

func (s VCS_tag_Params_List) At(i int) VCS_tag_Params { return VCS_tag_Params{s.List.Struct(i)} }

func (s VCS_tag_Params_List) Set(i int, v VCS_tag_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_tag_Params_List) String() string {
	str, _ := text.MarshalList(0xa97d67096ee7d46d, s.List)
	return str
}

// VCS_tag_Params_Promise is a wrapper for a VCS_tag_Params promised by a client call.
type VCS_tag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Params_Promise) Struct() (VCS_tag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Params{s}, err
}

type VCS_tag_Results struct{ capnp.Struct }

// VCS_tag_Results_TypeID is the unique identifier for the type VCS_tag_Results.
const VCS_tag_Results_TypeID = 0xbda949777c149f4b

func NewVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func NewRootVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func ReadRootVCS_tag_Results(msg *capnp.Message) (VCS_tag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Results{root.Struct()}, err
}

func (s VCS_tag_Results) String() string {
	str, _ := text.Marshal(0xbda949777c149f4b, s.Struct)
	return str
}

// VCS_tag_Results_List is a list of VCS_tag_Results.
type VCS_tag_Results_List struct{ capnp.List }

// NewVCS_tag_Results creates a new list of VCS_tag_Results.
func NewVCS_tag_Results_List(s *capnp.Segment, sz int32) (VCS_tag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_tag_Results_List{l}, err
}

func (s VCS_tag_Results_List) At(i int) VCS_tag_Results { return VCS_tag_Results{s.List.Struct(i)} }

func (s VCS_tag_Results_List) Set(i int, v VCS_tag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_tag_Results_List) String() string {
	str, _ := text.MarshalList(0xbda949777c149f4b, s.List)
	return str
}

// VCS_tag_Results_Promise is a wrapper for a VCS_tag_Results promised by a client call.
type VCS_tag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Results_Promise) Struct() (VCS_tag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Results{s}, err
}

type VCS_untag_Params struct{ capnp.Struct }

// VCS_untag_Params_TypeID is the unique identifier for the type VCS_untag_Params.
const VCS_untag_Params_TypeID = 0xf4d42db113af3a4b

func NewVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func NewRootVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func ReadRootVCS_untag_Params(msg *capnp.Message) (VCS_untag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Params{root.Struct()}, err
}

func (s VCS_untag_Params) String() string {
	str, _ := text.Marshal(0xf4d42db113af3a4b, s.Struct)
	return str
}

func (s VCS_untag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_untag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_untag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_untag_Params) SetTagName(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_untag_Params_List is a list of VCS_untag_Params.
type VCS_untag_Params_List struct{ capnp.List }

// NewVCS_untag_Params creates a new list of VCS_untag_Params.
func NewVCS_untag_Params_List(s *capnp.Segment, sz int32) (VCS_untag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_untag_Params_List{l}, err
}

func (s VCS_untag_Params_List) At(i int) VCS_untag_Params { return VCS_untag_Params{s.List.Struct(i)} }

func (s VCS_untag_Params_List) Set(i int, v VCS_untag_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Params_List) String() string {
	str, _ := text.MarshalList(0xf4d42db113af3a4b, s.List)
	return str
}

// VCS_untag_Params_Promise is a wrapper for a VCS_untag_Params promised by a client call.
type VCS_untag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Params_Promise) Struct() (VCS_untag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Params{s}, err
}

type VCS_untag_Results struct{ capnp.Struct }

// VCS_untag_Results_TypeID is the unique identifier for the type VCS_untag_Results.
const VCS_untag_Results_TypeID = 0xba0de490234c27af

func NewVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func NewRootVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func ReadRootVCS_untag_Results(msg *capnp.Message) (VCS_untag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Results{root.Struct()}, err
}

func (s VCS_untag_Results) String() string {
	str, _ := text.Marshal(0xba0de490234c27af, s.Struct)
	return str
}

// VCS_untag_Results_List is a list of VCS_untag_Results.
type VCS_untag_Results_List struct{ capnp.List }

// NewVCS_untag_Results creates a new list of VCS_untag_Results.
func NewVCS_untag_Results_List(s *capnp.Segment, sz int32) (VCS_untag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_untag_Results_List{l}, err
}

func (s VCS_untag_Results_List) At(i int) VCS_untag_Results {
	return VCS_untag_Results{s.List.Struct(i)}
}

func (s VCS_untag_Results_List) Set(i int, v VCS_untag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Results_List) String() string {
	str, _ := text.MarshalList(0xba0de490234c27af, s.List)
	return str
}

// VCS_untag_Results_Promise is a wrapper for a VCS_untag_Results promised by a client call.
type VCS_untag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Results_Promise) Struct() (VCS_untag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Results{s}, err
}

type VCS_reset_Params struct{ capnp.Struct }

// VCS_reset_Params_TypeID is the unique identifier for the type VCS_reset_Params.
const VCS_reset_Params_TypeID = 0xe71560d8bc06c6fd

func NewVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func NewRootVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func ReadRootVCS_reset_Params(msg *capnp.Message) (VCS_reset_Params, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Params{root.Struct()}, err
}

func (s VCS_reset_Params) String() string {
	str, _ := text.Marshal(0xe71560d8bc06c6fd, s.Struct)
	return str
}

func (s VCS_reset_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_reset_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_reset_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_reset_Params) HasRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_reset_Params) Force() bool {
	return s.Struct.Bit(0)
}

func (s VCS_reset_Params) SetForce(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_reset_Params_List is a list of VCS_reset_Params.
type VCS_reset_Params_List struct{ capnp.List }

// NewVCS_reset_Params creates a new list of VCS_reset_Params.
func NewVCS_reset_Params_List(s *capnp.Segment, sz int32) (VCS_reset_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return VCS_reset_Params_List{l}, err
}

func (s VCS_reset_Params_List) At(i int) VCS_reset_Params { return VCS_reset_Params{s.List.Struct(i)} }

func (s VCS_reset_Params_List) Set(i int, v VCS_reset_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Params_List) String() string {
	str, _ := text.MarshalList(0xe71560d8bc06c6fd, s.List)
	return str
}

// VCS_reset_Params_Promise is a wrapper for a VCS_reset_Params promised by a client call.
type VCS_reset_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Params_Promise) Struct() (VCS_reset_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Params{s}, err
}

type VCS_reset_Results struct{ capnp.Struct }

// VCS_reset_Results_TypeID is the unique identifier for the type VCS_reset_Results.
const VCS_reset_Results_TypeID = 0xf9b772853fd93ea9

func NewVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func NewRootVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func ReadRootVCS_reset_Results(msg *capnp.Message) (VCS_reset_Results, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Results{root.Struct()}, err
}

func (s VCS_reset_Results) String() string {
	str, _ := text.Marshal(0xf9b772853fd93ea9, s.Struct)
	return str
}

// VCS_reset_Results_List is a list of VCS_reset_Results.
type VCS_reset_Results_List struct{ capnp.List }

// NewVCS_reset_Results creates a new list of VCS_reset_Results.
func NewVCS_reset_Results_List(s *capnp.Segment, sz int32) (VCS_reset_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_reset_Results_List{l}, err
}

func (s VCS_reset_Results_List) At(i int) VCS_reset_Results {
	return VCS_reset_Results{s.List.Struct(i)}
}

func (s VCS_reset_Results_List) Set(i int, v VCS_reset_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Results_List) String() string {
	str, _ := text.MarshalList(0xf9b772853fd93ea9, s.List)
	return str
}

// VCS_reset_Results_Promise is a wrapper for a VCS_reset_Results promised by a client call.
type VCS_reset_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Results_Promise) Struct() (VCS_reset_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Results{s}, err
}

type VCS_history_Params struct{ capnp.Struct }

// VCS_history_Params_TypeID is the unique identifier for the type VCS_history_Params.
const VCS_history_Params_TypeID = 0xe154e487144bf3c2

func NewVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func NewRootVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func ReadRootVCS_history_Params(msg *capnp.Message) (VCS_history_Params, error) {
	root, err := msg.RootPtr()
	return VCS_history_Params{root.Struct()}, err
}

func (s VCS_history_Params) String() string {
	str, _ := text.Marshal(0xe154e487144bf3c2, s.Struct)
	return str
}

func (s VCS_history_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_history_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_history_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_history_Params_List is a list of VCS_history_Params.
type VCS_history_Params_List struct{ capnp.List }

// NewVCS_history_Params creates a new list of VCS_history_Params.
func NewVCS_history_Params_List(s *capnp.Segment, sz int32) (VCS_history_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Params_List{l}, err
}

func (s VCS_history_Params_List) At(i int) VCS_history_Params {
	return VCS_history_Params{s.List.Struct(i)}
}

func (s VCS_history_Params_List) Set(i int, v VCS_history_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Params_List) String() string {
	str, _ := text.MarshalList(0xe154e487144bf3c2, s.List)
	return str
}

// VCS_history_Params_Promise is a wrapper for a VCS_history_Params promised by a client call.
type VCS_history_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Params_Promise) Struct() (VCS_history_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Params{s}, err
}

type VCS_history_Results struct{ capnp.Struct }

// VCS_history_Results_TypeID is the unique identifier for the type VCS_history_Results.
const VCS_history_Results_TypeID = 0xe0f49db8c42c72b2

func NewVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func NewRootVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func ReadRootVCS_history_Results(msg *capnp.Message) (VCS_history_Results, error) {
	root, err := msg.RootPtr()
	return VCS_history_Results{root.Struct()}, err
}

func (s VCS_history_Results) String() string {
	str, _ := text.Marshal(0xe0f49db8c42c72b2, s.Struct)
	return str
}

func (s VCS_history_Results) History() (Change_List, error) {
	p, err := s.Struct.Ptr(0)
	return Change_List{List: p.List()}, err
}

func (s VCS_history_Results) HasHistory() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Results) SetHistory(v Change_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHistory sets the history field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s VCS_history_Results) NewHistory(n int32) (Change_List, error) {
	l, err := NewChange_List(s.Struct.Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_history_Results_List is a list of VCS_history_Results.
type VCS_history_Results_List struct{ capnp.List }

// NewVCS_history_Results creates a new list of VCS_history_Results.
func NewVCS_history_Results_List(s *capnp.Segment, sz int32) (VCS_history_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Results_List{l}, err
}

func (s VCS_history_Results_List) At(i int) VCS_history_Results {
	return VCS_history_Results{s.List.Struct(i)}
}

func (s VCS_history_Results_List) Set(i int, v VCS_history_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Results_List) String() string {
	str, _ := text.MarshalList(0xe0f49db8c42c72b2, s.List)
	return str
}

// VCS_history_Results_Promise is a wrapper for a VCS_history_Results promised by a client call.
type VCS_history_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Results_Promise) Struct() (VCS_history_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Results{s}, err
}

type VCS_makeDiff_Params struct{ capnp.Struct }

// VCS_makeDiff_Params_TypeID is the unique identifier for the type VCS_makeDiff_Params.
const VCS_makeDiff_Params_TypeID = 0xe2f81b4403ef433b

func NewVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func NewRootVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func ReadRootVCS_makeDiff_Params(msg *capnp.Message) (VCS_makeDiff_Params, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Params{root.Struct()}, err
}

func (s VCS_makeDiff_Params) String() string {
	str, _ := text.Marshal(0xe2f81b4403ef433b, s.Struct)
	return str
}

func (s VCS_makeDiff_Params) LocalOwner() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalOwner(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_makeDiff_Params) RemoteOwner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_makeDiff_Params) LocalRev() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalRev() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalRev(v string) error {
	return s.Struct.SetText(2, v)
}

func (s VCS_makeDiff_Params) RemoteRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteRev(v string) error {
	return s.Struct.SetText(3, v)
}

func (s VCS_makeDiff_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_makeDiff_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_makeDiff_Params_List is a list of VCS_makeDiff_Params.
type VCS_makeDiff_Params_List struct{ capnp.List }

// NewVCS_makeDiff_Params creates a new list of VCS_makeDiff_Params.
func NewVCS_makeDiff_Params_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return VCS_makeDiff_Params_List{l}, err
}

func (s VCS_makeDiff_Params_List) At(i int) VCS_makeDiff_Params {
	return VCS_makeDiff_Params{s.List.Struct(i)}
}

func (s VCS_makeDiff_Params_List) Set(i int, v VCS_makeDiff_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Params_List) String() string {
	str, _ := text.MarshalList(0xe2f81b4403ef433b, s.List)
	return str
}

// VCS_makeDiff_Params_Promise is a wrapper for a VCS_makeDiff_Params promised by a client call.
type VCS_makeDiff_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Params_Promise) Struct() (VCS_makeDiff_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Params{s}, err
}

type VCS_makeDiff_Results struct{ capnp.Struct }

// VCS_makeDiff_Results_TypeID is the unique identifier for the type VCS_makeDiff_Results.
const VCS_makeDiff_Results_TypeID = 0xd7ef486de484610d

func NewVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func NewRootVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func ReadRootVCS_makeDiff_Results(msg *capnp.Message) (VCS_makeDiff_Results, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Results{root.Struct()}, err
}

func (s VCS_makeDiff_Results) String() string {
	str, _ := text.Marshal(0xd7ef486de484610d, s.Struct)
	return str
}

func (s VCS_makeDiff_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_makeDiff_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_makeDiff_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_makeDiff_Results_List is a list of VCS_makeDiff_Results.
type VCS_makeDiff_Results_List struct{ capnp.List }

// NewVCS_makeDiff_Results creates a new list of VCS_makeDiff_Results.
func NewVCS_makeDiff_Results_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_makeDiff_Results_List{l}, err
}

func (s VCS_makeDiff_Results_List) At(i int) VCS_makeDiff_Results {
	return VCS_makeDiff_Results{s.List.Struct(i)}
}

func (s VCS_makeDiff_Results_List) Set(i int, v VCS_makeDiff_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Results_List) String() string {
	str, _ := text.MarshalList(0xd7ef486de484610d, s.List)
	return str
}

// VCS_makeDiff_Results_Promise is a wrapper for a VCS_makeDiff_Results promised by a client call.
type VCS_makeDiff_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Results_Promise) Struct() (VCS_makeDiff_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Results{s}, err
}

func (p VCS_makeDiff_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type VCS_sync_Params struct{ capnp.Struct }

// VCS_sync_Params_TypeID is the unique identifier for the type VCS_sync_Params.
const VCS_sync_Params_TypeID = 0xb05bd83a34de71b7

func NewVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func NewRootVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func ReadRootVCS_sync_Params(msg *capnp.Message) (VCS_sync_Params, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Params{root.Struct()}, err
}

func (s VCS_sync_Params) String() string {
	str, _ := text.Marshal(0xb05bd83a34de71b7, s.Struct)
	return str
}

func (s VCS_sync_Params) WithWhom() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_sync_Params) HasWithWhom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_sync_Params) WithWhomBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_sync_Params) SetWithWhom(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_sync_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_sync_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_sync_Params_List is a list of VCS_sync_Params.
type VCS_sync_Params_List struct{ capnp.List }

// NewVCS_sync_Params creates a new list of VCS_sync_Params.
func NewVCS_sync_Params_List(s *capnp.Segment, sz int32) (VCS_sync_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_sync_Params_List{l}, err
}

func (s VCS_sync_Params_List) At(i int) VCS_sync_Params { return VCS_sync_Params{s.List.Struct(i)} }

func (s VCS_sync_Params_List) Set(i int, v VCS_sync_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Params_List) String() string {
	str, _ := text.MarshalList(0xb05bd83a34de71b7, s.List)
	return str
}

// VCS_sync_Params_Promise is a wrapper for a VCS_sync_Params promised by a client call.
type VCS_sync_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Params_Promise) Struct() (VCS_sync_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Params{s}, err
}

type VCS_sync_Results struct{ capnp.Struct }

// VCS_sync_Results_TypeID is the unique identifier for the type VCS_sync_Results.
const VCS_sync_Results_TypeID = 0xfa04b4272d0ffcd9

func NewVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_sync_Results{st}, err
}

func NewRootVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_sync_Results{st}, err
}

func ReadRootVCS_sync_Results(msg *capnp.Message) (VCS_sync_Results, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Results{root.Struct()}, err
}

func (s VCS_sync_Results) String() string {
	str, _ := text.Marshal(0xfa04b4272d0ffcd9, s.Struct)
	return str
}

// VCS_sync_Results_List is a list of VCS_sync_Results.
type VCS_sync_Results_List struct{ capnp.List }

// NewVCS_sync_Results creates a new list of VCS_sync_Results.
func NewVCS_sync_Results_List(s *capnp.Segment, sz int32) (VCS_sync_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_sync_Results_List{l}, err
}

func (s VCS_sync_Results_List) At(i int) VCS_sync_Results { return VCS_sync_Results{s.List.Struct(i)} }

func (s VCS_sync_Results_List) Set(i int, v VCS_sync_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Results_List) String() string {
	str, _ := text.MarshalList(0xfa04b4272d0ffcd9, s.List)
	return str
}

// VCS_sync_Results_Promise is a wrapper for a VCS_sync_Results promised by a client call.
type VCS_sync_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Results_Promise) Struct() (VCS_sync_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Results{s}, err
}

type VCS_fetch_Params struct{ capnp.Struct }

// VCS_fetch_Params_TypeID is the unique identifier for the type VCS_fetch_Params.
const VCS_fetch_Params_TypeID = 0xaff62edfdbfe53d0

func NewVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func NewRootVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func ReadRootVCS_fetch_Params(msg *capnp.Message) (VCS_fetch_Params, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Params{root.Struct()}, err
}

func (s VCS_fetch_Params) String() string {
	str, _ := text.Marshal(0xaff62edfdbfe53d0, s.Struct)
	return str
}

func (s VCS_fetch_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_fetch_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_fetch_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_fetch_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_fetch_Params_List is a list of VCS_fetch_Params.
type VCS_fetch_Params_List struct{ capnp.List }

// NewVCS_fetch_Params creates a new list of VCS_fetch_Params.
func NewVCS_fetch_Params_List(s *capnp.Segment, sz int32) (VCS_fetch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_fetch_Params_List{l}, err
}

func (s VCS_fetch_Params_List) At(i int) VCS_fetch_Params { return VCS_fetch_Params{s.List.Struct(i)} }

func (s VCS_fetch_Params_List) Set(i int, v VCS_fetch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Params_List) String() string {
	str, _ := text.MarshalList(0xaff62edfdbfe53d0, s.List)
	return str
}

// VCS_fetch_Params_Promise is a wrapper for a VCS_fetch_Params promised by a client call.
type VCS_fetch_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Params_Promise) Struct() (VCS_fetch_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Params{s}, err
}

type VCS_fetch_Results struct{ capnp.Struct }

// VCS_fetch_Results_TypeID is the unique identifier for the type VCS_fetch_Results.
const VCS_fetch_Results_TypeID = 0xb262e0d6c2474d9c

func NewVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func NewRootVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func ReadRootVCS_fetch_Results(msg *capnp.Message) (VCS_fetch_Results, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Results{root.Struct()}, err
}

func (s VCS_fetch_Results) String() string {
	str, _ := text.Marshal(0xb262e0d6c2474d9c, s.Struct)
	return str
}

// VCS_fetch_Results_List is a list of VCS_fetch_Results.
type VCS_fetch_Results_List struct{ capnp.List }

// NewVCS_fetch_Results creates a new list of VCS_fetch_Results.
func NewVCS_fetch_Results_List(s *capnp.Segment, sz int32) (VCS_fetch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_fetch_Results_List{l}, err
}

func (s VCS_fetch_Results_List) At(i int) VCS_fetch_Results {
	return VCS_fetch_Results{s.List.Struct(i)}
}

func (s VCS_fetch_Results_List) Set(i int, v VCS_fetch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Results_List) String() string {
	str, _ := text.MarshalList(0xb262e0d6c2474d9c, s.List)
	return str
}

// VCS_fetch_Results_Promise is a wrapper for a VCS_fetch_Results promised by a client call.
type VCS_fetch_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Results_Promise) Struct() (VCS_fetch_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Results{s}, err
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0x83e6cb306e77e311

func (c Meta) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Mount(ctx context.Context, params func(Meta_mount_Params) error, opts ...capnp.CallOption) Meta_mount_Results_Promise {
	if c.Client == nil {
		return Meta_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_mount_Params{Struct: s}) }
	}
	return Meta_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Unmount(ctx context.Context, params func(Meta_unmount_Params) error, opts ...capnp.CallOption) Meta_unmount_Results_Promise {
	if c.Client == nil {
		return Meta_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_unmount_Params{Struct: s}) }
	}
	return Meta_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigGet(ctx context.Context, params func(Meta_configGet_Params) error, opts ...capnp.CallOption) Meta_configGet_Results_Promise {
	if c.Client == nil {
		return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configGet_Params{Struct: s}) }
	}
	return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigSet(ctx context.Context, params func(Meta_configSet_Params) error, opts ...capnp.CallOption) Meta_configSet_Results_Promise {
	if c.Client == nil {
		return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configSet_Params{Struct: s}) }
	}
	return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigAll(ctx context.Context, params func(Meta_configAll_Params) error, opts ...capnp.CallOption) Meta_configAll_Results_Promise {
	if c.Client == nil {
		return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configAll_Params{Struct: s}) }
	}
	return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemoteAdd(ctx context.Context, params func(Meta_remoteAdd_Params) error, opts ...capnp.CallOption) Meta_remoteAdd_Results_Promise {
	if c.Client == nil {
		return Meta_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteAdd_Params{Struct: s}) }
	}
	return Meta_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemoteRm(ctx context.Context, params func(Meta_remoteRm_Params) error, opts ...capnp.CallOption) Meta_remoteRm_Results_Promise {
	if c.Client == nil {
		return Meta_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteRm_Params{Struct: s}) }
	}
	return Meta_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemoteLs(ctx context.Context, params func(Meta_remoteLs_Params) error, opts ...capnp.CallOption) Meta_remoteLs_Results_Promise {
	if c.Client == nil {
		return Meta_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteLs_Params{Struct: s}) }
	}
	return Meta_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemoteSave(ctx context.Context, params func(Meta_remoteSave_Params) error, opts ...capnp.CallOption) Meta_remoteSave_Results_Promise {
	if c.Client == nil {
		return Meta_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteSave_Params{Struct: s}) }
	}
	return Meta_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemotePing(ctx context.Context, params func(Meta_remotePing_Params) error, opts ...capnp.CallOption) Meta_remotePing_Results_Promise {
	if c.Client == nil {
		return Meta_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remotePing_Params{Struct: s}) }
	}
	return Meta_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) RemoteClear(ctx context.Context, params func(Meta_remoteClear_Params) error, opts ...capnp.CallOption) Meta_remoteClear_Results_Promise {
	if c.Client == nil {
		return Meta_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteClear_Params{Struct: s}) }
	}
	return Meta_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) NetLocate(ctx context.Context, params func(Meta_netLocate_Params) error, opts ...capnp.CallOption) Meta_netLocate_Results_Promise {
	if c.Client == nil {
		return Meta_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      14,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_netLocate_Params{Struct: s}) }
	}
	return Meta_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) NetLocateNext(ctx context.Context, params func(Meta_netLocateNext_Params) error, opts ...capnp.CallOption) Meta_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Meta_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      15,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_netLocateNext_Params{Struct: s}) }
	}
	return Meta_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Whoami(ctx context.Context, params func(Meta_whoami_Params) error, opts ...capnp.CallOption) Meta_whoami_Results_Promise {
	if c.Client == nil {
		return Meta_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      16,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_whoami_Params{Struct: s}) }
	}
	return Meta_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Become(ctx context.Context, params func(Meta_become_Params) error, opts ...capnp.CallOption) Meta_become_Results_Promise {
	if c.Client == nil {
		return Meta_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      17,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_become_Params{Struct: s}) }
	}
	return Meta_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Connect(ctx context.Context, params func(Meta_connect_Params) error, opts ...capnp.CallOption) Meta_connect_Results_Promise {
	if c.Client == nil {
		return Meta_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      18,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_connect_Params{Struct: s}) }
	}
	return Meta_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Disconnect(ctx context.Context, params func(Meta_disconnect_Params) error, opts ...capnp.CallOption) Meta_disconnect_Results_Promise {
	if c.Client == nil {
		return Meta_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      19,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_disconnect_Params{Struct: s}) }
	}
	return Meta_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) OnlinePeers(ctx context.Context, params func(Meta_onlinePeers_Params) error, opts ...capnp.CallOption) Meta_onlinePeers_Results_Promise {
	if c.Client == nil {
		return Meta_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      20,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "onlinePeers",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_onlinePeers_Params{Struct: s}) }
	}
	return Meta_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Version(ctx context.Context, params func(Meta_version_Params) error, opts ...capnp.CallOption) Meta_version_Results_Promise {
	if c.Client == nil {
		return Meta_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      21,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_version_Params{Struct: s}) }
	}
	return Meta_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error

	Mount(Meta_mount) error

	Unmount(Meta_unmount) error

	ConfigGet(Meta_configGet) error

	ConfigSet(Meta_configSet) error

	ConfigAll(Meta_configAll) error

	RemoteAdd(Meta_remoteAdd) error

	RemoteRm(Meta_remoteRm) error

	RemoteLs(Meta_remoteLs) error

	RemoteSave(Meta_remoteSave) error

	RemotePing(Meta_remotePing) error

	RemoteClear(Meta_remoteClear) error

	NetLocate(Meta_netLocate) error

	NetLocateNext(Meta_netLocateNext) error

	Whoami(Meta_whoami) error

	Become(Meta_become) error

	Connect(Meta_connect) error

	Disconnect(Meta_disconnect) error

	OnlinePeers(Meta_onlinePeers) error

	Version(Meta_version) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 22)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_mount{c, opts, Meta_mount_Params{Struct: p}, Meta_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_unmount{c, opts, Meta_unmount_Params{Struct: p}, Meta_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configGet{c, opts, Meta_configGet_Params{Struct: p}, Meta_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configSet{c, opts, Meta_configSet_Params{Struct: p}, Meta_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configAll{c, opts, Meta_configAll_Params{Struct: p}, Meta_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteAdd{c, opts, Meta_remoteAdd_Params{Struct: p}, Meta_remoteAdd_Results{Struct: r}}
			return s.RemoteAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteRm{c, opts, Meta_remoteRm_Params{Struct: p}, Meta_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteLs{c, opts, Meta_remoteLs_Params{Struct: p}, Meta_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteSave{c, opts, Meta_remoteSave_Params{Struct: p}, Meta_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remotePing{c, opts, Meta_remotePing_Params{Struct: p}, Meta_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteClear{c, opts, Meta_remoteClear_Params{Struct: p}, Meta_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      14,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_netLocate{c, opts, Meta_netLocate_Params{Struct: p}, Meta_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      15,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_netLocateNext{c, opts, Meta_netLocateNext_Params{Struct: p}, Meta_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      16,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_whoami{c, opts, Meta_whoami_Params{Struct: p}, Meta_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      17,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_become{c, opts, Meta_become_Params{Struct: p}, Meta_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      18,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_connect{c, opts, Meta_connect_Params{Struct: p}, Meta_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      19,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_disconnect{c, opts, Meta_disconnect_Params{Struct: p}, Meta_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      20,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "onlinePeers",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_onlinePeers{c, opts, Meta_onlinePeers_Params{Struct: p}, Meta_onlinePeers_Results{Struct: r}}
			return s.OnlinePeers(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      21,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_version{c, opts, Meta_version_Params{Struct: p}, Meta_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Meta_quit holds the arguments for a server call to Meta.quit.
type Meta_quit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_quit_Params
	Results Meta_quit_Results
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

// Meta_init holds the arguments for a server call to Meta.init.
type Meta_init struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_init_Params
	Results Meta_init_Results
}

// Meta_mount holds the arguments for a server call to Meta.mount.
type Meta_mount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_mount_Params
	Results Meta_mount_Results
}

// Meta_unmount holds the arguments for a server call to Meta.unmount.
type Meta_unmount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_unmount_Params
	Results Meta_unmount_Results
}

// Meta_configGet holds the arguments for a server call to Meta.configGet.
type Meta_configGet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configGet_Params
	Results Meta_configGet_Results
}

// Meta_configSet holds the arguments for a server call to Meta.configSet.
type Meta_configSet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configSet_Params
	Results Meta_configSet_Results
}

// Meta_configAll holds the arguments for a server call to Meta.configAll.
type Meta_configAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configAll_Params
	Results Meta_configAll_Results
}

// Meta_remoteAdd holds the arguments for a server call to Meta.remoteAdd.
type Meta_remoteAdd struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remoteAdd_Params
	Results Meta_remoteAdd_Results
}

// Meta_remoteRm holds the arguments for a server call to Meta.remoteRm.
type Meta_remoteRm struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remoteRm_Params
	Results Meta_remoteRm_Results
}

// Meta_remoteLs holds the arguments for a server call to Meta.remoteLs.
type Meta_remoteLs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remoteLs_Params
	Results Meta_remoteLs_Results
}

// Meta_remoteSave holds the arguments for a server call to Meta.remoteSave.
type Meta_remoteSave struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remoteSave_Params
	Results Meta_remoteSave_Results
}

// Meta_remotePing holds the arguments for a server call to Meta.remotePing.
type Meta_remotePing struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remotePing_Params
	Results Meta_remotePing_Results
}

// Meta_remoteClear holds the arguments for a server call to Meta.remoteClear.
type Meta_remoteClear struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_remoteClear_Params
	Results Meta_remoteClear_Results
}

// Meta_netLocate holds the arguments for a server call to Meta.netLocate.
type Meta_netLocate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_netLocate_Params
	Results Meta_netLocate_Results
}

// Meta_netLocateNext holds the arguments for a server call to Meta.netLocateNext.
type Meta_netLocateNext struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_netLocateNext_Params
	Results Meta_netLocateNext_Results
}

// Meta_whoami holds the arguments for a server call to Meta.whoami.
type Meta_whoami struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_whoami_Params
	Results Meta_whoami_Results
}

// Meta_become holds the arguments for a server call to Meta.become.
type Meta_become struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_become_Params
	Results Meta_become_Results
}

// Meta_connect holds the arguments for a server call to Meta.connect.
type Meta_connect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_connect_Params
	Results Meta_connect_Results
}

// Meta_disconnect holds the arguments for a server call to Meta.disconnect.
type Meta_disconnect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_disconnect_Params
	Results Meta_disconnect_Results
}

// Meta_onlinePeers holds the arguments for a server call to Meta.onlinePeers.
type Meta_onlinePeers struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_onlinePeers_Params
	Results Meta_onlinePeers_Results
}

// Meta_version holds the arguments for a server call to Meta.version.
type Meta_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_version_Params
	Results Meta_version_Results
}

type Meta_quit_Params struct{ capnp.Struct }

// Meta_quit_Params_TypeID is the unique identifier for the type Meta_quit_Params.
const Meta_quit_Params_TypeID = 0xdf3a2e83d0d533b3

func NewMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func NewRootMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func ReadRootMeta_quit_Params(msg *capnp.Message) (Meta_quit_Params, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Params{root.Struct()}, err
}

func (s Meta_quit_Params) String() string {
	str, _ := text.Marshal(0xdf3a2e83d0d533b3, s.Struct)
	return str
}

// Meta_quit_Params_List is a list of Meta_quit_Params.
type Meta_quit_Params_List struct{ capnp.List }

// NewMeta_quit_Params creates a new list of Meta_quit_Params.
func NewMeta_quit_Params_List(s *capnp.Segment, sz int32) (Meta_quit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Params_List{l}, err
}

func (s Meta_quit_Params_List) At(i int) Meta_quit_Params { return Meta_quit_Params{s.List.Struct(i)} }

func (s Meta_quit_Params_List) Set(i int, v Meta_quit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Params_List) String() string {
	str, _ := text.MarshalList(0xdf3a2e83d0d533b3, s.List)
	return str
}

// Meta_quit_Params_Promise is a wrapper for a Meta_quit_Params promised by a client call.
type Meta_quit_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Params_Promise) Struct() (Meta_quit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Params{s}, err
}

type Meta_quit_Results struct{ capnp.Struct }

// Meta_quit_Results_TypeID is the unique identifier for the type Meta_quit_Results.
const Meta_quit_Results_TypeID = 0xe1dd2f0c85965fd6

func NewMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func NewRootMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func ReadRootMeta_quit_Results(msg *capnp.Message) (Meta_quit_Results, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Results{root.Struct()}, err
}

func (s Meta_quit_Results) String() string {
	str, _ := text.Marshal(0xe1dd2f0c85965fd6, s.Struct)
	return str
}

// Meta_quit_Results_List is a list of Meta_quit_Results.
type Meta_quit_Results_List struct{ capnp.List }

// NewMeta_quit_Results creates a new list of Meta_quit_Results.
func NewMeta_quit_Results_List(s *capnp.Segment, sz int32) (Meta_quit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Results_List{l}, err
}

func (s Meta_quit_Results_List) At(i int) Meta_quit_Results {
	return Meta_quit_Results{s.List.Struct(i)}
}

func (s Meta_quit_Results_List) Set(i int, v Meta_quit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Results_List) String() string {
	str, _ := text.MarshalList(0xe1dd2f0c85965fd6, s.List)
	return str
}

// Meta_quit_Results_Promise is a wrapper for a Meta_quit_Results promised by a client call.
type Meta_quit_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Results_Promise) Struct() (Meta_quit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Results{s}, err
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xc9ac448a01179aec

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xc9ac448a01179aec, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xc9ac448a01179aec, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0xffd34f15ec608676

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0xffd34f15ec608676, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xffd34f15ec608676, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type Meta_init_Params struct{ capnp.Struct }

// Meta_init_Params_TypeID is the unique identifier for the type Meta_init_Params.
const Meta_init_Params_TypeID = 0xed03ac5ef50453fb

func NewMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Meta_init_Params{st}, err
}

func NewRootMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Meta_init_Params{st}, err
}

func ReadRootMeta_init_Params(msg *capnp.Message) (Meta_init_Params, error) {
	root, err := msg.RootPtr()
	return Meta_init_Params{root.Struct()}, err
}

func (s Meta_init_Params) String() string {
	str, _ := text.Marshal(0xed03ac5ef50453fb, s.Struct)
	return str
}

func (s Meta_init_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_init_Params) HasBasePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_init_Params) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_init_Params) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Meta_init_Params) Backend() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Meta_init_Params) HasBackend() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BackendBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBackend(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Meta_init_Params) Password() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Meta_init_Params) HasPassword() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetPassword(v string) error {
	return s.Struct.SetText(3, v)
}

// Meta_init_Params_List is a list of Meta_init_Params.
type Meta_init_Params_List struct{ capnp.List }

// NewMeta_init_Params creates a new list of Meta_init_Params.
func NewMeta_init_Params_List(s *capnp.Segment, sz int32) (Meta_init_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Meta_init_Params_List{l}, err
}

func (s Meta_init_Params_List) At(i int) Meta_init_Params { return Meta_init_Params{s.List.Struct(i)} }

func (s Meta_init_Params_List) Set(i int, v Meta_init_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Params_List) String() string {
	str, _ := text.MarshalList(0xed03ac5ef50453fb, s.List)
	return str
}

// Meta_init_Params_Promise is a wrapper for a Meta_init_Params promised by a client call.
type Meta_init_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Params_Promise) Struct() (Meta_init_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Params{s}, err
}

type Meta_init_Results struct{ capnp.Struct }

// Meta_init_Results_TypeID is the unique identifier for the type Meta_init_Results.
const Meta_init_Results_TypeID = 0xe826e800c318a7c4

func NewMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func NewRootMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func ReadRootMeta_init_Results(msg *capnp.Message) (Meta_init_Results, error) {
	root, err := msg.RootPtr()
	return Meta_init_Results{root.Struct()}, err
}

func (s Meta_init_Results) String() string {
	str, _ := text.Marshal(0xe826e800c318a7c4, s.Struct)
	return str
}

// Meta_init_Results_List is a list of Meta_init_Results.
type Meta_init_Results_List struct{ capnp.List }

// NewMeta_init_Results creates a new list of Meta_init_Results.
func NewMeta_init_Results_List(s *capnp.Segment, sz int32) (Meta_init_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_init_Results_List{l}, err
}

func (s Meta_init_Results_List) At(i int) Meta_init_Results {
	return Meta_init_Results{s.List.Struct(i)}
}

func (s Meta_init_Results_List) Set(i int, v Meta_init_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Results_List) String() string {
	str, _ := text.MarshalList(0xe826e800c318a7c4, s.List)
	return str
}

// Meta_init_Results_Promise is a wrapper for a Meta_init_Results promised by a client call.
type Meta_init_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Results_Promise) Struct() (Meta_init_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Results{s}, err
}

type Meta_mount_Params struct{ capnp.Struct }

// Meta_mount_Params_TypeID is the unique identifier for the type Meta_mount_Params.
const Meta_mount_Params_TypeID = 0x9f647c7028225a97

func NewMeta_mount_Params(s *capnp.Segment) (Meta_mount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_mount_Params{st}, err
}

func NewRootMeta_mount_Params(s *capnp.Segment) (Meta_mount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_mount_Params{st}, err
}

func ReadRootMeta_mount_Params(msg *capnp.Message) (Meta_mount_Params, error) {
	root, err := msg.RootPtr()
	return Meta_mount_Params{root.Struct()}, err
}

func (s Meta_mount_Params) String() string {
	str, _ := text.Marshal(0x9f647c7028225a97, s.Struct)
	return str
}

func (s Meta_mount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_mount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_mount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_mount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_mount_Params) Options() (MountOptions, error) {
	p, err := s.Struct.Ptr(1)
	return MountOptions{Struct: p.Struct()}, err
}

func (s Meta_mount_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_mount_Params) SetOptions(v MountOptions) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated MountOptions struct, preferring placement in s's segment.
func (s Meta_mount_Params) NewOptions() (MountOptions, error) {
	ss, err := NewMountOptions(s.Struct.Segment())
	if err != nil {
		return MountOptions{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Meta_mount_Params_List is a list of Meta_mount_Params.
type Meta_mount_Params_List struct{ capnp.List }

// NewMeta_mount_Params creates a new list of Meta_mount_Params.
func NewMeta_mount_Params_List(s *capnp.Segment, sz int32) (Meta_mount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Meta_mount_Params_List{l}, err
}

func (s Meta_mount_Params_List) At(i int) Meta_mount_Params {
	return Meta_mount_Params{s.List.Struct(i)}
}

func (s Meta_mount_Params_List) Set(i int, v Meta_mount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_mount_Params_List) String() string {
	str, _ := text.MarshalList(0x9f647c7028225a97, s.List)
	return str
}

// Meta_mount_Params_Promise is a wrapper for a Meta_mount_Params promised by a client call.
type Meta_mount_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_mount_Params_Promise) Struct() (Meta_mount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_mount_Params{s}, err
}

func (p Meta_mount_Params_Promise) Options() MountOptions_Promise {
	return MountOptions_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Meta_mount_Results struct{ capnp.Struct }

// Meta_mount_Results_TypeID is the unique identifier for the type Meta_mount_Results.
const Meta_mount_Results_TypeID = 0x9ec3cfd8ff4bae06

func NewMeta_mount_Results(s *capnp.Segment) (Meta_mount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_mount_Results{st}, err
}

func NewRootMeta_mount_Results(s *capnp.Segment) (Meta_mount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_mount_Results{st}, err
}

func ReadRootMeta_mount_Results(msg *capnp.Message) (Meta_mount_Results, error) {
	root, err := msg.RootPtr()
	return Meta_mount_Results{root.Struct()}, err
}

func (s Meta_mount_Results) String() string {
	str, _ := text.Marshal(0x9ec3cfd8ff4bae06, s.Struct)
	return str
}

// Meta_mount_Results_List is a list of Meta_mount_Results.
type Meta_mount_Results_List struct{ capnp.List }

// NewMeta_mount_Results creates a new list of Meta_mount_Results.
func NewMeta_mount_Results_List(s *capnp.Segment, sz int32) (Meta_mount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_mount_Results_List{l}, err
}

func (s Meta_mount_Results_List) At(i int) Meta_mount_Results {
	return Meta_mount_Results{s.List.Struct(i)}
}

func (s Meta_mount_Results_List) Set(i int, v Meta_mount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_mount_Results_List) String() string {
	str, _ := text.MarshalList(0x9ec3cfd8ff4bae06, s.List)
	return str
}

// Meta_mount_Results_Promise is a wrapper for a Meta_mount_Results promised by a client call.
type Meta_mount_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_mount_Results_Promise) Struct() (Meta_mount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_mount_Results{s}, err
}

type Meta_unmount_Params struct{ capnp.Struct }

// Meta_unmount_Params_TypeID is the unique identifier for the type Meta_unmount_Params.
const Meta_unmount_Params_TypeID = 0xd0b0c690855bac45

func NewMeta_unmount_Params(s *capnp.Segment) (Meta_unmount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_unmount_Params{st}, err
}

func NewRootMeta_unmount_Params(s *capnp.Segment) (Meta_unmount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_unmount_Params{st}, err
}

func ReadRootMeta_unmount_Params(msg *capnp.Message) (Meta_unmount_Params, error) {
	root, err := msg.RootPtr()
	return Meta_unmount_Params{root.Struct()}, err
}

func (s Meta_unmount_Params) String() string {
	str, _ := text.Marshal(0xd0b0c690855bac45, s.Struct)
	return str
}

func (s Meta_unmount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_unmount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_unmount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_unmount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_unmount_Params_List is a list of Meta_unmount_Params.
type Meta_unmount_Params_List struct{ capnp.List }

// NewMeta_unmount_Params creates a new list of Meta_unmount_Params.
func NewMeta_unmount_Params_List(s *capnp.Segment, sz int32) (Meta_unmount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_unmount_Params_List{l}, err
}

func (s Meta_unmount_Params_List) At(i int) Meta_unmount_Params {
	return Meta_unmount_Params{s.List.Struct(i)}
}

func (s Meta_unmount_Params_List) Set(i int, v Meta_unmount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_unmount_Params_List) String() string {
	str, _ := text.MarshalList(0xd0b0c690855bac45, s.List)
	return str
}

// Meta_unmount_Params_Promise is a wrapper for a Meta_unmount_Params promised by a client call.
type Meta_unmount_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_unmount_Params_Promise) Struct() (Meta_unmount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_unmount_Params{s}, err
}

type Meta_unmount_Results struct{ capnp.Struct }

// Meta_unmount_Results_TypeID is the unique identifier for the type Meta_unmount_Results.
const Meta_unmount_Results_TypeID = 0xe275355b4989aaee

func NewMeta_unmount_Results(s *capnp.Segment) (Meta_unmount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_unmount_Results{st}, err
}

func NewRootMeta_unmount_Results(s *capnp.Segment) (Meta_unmount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_unmount_Results{st}, err
}

func ReadRootMeta_unmount_Results(msg *capnp.Message) (Meta_unmount_Results, error) {
	root, err := msg.RootPtr()
	return Meta_unmount_Results{root.Struct()}, err
}

func (s Meta_unmount_Results) String() string {
	str, _ := text.Marshal(0xe275355b4989aaee, s.Struct)
	return str
}

// Meta_unmount_Results_List is a list of Meta_unmount_Results.
type Meta_unmount_Results_List struct{ capnp.List }

// NewMeta_unmount_Results creates a new list of Meta_unmount_Results.
func NewMeta_unmount_Results_List(s *capnp.Segment, sz int32) (Meta_unmount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_unmount_Results_List{l}, err
}

func (s Meta_unmount_Results_List) At(i int) Meta_unmount_Results {
	return Meta_unmount_Results{s.List.Struct(i)}
}

func (s Meta_unmount_Results_List) Set(i int, v Meta_unmount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_unmount_Results_List) String() string {
	str, _ := text.MarshalList(0xe275355b4989aaee, s.List)
	return str
}

// Meta_unmount_Results_Promise is a wrapper for a Meta_unmount_Results promised by a client call.
type Meta_unmount_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_unmount_Results_Promise) Struct() (Meta_unmount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_unmount_Results{s}, err
}

type Meta_configGet_Params struct{ capnp.Struct }

// Meta_configGet_Params_TypeID is the unique identifier for the type Meta_configGet_Params.
const Meta_configGet_Params_TypeID = 0x8c8ac84e843e98c6

func NewMeta_configGet_Params(s *capnp.Segment) (Meta_configGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Params{st}, err
}

func NewRootMeta_configGet_Params(s *capnp.Segment) (Meta_configGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Params{st}, err
}

func ReadRootMeta_configGet_Params(msg *capnp.Message) (Meta_configGet_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configGet_Params{root.Struct()}, err
}

func (s Meta_configGet_Params) String() string {
	str, _ := text.Marshal(0x8c8ac84e843e98c6, s.Struct)
	return str
}

func (s Meta_configGet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configGet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configGet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configGet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_configGet_Params_List is a list of Meta_configGet_Params.
type Meta_configGet_Params_List struct{ capnp.List }

// NewMeta_configGet_Params creates a new list of Meta_configGet_Params.
func NewMeta_configGet_Params_List(s *capnp.Segment, sz int32) (Meta_configGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configGet_Params_List{l}, err
}

func (s Meta_configGet_Params_List) At(i int) Meta_configGet_Params {
	return Meta_configGet_Params{s.List.Struct(i)}
}

func (s Meta_configGet_Params_List) Set(i int, v Meta_configGet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configGet_Params_List) String() string {
	str, _ := text.MarshalList(0x8c8ac84e843e98c6, s.List)
	return str
}

// Meta_configGet_Params_Promise is a wrapper for a Meta_configGet_Params promised by a client call.
type Meta_configGet_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configGet_Params_Promise) Struct() (Meta_configGet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configGet_Params{s}, err
}

type Meta_configGet_Results struct{ capnp.Struct }

// Meta_configGet_Results_TypeID is the unique identifier for the type Meta_configGet_Results.
const Meta_configGet_Results_TypeID = 0xfd36e047f496768b

func NewMeta_configGet_Results(s *capnp.Segment) (Meta_configGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Results{st}, err
}

func NewRootMeta_configGet_Results(s *capnp.Segment) (Meta_configGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Results{st}, err
}

func ReadRootMeta_configGet_Results(msg *capnp.Message) (Meta_configGet_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configGet_Results{root.Struct()}, err
}

func (s Meta_configGet_Results) String() string {
	str, _ := text.Marshal(0xfd36e047f496768b, s.Struct)
	return str
}

func (s Meta_configGet_Results) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configGet_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configGet_Results) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configGet_Results) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_configGet_Results_List is a list of Meta_configGet_Results.
type Meta_configGet_Results_List struct{ capnp.List }

// NewMeta_configGet_Results creates a new list of Meta_configGet_Results.
func NewMeta_configGet_Results_List(s *capnp.Segment, sz int32) (Meta_configGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configGet_Results_List{l}, err
}

func (s Meta_configGet_Results_List) At(i int) Meta_configGet_Results {
	return Meta_configGet_Results{s.List.Struct(i)}
}

func (s Meta_configGet_Results_List) Set(i int, v Meta_configGet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configGet_Results_List) String() string {
	str, _ := text.MarshalList(0xfd36e047f496768b, s.List)
	return str
}

// Meta_configGet_Results_Promise is a wrapper for a Meta_configGet_Results promised by a client call.
type Meta_configGet_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configGet_Results_Promise) Struct() (Meta_configGet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configGet_Results{s}, err
}

type Meta_configSet_Params struct{ capnp.Struct }

// Meta_configSet_Params_TypeID is the unique identifier for the type Meta_configSet_Params.
const Meta_configSet_Params_TypeID = 0x97e9d1c7a00e713e

func NewMeta_configSet_Params(s *capnp.Segment) (Meta_configSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_configSet_Params{st}, err
}

func NewRootMeta_configSet_Params(s *capnp.Segment) (Meta_configSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_configSet_Params{st}, err
}

func ReadRootMeta_configSet_Params(msg *capnp.Message) (Meta_configSet_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configSet_Params{root.Struct()}, err
}

func (s Meta_configSet_Params) String() string {
	str, _ := text.Marshal(0x97e9d1c7a00e713e, s.Struct)
	return str
}

func (s Meta_configSet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configSet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configSet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configSet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_configSet_Params) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_configSet_Params) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_configSet_Params) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_configSet_Params) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Meta_configSet_Params_List is a list of Meta_configSet_Params.
type Meta_configSet_Params_List struct{ capnp.List }

// NewMeta_configSet_Params creates a new list of Meta_configSet_Params.
func NewMeta_configSet_Params_List(s *capnp.Segment, sz int32) (Meta_configSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Meta_configSet_Params_List{l}, err
}

func (s Meta_configSet_Params_List) At(i int) Meta_configSet_Params {
	return Meta_configSet_Params{s.List.Struct(i)}
}

func (s Meta_configSet_Params_List) Set(i int, v Meta_configSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configSet_Params_List) String() string {
	str, _ := text.MarshalList(0x97e9d1c7a00e713e, s.List)
	return str
}

// Meta_configSet_Params_Promise is a wrapper for a Meta_configSet_Params promised by a client call.
type Meta_configSet_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configSet_Params_Promise) Struct() (Meta_configSet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configSet_Params{s}, err
}

type Meta_configSet_Results struct{ capnp.Struct }

// Meta_configSet_Results_TypeID is the unique identifier for the type Meta_configSet_Results.
const Meta_configSet_Results_TypeID = 0xa3b41ad02b8645ed

func NewMeta_configSet_Results(s *capnp.Segment) (Meta_configSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configSet_Results{st}, err
}

func NewRootMeta_configSet_Results(s *capnp.Segment) (Meta_configSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configSet_Results{st}, err
}

func ReadRootMeta_configSet_Results(msg *capnp.Message) (Meta_configSet_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configSet_Results{root.Struct()}, err
}

func (s Meta_configSet_Results) String() string {
	str, _ := text.Marshal(0xa3b41ad02b8645ed, s.Struct)
	return str
}

// Meta_configSet_Results_List is a list of Meta_configSet_Results.
type Meta_configSet_Results_List struct{ capnp.List }

// NewMeta_configSet_Results creates a new list of Meta_configSet_Results.
func NewMeta_configSet_Results_List(s *capnp.Segment, sz int32) (Meta_configSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_configSet_Results_List{l}, err
}

func (s Meta_configSet_Results_List) At(i int) Meta_configSet_Results {
	return Meta_configSet_Results{s.List.Struct(i)}
}

func (s Meta_configSet_Results_List) Set(i int, v Meta_configSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configSet_Results_List) String() string {
	str, _ := text.MarshalList(0xa3b41ad02b8645ed, s.List)
	return str
}

// Meta_configSet_Results_Promise is a wrapper for a Meta_configSet_Results promised by a client call.
type Meta_configSet_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configSet_Results_Promise) Struct() (Meta_configSet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configSet_Results{s}, err
}

type Meta_configAll_Params struct{ capnp.Struct }

// Meta_configAll_Params_TypeID is the unique identifier for the type Meta_configAll_Params.
const Meta_configAll_Params_TypeID = 0xb4b684abc5f91831

func NewMeta_configAll_Params(s *capnp.Segment) (Meta_configAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configAll_Params{st}, err
}

func NewRootMeta_configAll_Params(s *capnp.Segment) (Meta_configAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configAll_Params{st}, err
}

func ReadRootMeta_configAll_Params(msg *capnp.Message) (Meta_configAll_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configAll_Params{root.Struct()}, err
}

func (s Meta_configAll_Params) String() string {
	str, _ := text.Marshal(0xb4b684abc5f91831, s.Struct)
	return str
}

// Meta_configAll_Params_List is a list of Meta_configAll_Params.
type Meta_configAll_Params_List struct{ capnp.List }

// NewMeta_configAll_Params creates a new list of Meta_configAll_Params.
func NewMeta_configAll_Params_List(s *capnp.Segment, sz int32) (Meta_configAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_configAll_Params_List{l}, err
}

func (s Meta_configAll_Params_List) At(i int) Meta_configAll_Params {
	return Meta_configAll_Params{s.List.Struct(i)}
}

func (s Meta_configAll_Params_List) Set(i int, v Meta_configAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configAll_Params_List) String() string {
	str, _ := text.MarshalList(0xb4b684abc5f91831, s.List)
	return str
}

// Meta_configAll_Params_Promise is a wrapper for a Meta_configAll_Params promised by a client call.
type Meta_configAll_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configAll_Params_Promise) Struct() (Meta_configAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configAll_Params{s}, err
}

type Meta_configAll_Results struct{ capnp.Struct }

// Meta_configAll_Results_TypeID is the unique identifier for the type Meta_configAll_Results.
const Meta_configAll_Results_TypeID = 0x8cdf119f2d20b743

func NewMeta_configAll_Results(s *capnp.Segment) (Meta_configAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configAll_Results{st}, err
}

func NewRootMeta_configAll_Results(s *capnp.Segment) (Meta_configAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configAll_Results{st}, err
}

func ReadRootMeta_configAll_Results(msg *capnp.Message) (Meta_configAll_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configAll_Results{root.Struct()}, err
}

func (s Meta_configAll_Results) String() string {
	str, _ := text.Marshal(0x8cdf119f2d20b743, s.Struct)
	return str
}

func (s Meta_configAll_Results) All() (ConfigPair_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigPair_List{List: p.List()}, err
}

func (s Meta_configAll_Results) HasAll() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configAll_Results) SetAll(v ConfigPair_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAll sets the all field to a newly
// allocated ConfigPair_List, preferring placement in s's segment.
func (s Meta_configAll_Results) NewAll(n int32) (ConfigPair_List, error) {
	l, err := NewConfigPair_List(s.Struct.Segment(), n)
	if err != nil {
		return ConfigPair_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Meta_configAll_Results_List is a list of Meta_configAll_Results.
type Meta_configAll_Results_List struct{ capnp.List }

// NewMeta_configAll_Results creates a new list of Meta_configAll_Results.
func NewMeta_configAll_Results_List(s *capnp.Segment, sz int32) (Meta_configAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configAll_Results_List{l}, err
}

func (s Meta_configAll_Results_List) At(i int) Meta_configAll_Results {
	return Meta_configAll_Results{s.List.Struct(i)}
}

func (s Meta_configAll_Results_List) Set(i int, v Meta_configAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configAll_Results_List) String() string {
	str, _ := text.MarshalList(0x8cdf119f2d20b743, s.List)
	return str
}

// Meta_configAll_Results_Promise is a wrapper for a Meta_configAll_Results promised by a client call.
type Meta_configAll_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configAll_Results_Promise) Struct() (Meta_configAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configAll_Results{s}, err
}

type Meta_remoteAdd_Params struct{ capnp.Struct }

// Meta_remoteAdd_Params_TypeID is the unique identifier for the type Meta_remoteAdd_Params.
const Meta_remoteAdd_Params_TypeID = 0xc3b93ffa6fc9f160

func NewMeta_remoteAdd_Params(s *capnp.Segment) (Meta_remoteAdd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteAdd_Params{st}, err
}

func NewRootMeta_remoteAdd_Params(s *capnp.Segment) (Meta_remoteAdd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteAdd_Params{st}, err
}

func ReadRootMeta_remoteAdd_Params(msg *capnp.Message) (Meta_remoteAdd_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remoteAdd_Params{root.Struct()}, err
}

func (s Meta_remoteAdd_Params) String() string {
	str, _ := text.Marshal(0xc3b93ffa6fc9f160, s.Struct)
	return str
}

func (s Meta_remoteAdd_Params) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s Meta_remoteAdd_Params) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_remoteAdd_Params) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s Meta_remoteAdd_Params) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Meta_remoteAdd_Params_List is a list of Meta_remoteAdd_Params.
type Meta_remoteAdd_Params_List struct{ capnp.List }

// NewMeta_remoteAdd_Params creates a new list of Meta_remoteAdd_Params.
func NewMeta_remoteAdd_Params_List(s *capnp.Segment, sz int32) (Meta_remoteAdd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_remoteAdd_Params_List{l}, err
}

func (s Meta_remoteAdd_Params_List) At(i int) Meta_remoteAdd_Params {
	return Meta_remoteAdd_Params{s.List.Struct(i)}
}

func (s Meta_remoteAdd_Params_List) Set(i int, v Meta_remoteAdd_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteAdd_Params_List) String() string {
	str, _ := text.MarshalList(0xc3b93ffa6fc9f160, s.List)
	return str
}

// Meta_remoteAdd_Params_Promise is a wrapper for a Meta_remoteAdd_Params promised by a client call.
type Meta_remoteAdd_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteAdd_Params_Promise) Struct() (Meta_remoteAdd_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteAdd_Params{s}, err
}

func (p Meta_remoteAdd_Params_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Meta_remoteAdd_Results struct{ capnp.Struct }

// Meta_remoteAdd_Results_TypeID is the unique identifier for the type Meta_remoteAdd_Results.
const Meta_remoteAdd_Results_TypeID = 0xc920e06b8110e91f

func NewMeta_remoteAdd_Results(s *capnp.Segment) (Meta_remoteAdd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteAdd_Results{st}, err
}

func NewRootMeta_remoteAdd_Results(s *capnp.Segment) (Meta_remoteAdd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteAdd_Results{st}, err
}

func ReadRootMeta_remoteAdd_Results(msg *capnp.Message) (Meta_remoteAdd_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remoteAdd_Results{root.Struct()}, err
}

func (s Meta_remoteAdd_Results) String() string {
	str, _ := text.Marshal(0xc920e06b8110e91f, s.Struct)
	return str
}

// Meta_remoteAdd_Results_List is a list of Meta_remoteAdd_Results.
type Meta_remoteAdd_Results_List struct{ capnp.List }

// NewMeta_remoteAdd_Results creates a new list of Meta_remoteAdd_Results.
func NewMeta_remoteAdd_Results_List(s *capnp.Segment, sz int32) (Meta_remoteAdd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteAdd_Results_List{l}, err
}

func (s Meta_remoteAdd_Results_List) At(i int) Meta_remoteAdd_Results {
	return Meta_remoteAdd_Results{s.List.Struct(i)}
}

func (s Meta_remoteAdd_Results_List) Set(i int, v Meta_remoteAdd_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteAdd_Results_List) String() string {
	str, _ := text.MarshalList(0xc920e06b8110e91f, s.List)
	return str
}

// Meta_remoteAdd_Results_Promise is a wrapper for a Meta_remoteAdd_Results promised by a client call.
type Meta_remoteAdd_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteAdd_Results_Promise) Struct() (Meta_remoteAdd_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteAdd_Results{s}, err
}

type Meta_remoteRm_Params struct{ capnp.Struct }

// Meta_remoteRm_Params_TypeID is the unique identifier for the type Meta_remoteRm_Params.
const Meta_remoteRm_Params_TypeID = 0xc53b6f91dec2daaa

func NewMeta_remoteRm_Params(s *capnp.Segment) (Meta_remoteRm_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteRm_Params{st}, err
}

func NewRootMeta_remoteRm_Params(s *capnp.Segment) (Meta_remoteRm_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteRm_Params{st}, err
}

func ReadRootMeta_remoteRm_Params(msg *capnp.Message) (Meta_remoteRm_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remoteRm_Params{root.Struct()}, err
}

func (s Meta_remoteRm_Params) String() string {
	str, _ := text.Marshal(0xc53b6f91dec2daaa, s.Struct)
	return str
}

func (s Meta_remoteRm_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_remoteRm_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_remoteRm_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_remoteRm_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_remoteRm_Params_List is a list of Meta_remoteRm_Params.
type Meta_remoteRm_Params_List struct{ capnp.List }

// NewMeta_remoteRm_Params creates a new list of Meta_remoteRm_Params.
func NewMeta_remoteRm_Params_List(s *capnp.Segment, sz int32) (Meta_remoteRm_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_remoteRm_Params_List{l}, err
}

func (s Meta_remoteRm_Params_List) At(i int) Meta_remoteRm_Params {
	return Meta_remoteRm_Params{s.List.Struct(i)}
}

func (s Meta_remoteRm_Params_List) Set(i int, v Meta_remoteRm_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteRm_Params_List) String() string {
	str, _ := text.MarshalList(0xc53b6f91dec2daaa, s.List)
	return str
}

// Meta_remoteRm_Params_Promise is a wrapper for a Meta_remoteRm_Params promised by a client call.
type Meta_remoteRm_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteRm_Params_Promise) Struct() (Meta_remoteRm_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteRm_Params{s}, err
}

type Meta_remoteRm_Results struct{ capnp.Struct }

// Meta_remoteRm_Results_TypeID is the unique identifier for the type Meta_remoteRm_Results.
const Meta_remoteRm_Results_TypeID = 0x956cdf6b89128744

func NewMeta_remoteRm_Results(s *capnp.Segment) (Meta_remoteRm_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteRm_Results{st}, err
}

func NewRootMeta_remoteRm_Results(s *capnp.Segment) (Meta_remoteRm_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteRm_Results{st}, err
}

func ReadRootMeta_remoteRm_Results(msg *capnp.Message) (Meta_remoteRm_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remoteRm_Results{root.Struct()}, err
}

func (s Meta_remoteRm_Results) String() string {
	str, _ := text.Marshal(0x956cdf6b89128744, s.Struct)
	return str
}

// Meta_remoteRm_Results_List is a list of Meta_remoteRm_Results.
type Meta_remoteRm_Results_List struct{ capnp.List }

// NewMeta_remoteRm_Results creates a new list of Meta_remoteRm_Results.
func NewMeta_remoteRm_Results_List(s *capnp.Segment, sz int32) (Meta_remoteRm_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteRm_Results_List{l}, err
}

func (s Meta_remoteRm_Results_List) At(i int) Meta_remoteRm_Results {
	return Meta_remoteRm_Results{s.List.Struct(i)}
}

func (s Meta_remoteRm_Results_List) Set(i int, v Meta_remoteRm_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteRm_Results_List) String() string {
	str, _ := text.MarshalList(0x956cdf6b89128744, s.List)
	return str
}

// Meta_remoteRm_Results_Promise is a wrapper for a Meta_remoteRm_Results promised by a client call.
type Meta_remoteRm_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteRm_Results_Promise) Struct() (Meta_remoteRm_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteRm_Results{s}, err
}

type Meta_remoteLs_Params struct{ capnp.Struct }

// Meta_remoteLs_Params_TypeID is the unique identifier for the type Meta_remoteLs_Params.
const Meta_remoteLs_Params_TypeID = 0xbb6cabb7ec800819

func NewMeta_remoteLs_Params(s *capnp.Segment) (Meta_remoteLs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteLs_Params{st}, err
}

func NewRootMeta_remoteLs_Params(s *capnp.Segment) (Meta_remoteLs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteLs_Params{st}, err
}

func ReadRootMeta_remoteLs_Params(msg *capnp.Message) (Meta_remoteLs_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remoteLs_Params{root.Struct()}, err
}

func (s Meta_remoteLs_Params) String() string {
	str, _ := text.Marshal(0xbb6cabb7ec800819, s.Struct)
	return str
}

// Meta_remoteLs_Params_List is a list of Meta_remoteLs_Params.
type Meta_remoteLs_Params_List struct{ capnp.List }

// NewMeta_remoteLs_Params creates a new list of Meta_remoteLs_Params.
func NewMeta_remoteLs_Params_List(s *capnp.Segment, sz int32) (Meta_remoteLs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteLs_Params_List{l}, err
}

func (s Meta_remoteLs_Params_List) At(i int) Meta_remoteLs_Params {
	return Meta_remoteLs_Params{s.List.Struct(i)}
}

func (s Meta_remoteLs_Params_List) Set(i int, v Meta_remoteLs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteLs_Params_List) String() string {
	str, _ := text.MarshalList(0xbb6cabb7ec800819, s.List)
	return str
}

// Meta_remoteLs_Params_Promise is a wrapper for a Meta_remoteLs_Params promised by a client call.
type Meta_remoteLs_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteLs_Params_Promise) Struct() (Meta_remoteLs_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteLs_Params{s}, err
}

type Meta_remoteLs_Results struct{ capnp.Struct }

// Meta_remoteLs_Results_TypeID is the unique identifier for the type Meta_remoteLs_Results.
const Meta_remoteLs_Results_TypeID = 0xe21b4052865cf7c4

func NewMeta_remoteLs_Results(s *capnp.Segment) (Meta_remoteLs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteLs_Results{st}, err
}

func NewRootMeta_remoteLs_Results(s *capnp.Segment) (Meta_remoteLs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteLs_Results{st}, err
}

func ReadRootMeta_remoteLs_Results(msg *capnp.Message) (Meta_remoteLs_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remoteLs_Results{root.Struct()}, err
}

func (s Meta_remoteLs_Results) String() string {
	str, _ := text.Marshal(0xe21b4052865cf7c4, s.Struct)
	return str
}

func (s Meta_remoteLs_Results) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Meta_remoteLs_Results) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_remoteLs_Results) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Meta_remoteLs_Results) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Meta_remoteLs_Results_List is a list of Meta_remoteLs_Results.
type Meta_remoteLs_Results_List struct{ capnp.List }

// NewMeta_remoteLs_Results creates a new list of Meta_remoteLs_Results.
func NewMeta_remoteLs_Results_List(s *capnp.Segment, sz int32) (Meta_remoteLs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_remoteLs_Results_List{l}, err
}

func (s Meta_remoteLs_Results_List) At(i int) Meta_remoteLs_Results {
	return Meta_remoteLs_Results{s.List.Struct(i)}
}

func (s Meta_remoteLs_Results_List) Set(i int, v Meta_remoteLs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteLs_Results_List) String() string {
	str, _ := text.MarshalList(0xe21b4052865cf7c4, s.List)
	return str
}

// Meta_remoteLs_Results_Promise is a wrapper for a Meta_remoteLs_Results promised by a client call.
type Meta_remoteLs_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteLs_Results_Promise) Struct() (Meta_remoteLs_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteLs_Results{s}, err
}

type Meta_remoteSave_Params struct{ capnp.Struct }

// Meta_remoteSave_Params_TypeID is the unique identifier for the type Meta_remoteSave_Params.
const Meta_remoteSave_Params_TypeID = 0x94ee8cc65b181abe

func NewMeta_remoteSave_Params(s *capnp.Segment) (Meta_remoteSave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteSave_Params{st}, err
}

func NewRootMeta_remoteSave_Params(s *capnp.Segment) (Meta_remoteSave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remoteSave_Params{st}, err
}

func ReadRootMeta_remoteSave_Params(msg *capnp.Message) (Meta_remoteSave_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remoteSave_Params{root.Struct()}, err
}

func (s Meta_remoteSave_Params) String() string {
	str, _ := text.Marshal(0x94ee8cc65b181abe, s.Struct)
	return str
}

func (s Meta_remoteSave_Params) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Meta_remoteSave_Params) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_remoteSave_Params) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Meta_remoteSave_Params) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Meta_remoteSave_Params_List is a list of Meta_remoteSave_Params.
type Meta_remoteSave_Params_List struct{ capnp.List }

// NewMeta_remoteSave_Params creates a new list of Meta_remoteSave_Params.
func NewMeta_remoteSave_Params_List(s *capnp.Segment, sz int32) (Meta_remoteSave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_remoteSave_Params_List{l}, err
}

func (s Meta_remoteSave_Params_List) At(i int) Meta_remoteSave_Params {
	return Meta_remoteSave_Params{s.List.Struct(i)}
}

func (s Meta_remoteSave_Params_List) Set(i int, v Meta_remoteSave_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteSave_Params_List) String() string {
	str, _ := text.MarshalList(0x94ee8cc65b181abe, s.List)
	return str
}

// Meta_remoteSave_Params_Promise is a wrapper for a Meta_remoteSave_Params promised by a client call.
type Meta_remoteSave_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteSave_Params_Promise) Struct() (Meta_remoteSave_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteSave_Params{s}, err
}

type Meta_remoteSave_Results struct{ capnp.Struct }

// Meta_remoteSave_Results_TypeID is the unique identifier for the type Meta_remoteSave_Results.
const Meta_remoteSave_Results_TypeID = 0xb05ff814dad43968

func NewMeta_remoteSave_Results(s *capnp.Segment) (Meta_remoteSave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteSave_Results{st}, err
}

func NewRootMeta_remoteSave_Results(s *capnp.Segment) (Meta_remoteSave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteSave_Results{st}, err
}

func ReadRootMeta_remoteSave_Results(msg *capnp.Message) (Meta_remoteSave_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remoteSave_Results{root.Struct()}, err
}

func (s Meta_remoteSave_Results) String() string {
	str, _ := text.Marshal(0xb05ff814dad43968, s.Struct)
	return str
}

// Meta_remoteSave_Results_List is a list of Meta_remoteSave_Results.
type Meta_remoteSave_Results_List struct{ capnp.List }

// NewMeta_remoteSave_Results creates a new list of Meta_remoteSave_Results.
func NewMeta_remoteSave_Results_List(s *capnp.Segment, sz int32) (Meta_remoteSave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteSave_Results_List{l}, err
}

func (s Meta_remoteSave_Results_List) At(i int) Meta_remoteSave_Results {
	return Meta_remoteSave_Results{s.List.Struct(i)}
}

func (s Meta_remoteSave_Results_List) Set(i int, v Meta_remoteSave_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteSave_Results_List) String() string {
	str, _ := text.MarshalList(0xb05ff814dad43968, s.List)
	return str
}

// Meta_remoteSave_Results_Promise is a wrapper for a Meta_remoteSave_Results promised by a client call.
type Meta_remoteSave_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteSave_Results_Promise) Struct() (Meta_remoteSave_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteSave_Results{s}, err
}

type Meta_remotePing_Params struct{ capnp.Struct }

// Meta_remotePing_Params_TypeID is the unique identifier for the type Meta_remotePing_Params.
const Meta_remotePing_Params_TypeID = 0x81b6b14efe0127c4

func NewMeta_remotePing_Params(s *capnp.Segment) (Meta_remotePing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remotePing_Params{st}, err
}

func NewRootMeta_remotePing_Params(s *capnp.Segment) (Meta_remotePing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_remotePing_Params{st}, err
}

func ReadRootMeta_remotePing_Params(msg *capnp.Message) (Meta_remotePing_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remotePing_Params{root.Struct()}, err
}

func (s Meta_remotePing_Params) String() string {
	str, _ := text.Marshal(0x81b6b14efe0127c4, s.Struct)
	return str
}

func (s Meta_remotePing_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_remotePing_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_remotePing_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_remotePing_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_remotePing_Params_List is a list of Meta_remotePing_Params.
type Meta_remotePing_Params_List struct{ capnp.List }

// NewMeta_remotePing_Params creates a new list of Meta_remotePing_Params.
func NewMeta_remotePing_Params_List(s *capnp.Segment, sz int32) (Meta_remotePing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_remotePing_Params_List{l}, err
}

func (s Meta_remotePing_Params_List) At(i int) Meta_remotePing_Params {
	return Meta_remotePing_Params{s.List.Struct(i)}
}

func (s Meta_remotePing_Params_List) Set(i int, v Meta_remotePing_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remotePing_Params_List) String() string {
	str, _ := text.MarshalList(0x81b6b14efe0127c4, s.List)
	return str
}

// Meta_remotePing_Params_Promise is a wrapper for a Meta_remotePing_Params promised by a client call.
type Meta_remotePing_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remotePing_Params_Promise) Struct() (Meta_remotePing_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remotePing_Params{s}, err
}

type Meta_remotePing_Results struct{ capnp.Struct }

// Meta_remotePing_Results_TypeID is the unique identifier for the type Meta_remotePing_Results.
const Meta_remotePing_Results_TypeID = 0xf9b3f22591273e08

func NewMeta_remotePing_Results(s *capnp.Segment) (Meta_remotePing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_remotePing_Results{st}, err
}

func NewRootMeta_remotePing_Results(s *capnp.Segment) (Meta_remotePing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_remotePing_Results{st}, err
}

func ReadRootMeta_remotePing_Results(msg *capnp.Message) (Meta_remotePing_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remotePing_Results{root.Struct()}, err
}

func (s Meta_remotePing_Results) String() string {
	str, _ := text.Marshal(0xf9b3f22591273e08, s.Struct)
	return str
}

func (s Meta_remotePing_Results) Roundtrip() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Meta_remotePing_Results) SetRoundtrip(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Meta_remotePing_Results_List is a list of Meta_remotePing_Results.
type Meta_remotePing_Results_List struct{ capnp.List }

// NewMeta_remotePing_Results creates a new list of Meta_remotePing_Results.
func NewMeta_remotePing_Results_List(s *capnp.Segment, sz int32) (Meta_remotePing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Meta_remotePing_Results_List{l}, err
}

func (s Meta_remotePing_Results_List) At(i int) Meta_remotePing_Results {
	return Meta_remotePing_Results{s.List.Struct(i)}
}

func (s Meta_remotePing_Results_List) Set(i int, v Meta_remotePing_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remotePing_Results_List) String() string {
	str, _ := text.MarshalList(0xf9b3f22591273e08, s.List)
	return str
}

// Meta_remotePing_Results_Promise is a wrapper for a Meta_remotePing_Results promised by a client call.
type Meta_remotePing_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remotePing_Results_Promise) Struct() (Meta_remotePing_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remotePing_Results{s}, err
}

type Meta_remoteClear_Params struct{ capnp.Struct }

// Meta_remoteClear_Params_TypeID is the unique identifier for the type Meta_remoteClear_Params.
const Meta_remoteClear_Params_TypeID = 0xbea1cb452f61974f

func NewMeta_remoteClear_Params(s *capnp.Segment) (Meta_remoteClear_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteClear_Params{st}, err
}

func NewRootMeta_remoteClear_Params(s *capnp.Segment) (Meta_remoteClear_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteClear_Params{st}, err
}

func ReadRootMeta_remoteClear_Params(msg *capnp.Message) (Meta_remoteClear_Params, error) {
	root, err := msg.RootPtr()
	return Meta_remoteClear_Params{root.Struct()}, err
}

func (s Meta_remoteClear_Params) String() string {
	str, _ := text.Marshal(0xbea1cb452f61974f, s.Struct)
	return str
}

// Meta_remoteClear_Params_List is a list of Meta_remoteClear_Params.
type Meta_remoteClear_Params_List struct{ capnp.List }

// NewMeta_remoteClear_Params creates a new list of Meta_remoteClear_Params.
func NewMeta_remoteClear_Params_List(s *capnp.Segment, sz int32) (Meta_remoteClear_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteClear_Params_List{l}, err
}

func (s Meta_remoteClear_Params_List) At(i int) Meta_remoteClear_Params {
	return Meta_remoteClear_Params{s.List.Struct(i)}
}

func (s Meta_remoteClear_Params_List) Set(i int, v Meta_remoteClear_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteClear_Params_List) String() string {
	str, _ := text.MarshalList(0xbea1cb452f61974f, s.List)
	return str
}

// Meta_remoteClear_Params_Promise is a wrapper for a Meta_remoteClear_Params promised by a client call.
type Meta_remoteClear_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteClear_Params_Promise) Struct() (Meta_remoteClear_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteClear_Params{s}, err
}

type Meta_remoteClear_Results struct{ capnp.Struct }

// Meta_remoteClear_Results_TypeID is the unique identifier for the type Meta_remoteClear_Results.
const Meta_remoteClear_Results_TypeID = 0xf0f86c25885c5fe0

func NewMeta_remoteClear_Results(s *capnp.Segment) (Meta_remoteClear_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteClear_Results{st}, err
}

func NewRootMeta_remoteClear_Results(s *capnp.Segment) (Meta_remoteClear_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_remoteClear_Results{st}, err
}

func ReadRootMeta_remoteClear_Results(msg *capnp.Message) (Meta_remoteClear_Results, error) {
	root, err := msg.RootPtr()
	return Meta_remoteClear_Results{root.Struct()}, err
}

func (s Meta_remoteClear_Results) String() string {
	str, _ := text.Marshal(0xf0f86c25885c5fe0, s.Struct)
	return str
}

// Meta_remoteClear_Results_List is a list of Meta_remoteClear_Results.
type Meta_remoteClear_Results_List struct{ capnp.List }

// NewMeta_remoteClear_Results creates a new list of Meta_remoteClear_Results.
func NewMeta_remoteClear_Results_List(s *capnp.Segment, sz int32) (Meta_remoteClear_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_remoteClear_Results_List{l}, err
}

func (s Meta_remoteClear_Results_List) At(i int) Meta_remoteClear_Results {
	return Meta_remoteClear_Results{s.List.Struct(i)}
}

func (s Meta_remoteClear_Results_List) Set(i int, v Meta_remoteClear_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_remoteClear_Results_List) String() string {
	str, _ := text.MarshalList(0xf0f86c25885c5fe0, s.List)
	return str
}

// Meta_remoteClear_Results_Promise is a wrapper for a Meta_remoteClear_Results promised by a client call.
type Meta_remoteClear_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_remoteClear_Results_Promise) Struct() (Meta_remoteClear_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_remoteClear_Results{s}, err
}

type Meta_netLocate_Params struct{ capnp.Struct }

// Meta_netLocate_Params_TypeID is the unique identifier for the type Meta_netLocate_Params.
const Meta_netLocate_Params_TypeID = 0xd4353ecb879426a0

func NewMeta_netLocate_Params(s *capnp.Segment) (Meta_netLocate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Meta_netLocate_Params{st}, err
}

func NewRootMeta_netLocate_Params(s *capnp.Segment) (Meta_netLocate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Meta_netLocate_Params{st}, err
}

func ReadRootMeta_netLocate_Params(msg *capnp.Message) (Meta_netLocate_Params, error) {
	root, err := msg.RootPtr()
	return Meta_netLocate_Params{root.Struct()}, err
}

func (s Meta_netLocate_Params) String() string {
	str, _ := text.Marshal(0xd4353ecb879426a0, s.Struct)
	return str
}

func (s Meta_netLocate_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_netLocate_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_netLocate_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_netLocate_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_netLocate_Params) TimeoutSec() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Meta_netLocate_Params) SetTimeoutSec(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Meta_netLocate_Params) LocateMask() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_netLocate_Params) HasLocateMask() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_netLocate_Params) LocateMaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_netLocate_Params) SetLocateMask(v string) error {
	return s.Struct.SetText(1, v)
}

// Meta_netLocate_Params_List is a list of Meta_netLocate_Params.
type Meta_netLocate_Params_List struct{ capnp.List }

// NewMeta_netLocate_Params creates a new list of Meta_netLocate_Params.
func NewMeta_netLocate_Params_List(s *capnp.Segment, sz int32) (Meta_netLocate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Meta_netLocate_Params_List{l}, err
}

func (s Meta_netLocate_Params_List) At(i int) Meta_netLocate_Params {
	return Meta_netLocate_Params{s.List.Struct(i)}
}

func (s Meta_netLocate_Params_List) Set(i int, v Meta_netLocate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_netLocate_Params_List) String() string {
	str, _ := text.MarshalList(0xd4353ecb879426a0, s.List)
	return str
}

// Meta_netLocate_Params_Promise is a wrapper for a Meta_netLocate_Params promised by a client call.
type Meta_netLocate_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_netLocate_Params_Promise) Struct() (Meta_netLocate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_netLocate_Params{s}, err
}

type Meta_netLocate_Results struct{ capnp.Struct }

// Meta_netLocate_Results_TypeID is the unique identifier for the type Meta_netLocate_Results.
const Meta_netLocate_Results_TypeID = 0xc538e655744911c7

func NewMeta_netLocate_Results(s *capnp.Segment) (Meta_netLocate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_netLocate_Results{st}, err
}

func NewRootMeta_netLocate_Results(s *capnp.Segment) (Meta_netLocate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_netLocate_Results{st}, err
}

func ReadRootMeta_netLocate_Results(msg *capnp.Message) (Meta_netLocate_Results, error) {
	root, err := msg.RootPtr()
	return Meta_netLocate_Results{root.Struct()}, err
}

func (s Meta_netLocate_Results) String() string {
	str, _ := text.Marshal(0xc538e655744911c7, s.Struct)
	return str
}

func (s Meta_netLocate_Results) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Meta_netLocate_Results) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Meta_netLocate_Results_List is a list of Meta_netLocate_Results.
type Meta_netLocate_Results_List struct{ capnp.List }

// NewMeta_netLocate_Results creates a new list of Meta_netLocate_Results.
func NewMeta_netLocate_Results_List(s *capnp.Segment, sz int32) (Meta_netLocate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Meta_netLocate_Results_List{l}, err
}

func (s Meta_netLocate_Results_List) At(i int) Meta_netLocate_Results {
	return Meta_netLocate_Results{s.List.Struct(i)}
}

func (s Meta_netLocate_Results_List) Set(i int, v Meta_netLocate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_netLocate_Results_List) String() string {
	str, _ := text.MarshalList(0xc538e655744911c7, s.List)
	return str
}

// Meta_netLocate_Results_Promise is a wrapper for a Meta_netLocate_Results promised by a client call.
type Meta_netLocate_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_netLocate_Results_Promise) Struct() (Meta_netLocate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_netLocate_Results{s}, err
}

type Meta_netLocateNext_Params struct{ capnp.Struct }

// Meta_netLocateNext_Params_TypeID is the unique identifier for the type Meta_netLocateNext_Params.
const Meta_netLocateNext_Params_TypeID = 0x943e5e6dc1abe7b8

func NewMeta_netLocateNext_Params(s *capnp.Segment) (Meta_netLocateNext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_netLocateNext_Params{st}, err
}

func NewRootMeta_netLocateNext_Params(s *capnp.Segment) (Meta_netLocateNext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Meta_netLocateNext_Params{st}, err
}

func ReadRootMeta_netLocateNext_Params(msg *capnp.Message) (Meta_netLocateNext_Params, error) {
	root, err := msg.RootPtr()
	return Meta_netLocateNext_Params{root.Struct()}, err
}

func (s Meta_netLocateNext_Params) String() string {
	str, _ := text.Marshal(0x943e5e6dc1abe7b8, s.Struct)
	return str
}

func (s Meta_netLocateNext_Params) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Meta_netLocateNext_Params) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Meta_netLocateNext_Params_List is a list of Meta_netLocateNext_Params.
type Meta_netLocateNext_Params_List struct{ capnp.List }

// NewMeta_netLocateNext_Params creates a new list of Meta_netLocateNext_Params.
func NewMeta_netLocateNext_Params_List(s *capnp.Segment, sz int32) (Meta_netLocateNext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Meta_netLocateNext_Params_List{l}, err
}

func (s Meta_netLocateNext_Params_List) At(i int) Meta_netLocateNext_Params {
	return Meta_netLocateNext_Params{s.List.Struct(i)}
}

func (s Meta_netLocateNext_Params_List) Set(i int, v Meta_netLocateNext_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_netLocateNext_Params_List) String() string {
	str, _ := text.MarshalList(0x943e5e6dc1abe7b8, s.List)
	return str
}

// Meta_netLocateNext_Params_Promise is a wrapper for a Meta_netLocateNext_Params promised by a client call.
type Meta_netLocateNext_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_netLocateNext_Params_Promise) Struct() (Meta_netLocateNext_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_netLocateNext_Params{s}, err
}

type Meta_netLocateNext_Results struct{ capnp.Struct }

// Meta_netLocateNext_Results_TypeID is the unique identifier for the type Meta_netLocateNext_Results.
const Meta_netLocateNext_Results_TypeID = 0xad2dd70d5d17decb

func NewMeta_netLocateNext_Results(s *capnp.Segment) (Meta_netLocateNext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_netLocateNext_Results{st}, err
}

func NewRootMeta_netLocateNext_Results(s *capnp.Segment) (Meta_netLocateNext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_netLocateNext_Results{st}, err
}

func ReadRootMeta_netLocateNext_Results(msg *capnp.Message) (Meta_netLocateNext_Results, error) {
	root, err := msg.RootPtr()
	return Meta_netLocateNext_Results{root.Struct()}, err
}

func (s Meta_netLocateNext_Results) String() string {
	str, _ := text.Marshal(0xad2dd70d5d17decb, s.Struct)
	return str
}

func (s Meta_netLocateNext_Results) Result() (LocateResult, error) {
	p, err := s.Struct.Ptr(0)
	return LocateResult{Struct: p.Struct()}, err
}

func (s Meta_netLocateNext_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_netLocateNext_Results) SetResult(v LocateResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated LocateResult struct, preferring placement in s's segment.
func (s Meta_netLocateNext_Results) NewResult() (LocateResult, error) {
	ss, err := NewLocateResult(s.Struct.Segment())
	if err != nil {
		return LocateResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Meta_netLocateNext_Results_List is a list of Meta_netLocateNext_Results.
type Meta_netLocateNext_Results_List struct{ capnp.List }

// NewMeta_netLocateNext_Results creates a new list of Meta_netLocateNext_Results.
func NewMeta_netLocateNext_Results_List(s *capnp.Segment, sz int32) (Meta_netLocateNext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_netLocateNext_Results_List{l}, err
}

func (s Meta_netLocateNext_Results_List) At(i int) Meta_netLocateNext_Results {
	return Meta_netLocateNext_Results{s.List.Struct(i)}
}

func (s Meta_netLocateNext_Results_List) Set(i int, v Meta_netLocateNext_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_netLocateNext_Results_List) String() string {
	str, _ := text.MarshalList(0xad2dd70d5d17decb, s.List)
	return str
}

// Meta_netLocateNext_Results_Promise is a wrapper for a Meta_netLocateNext_Results promised by a client call.
type Meta_netLocateNext_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_netLocateNext_Results_Promise) Struct() (Meta_netLocateNext_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_netLocateNext_Results{s}, err
}

func (p Meta_netLocateNext_Results_Promise) Result() LocateResult_Promise {
	return LocateResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Meta_whoami_Params struct{ capnp.Struct }

// Meta_whoami_Params_TypeID is the unique identifier for the type Meta_whoami_Params.
const Meta_whoami_Params_TypeID = 0xd289114a83107db7

func NewMeta_whoami_Params(s *capnp.Segment) (Meta_whoami_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_whoami_Params{st}, err
}

func NewRootMeta_whoami_Params(s *capnp.Segment) (Meta_whoami_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_whoami_Params{st}, err
}

func ReadRootMeta_whoami_Params(msg *capnp.Message) (Meta_whoami_Params, error) {
	root, err := msg.RootPtr()
	return Meta_whoami_Params{root.Struct()}, err
}

func (s Meta_whoami_Params) String() string {
	str, _ := text.Marshal(0xd289114a83107db7, s.Struct)
	return str
}

// Meta_whoami_Params_List is a list of Meta_whoami_Params.
type Meta_whoami_Params_List struct{ capnp.List }

// NewMeta_whoami_Params creates a new list of Meta_whoami_Params.
func NewMeta_whoami_Params_List(s *capnp.Segment, sz int32) (Meta_whoami_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_whoami_Params_List{l}, err
}

func (s Meta_whoami_Params_List) At(i int) Meta_whoami_Params {
	return Meta_whoami_Params{s.List.Struct(i)}
}

func (s Meta_whoami_Params_List) Set(i int, v Meta_whoami_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_whoami_Params_List) String() string {
	str, _ := text.MarshalList(0xd289114a83107db7, s.List)
	return str
}

// Meta_whoami_Params_Promise is a wrapper for a Meta_whoami_Params promised by a client call.
type Meta_whoami_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_whoami_Params_Promise) Struct() (Meta_whoami_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_whoami_Params{s}, err
}

type Meta_whoami_Results struct{ capnp.Struct }

// Meta_whoami_Results_TypeID is the unique identifier for the type Meta_whoami_Results.
const Meta_whoami_Results_TypeID = 0x9eadc3c7605bd657

func NewMeta_whoami_Results(s *capnp.Segment) (Meta_whoami_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_whoami_Results{st}, err
}

func NewRootMeta_whoami_Results(s *capnp.Segment) (Meta_whoami_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_whoami_Results{st}, err
}

func ReadRootMeta_whoami_Results(msg *capnp.Message) (Meta_whoami_Results, error) {
	root, err := msg.RootPtr()
	return Meta_whoami_Results{root.Struct()}, err
}

func (s Meta_whoami_Results) String() string {
	str, _ := text.Marshal(0x9eadc3c7605bd657, s.Struct)
	return str
}

func (s Meta_whoami_Results) Whoami() (Identity, error) {
	p, err := s.Struct.Ptr(0)
	return Identity{Struct: p.Struct()}, err
}

func (s Meta_whoami_Results) HasWhoami() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_whoami_Results) SetWhoami(v Identity) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhoami sets the whoami field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Meta_whoami_Results) NewWhoami() (Identity, error) {
	ss, err := NewIdentity(s.Struct.Segment())
	if err != nil {
		return Identity{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Meta_whoami_Results_List is a list of Meta_whoami_Results.
type Meta_whoami_Results_List struct{ capnp.List }

// NewMeta_whoami_Results creates a new list of Meta_whoami_Results.
func NewMeta_whoami_Results_List(s *capnp.Segment, sz int32) (Meta_whoami_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_whoami_Results_List{l}, err
}

func (s Meta_whoami_Results_List) At(i int) Meta_whoami_Results {
	return Meta_whoami_Results{s.List.Struct(i)}
}

func (s Meta_whoami_Results_List) Set(i int, v Meta_whoami_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_whoami_Results_List) String() string {
	str, _ := text.MarshalList(0x9eadc3c7605bd657, s.List)
	return str
}

// Meta_whoami_Results_Promise is a wrapper for a Meta_whoami_Results promised by a client call.
type Meta_whoami_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_whoami_Results_Promise) Struct() (Meta_whoami_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_whoami_Results{s}, err
}

func (p Meta_whoami_Results_Promise) Whoami() Identity_Promise {
	return Identity_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Meta_become_Params struct{ capnp.Struct }

// Meta_become_Params_TypeID is the unique identifier for the type Meta_become_Params.
const Meta_become_Params_TypeID = 0x90027b0333e503ee

func NewMeta_become_Params(s *capnp.Segment) (Meta_become_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_become_Params{st}, err
}

func NewRootMeta_become_Params(s *capnp.Segment) (Meta_become_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_become_Params{st}, err
}

func ReadRootMeta_become_Params(msg *capnp.Message) (Meta_become_Params, error) {
	root, err := msg.RootPtr()
	return Meta_become_Params{root.Struct()}, err
}

func (s Meta_become_Params) String() string {
	str, _ := text.Marshal(0x90027b0333e503ee, s.Struct)
	return str
}

func (s Meta_become_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_become_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_become_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_become_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_become_Params_List is a list of Meta_become_Params.
type Meta_become_Params_List struct{ capnp.List }

// NewMeta_become_Params creates a new list of Meta_become_Params.
func NewMeta_become_Params_List(s *capnp.Segment, sz int32) (Meta_become_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_become_Params_List{l}, err
}

func (s Meta_become_Params_List) At(i int) Meta_become_Params {
	return Meta_become_Params{s.List.Struct(i)}
}

func (s Meta_become_Params_List) Set(i int, v Meta_become_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_become_Params_List) String() string {
	str, _ := text.MarshalList(0x90027b0333e503ee, s.List)
	return str
}

// Meta_become_Params_Promise is a wrapper for a Meta_become_Params promised by a client call.
type Meta_become_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_become_Params_Promise) Struct() (Meta_become_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_become_Params{s}, err
}

type Meta_become_Results struct{ capnp.Struct }

// Meta_become_Results_TypeID is the unique identifier for the type Meta_become_Results.
const Meta_become_Results_TypeID = 0xf135f1bd71a1071f

func NewMeta_become_Results(s *capnp.Segment) (Meta_become_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_become_Results{st}, err
}

func NewRootMeta_become_Results(s *capnp.Segment) (Meta_become_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_become_Results{st}, err
}

func ReadRootMeta_become_Results(msg *capnp.Message) (Meta_become_Results, error) {
	root, err := msg.RootPtr()
	return Meta_become_Results{root.Struct()}, err
}

func (s Meta_become_Results) String() string {
	str, _ := text.Marshal(0xf135f1bd71a1071f, s.Struct)
	return str
}

// Meta_become_Results_List is a list of Meta_become_Results.
type Meta_become_Results_List struct{ capnp.List }

// NewMeta_become_Results creates a new list of Meta_become_Results.
func NewMeta_become_Results_List(s *capnp.Segment, sz int32) (Meta_become_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_become_Results_List{l}, err
}

func (s Meta_become_Results_List) At(i int) Meta_become_Results {
	return Meta_become_Results{s.List.Struct(i)}
}

func (s Meta_become_Results_List) Set(i int, v Meta_become_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_become_Results_List) String() string {
	str, _ := text.MarshalList(0xf135f1bd71a1071f, s.List)
	return str
}

// Meta_become_Results_Promise is a wrapper for a Meta_become_Results promised by a client call.
type Meta_become_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_become_Results_Promise) Struct() (Meta_become_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_become_Results{s}, err
}

type Meta_connect_Params struct{ capnp.Struct }

// Meta_connect_Params_TypeID is the unique identifier for the type Meta_connect_Params.
const Meta_connect_Params_TypeID = 0xe478c8af63857432

func NewMeta_connect_Params(s *capnp.Segment) (Meta_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_connect_Params{st}, err
}

func NewRootMeta_connect_Params(s *capnp.Segment) (Meta_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_connect_Params{st}, err
}

func ReadRootMeta_connect_Params(msg *capnp.Message) (Meta_connect_Params, error) {
	root, err := msg.RootPtr()
	return Meta_connect_Params{root.Struct()}, err
}

func (s Meta_connect_Params) String() string {
	str, _ := text.Marshal(0xe478c8af63857432, s.Struct)
	return str
}

// Meta_connect_Params_List is a list of Meta_connect_Params.
type Meta_connect_Params_List struct{ capnp.List }

// NewMeta_connect_Params creates a new list of Meta_connect_Params.
func NewMeta_connect_Params_List(s *capnp.Segment, sz int32) (Meta_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_connect_Params_List{l}, err
}

func (s Meta_connect_Params_List) At(i int) Meta_connect_Params {
	return Meta_connect_Params{s.List.Struct(i)}
}

func (s Meta_connect_Params_List) Set(i int, v Meta_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_connect_Params_List) String() string {
	str, _ := text.MarshalList(0xe478c8af63857432, s.List)
	return str
}

// Meta_connect_Params_Promise is a wrapper for a Meta_connect_Params promised by a client call.
type Meta_connect_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_connect_Params_Promise) Struct() (Meta_connect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_connect_Params{s}, err
}

type Meta_connect_Results struct{ capnp.Struct }

// Meta_connect_Results_TypeID is the unique identifier for the type Meta_connect_Results.
const Meta_connect_Results_TypeID = 0xf580568dec00ba9f

func NewMeta_connect_Results(s *capnp.Segment) (Meta_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_connect_Results{st}, err
}

func NewRootMeta_connect_Results(s *capnp.Segment) (Meta_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_connect_Results{st}, err
}

func ReadRootMeta_connect_Results(msg *capnp.Message) (Meta_connect_Results, error) {
	root, err := msg.RootPtr()
	return Meta_connect_Results{root.Struct()}, err
}

func (s Meta_connect_Results) String() string {
	str, _ := text.Marshal(0xf580568dec00ba9f, s.Struct)
	return str
}

// Meta_connect_Results_List is a list of Meta_connect_Results.
type Meta_connect_Results_List struct{ capnp.List }

// NewMeta_connect_Results creates a new list of Meta_connect_Results.
func NewMeta_connect_Results_List(s *capnp.Segment, sz int32) (Meta_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_connect_Results_List{l}, err
}

func (s Meta_connect_Results_List) At(i int) Meta_connect_Results {
	return Meta_connect_Results{s.List.Struct(i)}
}

func (s Meta_connect_Results_List) Set(i int, v Meta_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xf580568dec00ba9f, s.List)
	return str
}

// Meta_connect_Results_Promise is a wrapper for a Meta_connect_Results promised by a client call.
type Meta_connect_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_connect_Results_Promise) Struct() (Meta_connect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_connect_Results{s}, err
}

type Meta_disconnect_Params struct{ capnp.Struct }

// Meta_disconnect_Params_TypeID is the unique identifier for the type Meta_disconnect_Params.
const Meta_disconnect_Params_TypeID = 0xb81842457ebf1a07

func NewMeta_disconnect_Params(s *capnp.Segment) (Meta_disconnect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_disconnect_Params{st}, err
}

func NewRootMeta_disconnect_Params(s *capnp.Segment) (Meta_disconnect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_disconnect_Params{st}, err
}

func ReadRootMeta_disconnect_Params(msg *capnp.Message) (Meta_disconnect_Params, error) {
	root, err := msg.RootPtr()
	return Meta_disconnect_Params{root.Struct()}, err
}

func (s Meta_disconnect_Params) String() string {
	str, _ := text.Marshal(0xb81842457ebf1a07, s.Struct)
	return str
}

// Meta_disconnect_Params_List is a list of Meta_disconnect_Params.
type Meta_disconnect_Params_List struct{ capnp.List }

// NewMeta_disconnect_Params creates a new list of Meta_disconnect_Params.
func NewMeta_disconnect_Params_List(s *capnp.Segment, sz int32) (Meta_disconnect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_disconnect_Params_List{l}, err
}

func (s Meta_disconnect_Params_List) At(i int) Meta_disconnect_Params {
	return Meta_disconnect_Params{s.List.Struct(i)}
}

func (s Meta_disconnect_Params_List) Set(i int, v Meta_disconnect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_disconnect_Params_List) String() string {
	str, _ := text.MarshalList(0xb81842457ebf1a07, s.List)
	return str
}

// Meta_disconnect_Params_Promise is a wrapper for a Meta_disconnect_Params promised by a client call.
type Meta_disconnect_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_disconnect_Params_Promise) Struct() (Meta_disconnect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_disconnect_Params{s}, err
}

type Meta_disconnect_Results struct{ capnp.Struct }

// Meta_disconnect_Results_TypeID is the unique identifier for the type Meta_disconnect_Results.
const Meta_disconnect_Results_TypeID = 0xd5616267acef42a7

func NewMeta_disconnect_Results(s *capnp.Segment) (Meta_disconnect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_disconnect_Results{st}, err
}

func NewRootMeta_disconnect_Results(s *capnp.Segment) (Meta_disconnect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_disconnect_Results{st}, err
}

func ReadRootMeta_disconnect_Results(msg *capnp.Message) (Meta_disconnect_Results, error) {
	root, err := msg.RootPtr()
	return Meta_disconnect_Results{root.Struct()}, err
}

func (s Meta_disconnect_Results) String() string {
	str, _ := text.Marshal(0xd5616267acef42a7, s.Struct)
	return str
}

// Meta_disconnect_Results_List is a list of Meta_disconnect_Results.
type Meta_disconnect_Results_List struct{ capnp.List }

// NewMeta_disconnect_Results creates a new list of Meta_disconnect_Results.
func NewMeta_disconnect_Results_List(s *capnp.Segment, sz int32) (Meta_disconnect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_disconnect_Results_List{l}, err
}

func (s Meta_disconnect_Results_List) At(i int) Meta_disconnect_Results {
	return Meta_disconnect_Results{s.List.Struct(i)}
}

func (s Meta_disconnect_Results_List) Set(i int, v Meta_disconnect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_disconnect_Results_List) String() string {
	str, _ := text.MarshalList(0xd5616267acef42a7, s.List)
	return str
}

// Meta_disconnect_Results_Promise is a wrapper for a Meta_disconnect_Results promised by a client call.
type Meta_disconnect_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_disconnect_Results_Promise) Struct() (Meta_disconnect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_disconnect_Results{s}, err
}

type Meta_onlinePeers_Params struct{ capnp.Struct }

// Meta_onlinePeers_Params_TypeID is the unique identifier for the type Meta_onlinePeers_Params.
const Meta_onlinePeers_Params_TypeID = 0xa596c7cd35022b4b

func NewMeta_onlinePeers_Params(s *capnp.Segment) (Meta_onlinePeers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_onlinePeers_Params{st}, err
}

func NewRootMeta_onlinePeers_Params(s *capnp.Segment) (Meta_onlinePeers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_onlinePeers_Params{st}, err
}

func ReadRootMeta_onlinePeers_Params(msg *capnp.Message) (Meta_onlinePeers_Params, error) {
	root, err := msg.RootPtr()
	return Meta_onlinePeers_Params{root.Struct()}, err
}

func (s Meta_onlinePeers_Params) String() string {
	str, _ := text.Marshal(0xa596c7cd35022b4b, s.Struct)
	return str
}

// Meta_onlinePeers_Params_List is a list of Meta_onlinePeers_Params.
type Meta_onlinePeers_Params_List struct{ capnp.List }

// NewMeta_onlinePeers_Params creates a new list of Meta_onlinePeers_Params.
func NewMeta_onlinePeers_Params_List(s *capnp.Segment, sz int32) (Meta_onlinePeers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_onlinePeers_Params_List{l}, err
}

func (s Meta_onlinePeers_Params_List) At(i int) Meta_onlinePeers_Params {
	return Meta_onlinePeers_Params{s.List.Struct(i)}
}

func (s Meta_onlinePeers_Params_List) Set(i int, v Meta_onlinePeers_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_onlinePeers_Params_List) String() string {
	str, _ := text.MarshalList(0xa596c7cd35022b4b, s.List)
	return str
}

// Meta_onlinePeers_Params_Promise is a wrapper for a Meta_onlinePeers_Params promised by a client call.
type Meta_onlinePeers_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_onlinePeers_Params_Promise) Struct() (Meta_onlinePeers_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_onlinePeers_Params{s}, err
}

type Meta_onlinePeers_Results struct{ capnp.Struct }

// Meta_onlinePeers_Results_TypeID is the unique identifier for the type Meta_onlinePeers_Results.
const Meta_onlinePeers_Results_TypeID = 0xf9be86640a05f28e

func NewMeta_onlinePeers_Results(s *capnp.Segment) (Meta_onlinePeers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_onlinePeers_Results{st}, err
}

func NewRootMeta_onlinePeers_Results(s *capnp.Segment) (Meta_onlinePeers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_onlinePeers_Results{st}, err
}

func ReadRootMeta_onlinePeers_Results(msg *capnp.Message) (Meta_onlinePeers_Results, error) {
	root, err := msg.RootPtr()
	return Meta_onlinePeers_Results{root.Struct()}, err
}

func (s Meta_onlinePeers_Results) String() string {
	str, _ := text.Marshal(0xf9be86640a05f28e, s.Struct)
	return str
}

func (s Meta_onlinePeers_Results) Infos() (PeerStatus_List, error) {
	p, err := s.Struct.Ptr(0)
	return PeerStatus_List{List: p.List()}, err
}

func (s Meta_onlinePeers_Results) HasInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_onlinePeers_Results) SetInfos(v PeerStatus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated PeerStatus_List, preferring placement in s's segment.
func (s Meta_onlinePeers_Results) NewInfos(n int32) (PeerStatus_List, error) {
	l, err := NewPeerStatus_List(s.Struct.Segment(), n)
	if err != nil {
		return PeerStatus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Meta_onlinePeers_Results_List is a list of Meta_onlinePeers_Results.
type Meta_onlinePeers_Results_List struct{ capnp.List }

// NewMeta_onlinePeers_Results creates a new list of Meta_onlinePeers_Results.
func NewMeta_onlinePeers_Results_List(s *capnp.Segment, sz int32) (Meta_onlinePeers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_onlinePeers_Results_List{l}, err
}

func (s Meta_onlinePeers_Results_List) At(i int) Meta_onlinePeers_Results {
	return Meta_onlinePeers_Results{s.List.Struct(i)}
}

func (s Meta_onlinePeers_Results_List) Set(i int, v Meta_onlinePeers_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_onlinePeers_Results_List) String() string {
	str, _ := text.MarshalList(0xf9be86640a05f28e, s.List)
	return str
}

// Meta_onlinePeers_Results_Promise is a wrapper for a Meta_onlinePeers_Results promised by a client call.
type Meta_onlinePeers_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_onlinePeers_Results_Promise) Struct() (Meta_onlinePeers_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_onlinePeers_Results{s}, err
}

type Meta_version_Params struct{ capnp.Struct }

// Meta_version_Params_TypeID is the unique identifier for the type Meta_version_Params.
const Meta_version_Params_TypeID = 0xb6e947604cd03fdd

func NewMeta_version_Params(s *capnp.Segment) (Meta_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_version_Params{st}, err
}

func NewRootMeta_version_Params(s *capnp.Segment) (Meta_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_version_Params{st}, err
}

func ReadRootMeta_version_Params(msg *capnp.Message) (Meta_version_Params, error) {
	root, err := msg.RootPtr()
	return Meta_version_Params{root.Struct()}, err
}

func (s Meta_version_Params) String() string {
	str, _ := text.Marshal(0xb6e947604cd03fdd, s.Struct)
	return str
}

// Meta_version_Params_List is a list of Meta_version_Params.
type Meta_version_Params_List struct{ capnp.List }

// NewMeta_version_Params creates a new list of Meta_version_Params.
func NewMeta_version_Params_List(s *capnp.Segment, sz int32) (Meta_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_version_Params_List{l}, err
}

func (s Meta_version_Params_List) At(i int) Meta_version_Params {
	return Meta_version_Params{s.List.Struct(i)}
}

func (s Meta_version_Params_List) Set(i int, v Meta_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_version_Params_List) String() string {
	str, _ := text.MarshalList(0xb6e947604cd03fdd, s.List)
	return str
}

// Meta_version_Params_Promise is a wrapper for a Meta_version_Params promised by a client call.
type Meta_version_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_version_Params_Promise) Struct() (Meta_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_version_Params{s}, err
}

type Meta_version_Results struct{ capnp.Struct }

// Meta_version_Results_TypeID is the unique identifier for the type Meta_version_Results.
const Meta_version_Results_TypeID = 0xa40fb26fec6a8554

func NewMeta_version_Results(s *capnp.Segment) (Meta_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_version_Results{st}, err
}

func NewRootMeta_version_Results(s *capnp.Segment) (Meta_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_version_Results{st}, err
}

func ReadRootMeta_version_Results(msg *capnp.Message) (Meta_version_Results, error) {
	root, err := msg.RootPtr()
	return Meta_version_Results{root.Struct()}, err
}

func (s Meta_version_Results) String() string {
	str, _ := text.Marshal(0xa40fb26fec6a8554, s.Struct)
	return str
}

func (s Meta_version_Results) Version() (Version, error) {
	p, err := s.Struct.Ptr(0)
	return Version{Struct: p.Struct()}, err
}

func (s Meta_version_Results) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_version_Results) SetVersion(v Version) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVersion sets the version field to a newly
// allocated Version struct, preferring placement in s's segment.
func (s Meta_version_Results) NewVersion() (Version, error) {
	ss, err := NewVersion(s.Struct.Segment())
	if err != nil {
		return Version{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Meta_version_Results_List is a list of Meta_version_Results.
type Meta_version_Results_List struct{ capnp.List }

// NewMeta_version_Results creates a new list of Meta_version_Results.
func NewMeta_version_Results_List(s *capnp.Segment, sz int32) (Meta_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_version_Results_List{l}, err
}

func (s Meta_version_Results_List) At(i int) Meta_version_Results {
	return Meta_version_Results{s.List.Struct(i)}
}

func (s Meta_version_Results_List) Set(i int, v Meta_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_version_Results_List) String() string {
	str, _ := text.MarshalList(0xa40fb26fec6a8554, s.List)
	return str
}

// Meta_version_Results_Promise is a wrapper for a Meta_version_Results promised by a client call.
type Meta_version_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_version_Results_Promise) Struct() (Meta_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_version_Results{s}, err
}

func (p Meta_version_Results_Promise) Version() Version_Promise {
	return Version_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfc487818328b97ef

func (c API) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) StageFromData(ctx context.Context, params func(FS_stageFromData_Params) error, opts ...capnp.CallOption) FS_stageFromData_Results_Promise {
	if c.Client == nil {
		return FS_stageFromData_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stageFromData",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stageFromData_Params{Struct: s}) }
	}
	return FS_stageFromData_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mount(ctx context.Context, params func(Meta_mount_Params) error, opts ...capnp.CallOption) Meta_mount_Results_Promise {
	if c.Client == nil {
		return Meta_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_mount_Params{Struct: s}) }
	}
	return Meta_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unmount(ctx context.Context, params func(Meta_unmount_Params) error, opts ...capnp.CallOption) Meta_unmount_Results_Promise {
	if c.Client == nil {
		return Meta_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_unmount_Params{Struct: s}) }
	}
	return Meta_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigGet(ctx context.Context, params func(Meta_configGet_Params) error, opts ...capnp.CallOption) Meta_configGet_Results_Promise {
	if c.Client == nil {
		return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configGet_Params{Struct: s}) }
	}
	return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigSet(ctx context.Context, params func(Meta_configSet_Params) error, opts ...capnp.CallOption) Meta_configSet_Results_Promise {
	if c.Client == nil {
		return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configSet_Params{Struct: s}) }
	}
	return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigAll(ctx context.Context, params func(Meta_configAll_Params) error, opts ...capnp.CallOption) Meta_configAll_Results_Promise {
	if c.Client == nil {
		return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configAll_Params{Struct: s}) }
	}
	return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteAdd(ctx context.Context, params func(Meta_remoteAdd_Params) error, opts ...capnp.CallOption) Meta_remoteAdd_Results_Promise {
	if c.Client == nil {
		return Meta_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteAdd_Params{Struct: s}) }
	}
	return Meta_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteRm(ctx context.Context, params func(Meta_remoteRm_Params) error, opts ...capnp.CallOption) Meta_remoteRm_Results_Promise {
	if c.Client == nil {
		return Meta_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteRm_Params{Struct: s}) }
	}
	return Meta_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteLs(ctx context.Context, params func(Meta_remoteLs_Params) error, opts ...capnp.CallOption) Meta_remoteLs_Results_Promise {
	if c.Client == nil {
		return Meta_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteLs_Params{Struct: s}) }
	}
	return Meta_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteSave(ctx context.Context, params func(Meta_remoteSave_Params) error, opts ...capnp.CallOption) Meta_remoteSave_Results_Promise {
	if c.Client == nil {
		return Meta_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteSave_Params{Struct: s}) }
	}
	return Meta_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemotePing(ctx context.Context, params func(Meta_remotePing_Params) error, opts ...capnp.CallOption) Meta_remotePing_Results_Promise {
	if c.Client == nil {
		return Meta_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remotePing_Params{Struct: s}) }
	}
	return Meta_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteClear(ctx context.Context, params func(Meta_remoteClear_Params) error, opts ...capnp.CallOption) Meta_remoteClear_Results_Promise {
	if c.Client == nil {
		return Meta_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_remoteClear_Params{Struct: s}) }
	}
	return Meta_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocate(ctx context.Context, params func(Meta_netLocate_Params) error, opts ...capnp.CallOption) Meta_netLocate_Results_Promise {
	if c.Client == nil {
		return Meta_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      14,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_netLocate_Params{Struct: s}) }
	}
	return Meta_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocateNext(ctx context.Context, params func(Meta_netLocateNext_Params) error, opts ...capnp.CallOption) Meta_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Meta_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      15,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_netLocateNext_Params{Struct: s}) }
	}
	return Meta_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Whoami(ctx context.Context, params func(Meta_whoami_Params) error, opts ...capnp.CallOption) Meta_whoami_Results_Promise {
	if c.Client == nil {
		return Meta_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      16,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_whoami_Params{Struct: s}) }
	}
	return Meta_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Become(ctx context.Context, params func(Meta_become_Params) error, opts ...capnp.CallOption) Meta_become_Results_Promise {
	if c.Client == nil {
		return Meta_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      17,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_become_Params{Struct: s}) }
	}
	return Meta_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Connect(ctx context.Context, params func(Meta_connect_Params) error, opts ...capnp.CallOption) Meta_connect_Results_Promise {
	if c.Client == nil {
		return Meta_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      18,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_connect_Params{Struct: s}) }
	}
	return Meta_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Disconnect(ctx context.Context, params func(Meta_disconnect_Params) error, opts ...capnp.CallOption) Meta_disconnect_Results_Promise {
	if c.Client == nil {
		return Meta_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      19,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_disconnect_Params{Struct: s}) }
	}
	return Meta_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) OnlinePeers(ctx context.Context, params func(Meta_onlinePeers_Params) error, opts ...capnp.CallOption) Meta_onlinePeers_Results_Promise {
	if c.Client == nil {
		return Meta_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      20,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "onlinePeers",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_onlinePeers_Params{Struct: s}) }
	}
	return Meta_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Version(ctx context.Context, params func(Meta_version_Params) error, opts ...capnp.CallOption) Meta_version_Results_Promise {
	if c.Client == nil {
		return Meta_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      21,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_version_Params{Struct: s}) }
	}
	return Meta_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	StageFromData(FS_stageFromData) error

	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error

	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error

	Mount(Meta_mount) error

	Unmount(Meta_unmount) error

	ConfigGet(Meta_configGet) error

	ConfigSet(Meta_configSet) error

	ConfigAll(Meta_configAll) error

	RemoteAdd(Meta_remoteAdd) error

	RemoteRm(Meta_remoteRm) error

	RemoteLs(Meta_remoteLs) error

	RemoteSave(Meta_remoteSave) error

	RemotePing(Meta_remotePing) error

	RemoteClear(Meta_remoteClear) error

	NetLocate(Meta_netLocate) error

	NetLocateNext(Meta_netLocateNext) error

	Whoami(Meta_whoami) error

	Become(Meta_become) error

	Connect(Meta_connect) error

	Disconnect(Meta_disconnect) error

	OnlinePeers(Meta_onlinePeers) error

	Version(Meta_version) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 45)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:FS",
			MethodName:    "stageFromData",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stageFromData{c, opts, FS_stageFromData_Params{Struct: p}, FS_stageFromData_Results{Struct: r}}
			return s.StageFromData(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_mount{c, opts, Meta_mount_Params{Struct: p}, Meta_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_unmount{c, opts, Meta_unmount_Params{Struct: p}, Meta_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configGet{c, opts, Meta_configGet_Params{Struct: p}, Meta_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      6,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configSet{c, opts, Meta_configSet_Params{Struct: p}, Meta_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      7,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configAll{c, opts, Meta_configAll_Params{Struct: p}, Meta_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      8,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteAdd{c, opts, Meta_remoteAdd_Params{Struct: p}, Meta_remoteAdd_Results{Struct: r}}
			return s.RemoteAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      9,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteRm{c, opts, Meta_remoteRm_Params{Struct: p}, Meta_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      10,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteLs{c, opts, Meta_remoteLs_Params{Struct: p}, Meta_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      11,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteSave{c, opts, Meta_remoteSave_Params{Struct: p}, Meta_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      12,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remotePing{c, opts, Meta_remotePing_Params{Struct: p}, Meta_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      13,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_remoteClear{c, opts, Meta_remoteClear_Params{Struct: p}, Meta_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      14,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_netLocate{c, opts, Meta_netLocate_Params{Struct: p}, Meta_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      15,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_netLocateNext{c, opts, Meta_netLocateNext_Params{Struct: p}, Meta_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      16,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_whoami{c, opts, Meta_whoami_Params{Struct: p}, Meta_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      17,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_become{c, opts, Meta_become_Params{Struct: p}, Meta_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      18,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_connect{c, opts, Meta_connect_Params{Struct: p}, Meta_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      19,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_disconnect{c, opts, Meta_disconnect_Params{Struct: p}, Meta_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      20,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "onlinePeers",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_onlinePeers{c, opts, Meta_onlinePeers_Params{Struct: p}, Meta_onlinePeers_Results{Struct: r}}
			return s.OnlinePeers(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      21,
			InterfaceName: "server/capnp/api.capnp:Meta",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_version{c, opts, Meta_version_Params{Struct: p}, Meta_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

const schema_ea883e7d5248d81b = "x\xda\xbc{\x7fx\x14\xd5\xd5\xff=3\x09C\x14H" +
	"\x96\x095\x01d'!\x81\x10L \x89\xb4\x80_\xc8" +
	"\x12~#\x81L\x02T@\x94\xc9\xeeM2\xb2;\xb3" +
	"\xcc\xcc\x12b\xa5\x90*\"\xd6\xf8\x95\xbe\xa0\xc5\xaaH" +
	"\xdf\xd2\x8a\xca\x8b\x14\x95\xa2\xc5\xbe*\xa8\xbc\xea\xf3\xa2" +
	"\x05\x15[\x15\xa8V\xf1\x01)\x88\x16T\xba\xefs\xef" +
	"\xee\xcc\xdel&\xd9\xa5\xef\x8f\xbf\x92\xbds\xe6\xdes" +
	"\xcf9\xf7\x9c\xcf9\xf7\xcc\xe87<>\xae\"\xf3\xa3" +
	"a\x085\xec\x87\xcc^Q\xcf\x8f\xf2\xffl\xceyx" +
	"\x0d\x92\x07\x02 \x94! T5_\xfc\x09 \x10\x15" +
	"\xb1\x1aAt\xf0b\xf5\xb5\xef>onG\xf2U\x00" +
	"\xd1A\xef\xcd\xa8_5\xf1\xae\xcfQ&\xa5l\x17\xfb" +
	"\x83\xb8A\x14\xc4\x0d\xa2\xb7j\xaf\xe8\x05\x04\xd1\xfd\xc3" +
	"\xe1\x1fsv=\xdb\x8e<\x83\x01\xa1L to\xe5" +
	"\x1ad\xc6\x0fr\xc9\x8c\x9e\xbf\xb4j\xa3_\xff\xeb\xed" +
	"\xc8s\x15\x9f\x98\x10\x81x)\xf7\x84\x985\x80\xd0g" +
	"\x0eX\x97)n\xcf\x13\x10\x8a^\xf8\x1e\xbef\xf4#" +
	"\xfb\xd7!\xcf@\x9b\xbf\x0dy5\x802\xa2wu\xfc" +
	"t\x8e:\xb6\xe6.\xe6I[\xec\xc9+?\x9fx\xc7" +
	"\x9c\xd7\xee\xbe\x87eA\xc9\xbb\x85\xb0\x10\xca#,L" +
	"\xde#\x95m\xf1|\xd4\x89\xa0#\x8f\xf2\xb8\x99\x12H" +
	"\xaf>\xf8\xfd\x93\xf2\xa1{\x91\xe7*v\xd3\x1c!<" +
	"\x98W\x08\xe2\xd1<A<\x9a\xe7\x15\xfb\xe6\xb7\"\x88" +
	"~\xc1\x7fR\xc5\xff\x88\xbb\x8f\x9dO\xcd\xaf'\xf3E" +
	"\xf2\xc9|\xbf\xfb\xf4\x89\x17C7M\xdc\x88\xe4\xc1\x8e" +
	"\x987\xe5\xdfM\x08\xb6Q\x82\x17\x06\xe6-~\xe5\x9e" +
	"/6\xb23\x1c\xc8\xa7\x1c\xbdE\x09\xa6\xac\xeb\xbf~" +
	"\xd9G\xc1M1\x02:\x01\x0c\xbc\x85\xec\xf6\xf9{\xe6" +
	"L\xd8\xfd\xeb{7\xc5\xe4\x10{\xf5t\xfe\xad\xe4\xd5" +
	"\x8b\xf4\xd5\x89\xcb\xfb=\xfa\xea['\x1f\x88\xcfM7" +
	"q\xf5@*\x8e\x11\x03\x09\xfb\x0fqW<\x90\xf7\xd8" +
	"o~\x11\x9f\x81\x12\xac\x1d8\x9e\x10tP\x82\xab\xe4" +
	"\xb9\x1f\xf6\xf3\xee~\x88\xb5\x92\xb3\x03\xa9\x95\\\x1aH" +
	"\x96\xf8\xe1;\x8b\x97\xbe\xfa\xf2\x8eGX\xf6\x0b\x06-" +
	"\"\x04e\x83\x08A\xaf\x7f\xbb>\xfa\xde\x7f\xbe\xfc\x08" +
	"\xc3~\xed\xa0z\xc2\xfe\xd7\xdf\xfb\x1b7\xe5\x81\xef\x1e" +
	"a\xd9\x1f7\xa8\x94\xbc:\x89\xbe\xfa\xc0\xa2\xc2\x92\xf0" +
	"m\x81-,\xfb\xca\xa0YT\x9b\x83\x08wco}" +
	"\xe9go\xbe\xfd\xd9\x16\x96\xbb7\x07U\x12\x82#t" +
	"\x86;\xae]\xf4\xcb\xf2\x9bG\xff\x92\xd80cr\x99" +
	"\x99\x84\xf2\xabA\x1c\x880X\x10a\xb0\xb7j\xcc\xe0" +
	"\x1fp\x08\xa2\xa7\xa7\xde9\xf2\xd0\xc0\xa7\xff\x95\xe16" +
	"2\xc4 \xdc\xce[{\xcb)\xfd\xb7\xd9\xbf\xeadZ" +
	"C\x1a)3C\xc8ZkG\xae:\xd0\xf0\xc73\xbf" +
	"B\x9eA\xf6\xab\x1dC*\xc9\xab\xcf\xbd\xdd\xff?J" +
	"&D\xb6\xb1lF\x86\xd0}\xb4\xd3W\xaf\x1f\xc9\x8d" +
	"y\xf3\xd5\xfb\xb71\xabn\x1dr+y\xf5\xda\x05C" +
	"\xa2\xb3\x17gmge\xd41\x84\xcah\x13}5t" +
	"\xf8S-\xaby\xd5\xf6\xd8\xaa1\x19=3\x84\x8a`" +
	"\xdf\x10\"#\xbe\x7f\x1fOy\xe3C\x9df\xc8\xf7\xd6" +
	"\x10\x82\x02/\x99a\xa7:\xfb\xdeOf\x0cy\x82%" +
	"\x98\xe4\xa560\x93\x12\x94\xea\xe7~\xf1\xdd+\xeb\x9f" +
	"`\x8e\x9bJ\x9egD_\xff\xf0\xaa%}\xdf-\xdb" +
	"\xc1\xcaD\xf6\xfe\x8c\xfa\x10\xfa\xea\xa1\x86\x7f\xfc\xe9\xa3" +
	"\xf2\xafw\xc6\xb9\xa3\x04\xed\xb1\xc5\xd7S\x02\xa5\xdfu" +
	"\xaf\xe7}7\xfa\xa9\xb8hb\x14\xdbc\xab\xef\xf2\x12" +
	"\xfe\xf7,\xff\xf0\xda\xf1\xef-~\x0a\xc9\x83\x12\x14\x1e" +
	"\x89R\xe4K\x84\xa2e\xdc\xe1\xf7s/\xdc\xfc\x14#" +
	"\xbdU\x12\x95\xdeC\xb5\xd3_z\xe7X\xe3o\x19\x95" +
	"\xa8\xd2,\xf2d\xfe\xc3%C\x1f\xbf\xe1\xb6\xa7\x93\x8e" +
	"9!\x11\xe7K\xe7DE\x12DE\xf2\x8a\xeb\xa5O" +
	"\x11D+\xf2.\x1ex\xe2\x8eg\x9ffV\x08\x15\xd0" +
	"#\xf8A\xf5\xa1\xd9K\xa7\x9f|\x96y\xb2\xb0`\x11" +
	"yr\xf6\xd2\xf9?\xbf8A\xdf\xc3\x1e\xad\xa9\x05T" +
	"1\xb5\x05\x84\xedq\x91\x1fO[\xf6\xc1\xa1=\x0cs" +
	"\xdb\x0b\xe8\xc1\x10\x06\xfe\xe1\xc7Sk\xf2~\xc7L\xba" +
	"\xa9\x80\x1a\xe1\xce\xe1\xb3\x87\xde\xf7q\xdf\xe7\x98w\xda" +
	"\x0b\xe8\x86v\xbf\x7fi\xc2\xa3\xdboz\x9e\xd5b\xa8" +
	"\x80\xfa\x99U\x05D\xd2\xf9\xbd\xd7\x9c\xda\xf3D\xf0y" +
	"f\xd2\x1d\x05\x8d\xe4\xd5\x9f\xef_USqc\xed\xef" +
	";\xcb\x82Rl.(\x04q{\x81\x80\xf8\xe8\xf5[" +
	"rok\x9d\xb9}\x1f\xb3\xf4\xda\x02j\x05\x0d\xd7\x8d" +
	"\xbe\xffT\xdb\xb3\xfb:/M\x15\x14\xa1K?\xd8p" +
	"\xb8\xdf\x8f\x9e_\xfeB\x92\xb0y\"\xecM\x05\xe7\xc4" +
	"\xad\x05\x82\xb8\xb5\xc0+\xbeU\xb0\x13At\xee\x03\xca" +
	"\xa8\xa9\xafo}\x81Ug!U\xe7\xf4\x93\xf3\xfe\xfa" +
	"\xce\x97\x83\xff\xc0\x1ab!\xf5\xfb\x17\xca\x8f\xbe\xffa" +
	"\xd3\x07\xff\xce\x0a[.\xa4\xc2^XH\x84\xbd\xf4\xec" +
	"A\xfd\x9b\xea\xbd/\xb3\x96\xfaL!\xf5\x84/\x16\x12" +
	"\x1e_\xf5\xcc\xb4\xe6\xffu\xec\x01\xd6O\x1f/\xa4n" +
	"\xf84%x\xfc\xfd\x97>\xdc\xa0_w\x80\x9d\xa1\xef" +
	"Pz\xfe\xf3\x87\x12\x02\xef\xc9\x9c\xf6e\xc7\xa4\x83\x0c" +
	"\xdf\xe3\x86R\xad\xddt\xf6\xa9aO\xde;\xff +" +
	"\xa0\xe2\xa1T@e\xf4\xd5\xa6Goy\xf0\xb5!K" +
	"\x0f&\x09H \x02\xaa\x1dzB\\8T\x10\x17\x0e" +
	"\xf5V\xad\x1d\xfa\xffI\xa0=\xf5\xe0Up\xf7\x94'" +
	"\xd9\x95\xda\x8b\xa9\x1c\xdemh\xa9\x1e\xf6\xd8\xee\x83\xac" +
	"\x84\x8a\xa9}|}Z^\x7f\xcf\xb9\xf3o0O\xe6" +
	"\x17S\xf5\xdd\xf2\xc5\xba\xcf\xff!~\xefP\xd2\xe2\xc4" +
	"E\x8a\x13\x8a\xcf\x893\x8b\x05qf\xb1\xb7*RL" +
	"\xa3\xfc\xd4'\x17\xaf\xbd\xef\x95\xa7\x0e\xb1rX;\x8c" +
	":\xfc\x0d\xc3\xc8f\xf6\xac\xca\xb9}\x96g\xfd\xdb\x0c" +
	"w\xcf\x0c\xa3v\xfd\xe8\xb0\x8d\xeb^\x9f8\xe6p\\" +
	"\xc615m\x1dF\xb5\xb0c\x18\xd1}\xcd\xe4E\xdf" +
	"\x86\x8b\x1f<\x9c\x8c9x\x1a6\x86s .\x1c." +
	"\x88\x0b\x87{\xc5\xf5\xc3\xc9\xc1\xfcM\xcd\x99'\x9b\x1b" +
	"\x95#\xccZj\x09\xb5\x95\x03\x07\x8e|\xfbu\xd1\xba" +
	"wY\x99\xcf/\xa1\x16\xb1\xa4\x84\xb0\xd9W\xb9\xe3\xe3" +
	"\xd0\x8c3\xef\xb2\xaeiU\x09\xd5\xe7zJp\x7fG" +
	"\x952t\xcb\xd4\xa3,\xc1\xf6\x12\xea\xb5\x9f\xa1\x04\xea" +
	"\x83\x8f]\xf8\xda\x9cw\xd4\xc5\x87T\x1d))\x04\xf1" +
	"\x93\x12\"\xc3\xe3%\x84\xd3\xbf\xbd\xbdf\xdb\xe4\x13\xc3" +
	"\xff\xc4\xf2\xb3w\x04\xf5\x84/\x8e \xb3\x9d\x7f\xf9\xc9" +
	"\xa9\x19\x7fy\xecO\x8c\x82\x8e\x8f\xa0\xe1cw\xd5\x91" +
	"C\xb7\x97\x8f\xff\x88\xd9\xe4\xc1\x11T\xdd\xbf5\xae\xd9" +
	"\xff\xbb\x87\xcf\x1fcY\xdc5\x82\xeab\x1f\x9d\xf4\xa5" +
	"/\xaf\xcf]\xf7\xf1\xbc\xe3,\xc1\xe9\x11\x14\x9e\\\xa4" +
	"\x04;\x84\xfd\xab\x8b\x0a\x9f9\xee\xe6\x07\xf3K\xbf\x11" +
	"\x8bK\xc9\x7f\x05\xa5d\x0b\xef\xdc|\xff\xda>\xa3>" +
	"8\xce\xf0\x919\x92\x1a\xd7\xfe\xbf\xdfxg\xbdo\xd0" +
	"\x09\xd6&\xce\x96R\xbd^*%\xcb|\xf1\xf8\xfa\x99" +
	"\x8b\xc7DN0\xaf\x96\x8d\xa4\xce\xe7\xe2\xe1\xdb\x9e^" +
	"r\xc3\xee\x13]0a\xfe\xc8\xb7\xc5\xe2\x91\x14N\x8c" +
	"\\\xc7\x8b\x0b\xcb\x08&\xbcn\xf2\x19~\xca\xa0\x0b'" +
	"\xec`@g\x9aTFv\\U[F\xed\xb3\xd2Z" +
	"\xeb\xdf\xf9\xda\xca\x8f\x99\xa5\x96\x97S\x8f|\xb7\xf5\xe1" +
	"\xc6\x82\x13\xb5\x9f\xb8A\xbb%\xe5\xfdA\x0c\x95\x0bb" +
	"\xa8\xdc+n.'.\xe3\xd2+\xbd~\xff\xde\xd2\x01" +
	"\x9f\xdakQ\xba\xaf\xca\xa9\xca.\x95\xefDpf\xff" +
	"o\xf2^\xfel\xd8g\x8c\x97\x1eE\xc5\xb1\xa0\xe4\x0d" +
	"\xe9\x0fcF\x9cdu\xdd>\x8a\x9e\xf7\xf5\xa3\x888" +
	"\x0e\xbcs\xec\xdbu\xd9\xbbN\xb98\xc4\xaa\xbd\xa3\x06" +
	"\x82xp\x94 \x1e\x1c\xe5\x15/\x8e\"\xa7\xe2\xdb\x86" +
	"\x8c\xafnz\x92?\x1d\x17o\x0c\x0a\x8f\xa6\x8cl\x1e" +
	"M4s\xec\xe6\x1b\xef*\x0e^\xf8\x1b\x8bZ*~" +
	"BX\xf1\x0a[\x97\xef;;\xe6,\xf3D\xa9\xa0\xd2" +
	"\xf8r#w\xc3\x82\xca\xa2/\x19{\xab\xad\xa0Vu" +
	"\xfd\xf8\x9d\xe2\xae\xb2\xc3\xe7Y\xa3\x19SA\x97\x9bP" +
	"Q\x8d\xe0\xdb-\xcf\x9d\xeaX\xb0\xe6\xab\xc4\x94K*" +
	"\xa8.\xbf\x1e\xba\xe8\x86qY\xc5\x7fg_\x9cYA" +
	"\xf7-\x93\x17\xa3\xf5\xc7k\x9e\xbf\xdd;\xff\x82\x9b\x06" +
	"\xda+8\x10;*\x04\xb1\xa3\xc2+\xee\xad \x1a\xe8" +
	"=q\xf8\x86\xe2s\xbb/\xb2>y@%\xc5\xb7\x05" +
	"\x95d\xbe\xed\x13\x8fV\xaf5\xf6\\db\xd2\xd4J" +
	"\xaa\x82{\xcfe^\x11\xb8\xf3\x85\x8b\xacEVTR" +
	"\xdc:\x81\xbez\xf4\xbb\xec\xb2\xe1Og|\xc3\xbc\x1a" +
	"\xaa\xa4\xdb/\x9a\xb6\xbf\xff\x995\xbf\xfe\xa6\x8bE\xce" +
	"\xaf|_T*\xe9~+\xa7s\xe2\xc1*b\x91g" +
	"\x1e\xf8ie\xde\xca\x19\xdfu\xa1\xdeU\xf5\xbe\xb8\x8f" +
	"\x90\x88{\xab\x04qo\xd5\x0f\x10\x8a\xfet\xc5\xfd\xe7" +
	"\xa7\x1f\xfb\xfe%\x96\xab\xbdU4\xc8\x1c\xa8\"\\\xfd" +
	"\x80\xdbt\xe4\xea\xd6;/u\x82C\x9fTQ\xb7u" +
	"\xba\x8a\xc8d\xc5\x9dKO\x0d\x98\xfb\xc7(;E\xed" +
	"\xb5\xd4+-\xbc\xb6\x1a\x8d\x8d\x9a\xd8X\x81\x8dQ\xfe" +
	"L%\xac\x85G)a\xb5\xdcO\xfe\x1b?\xad\xa1\xdc" +
	"\xb4\x94f<\xcd\xd0CS\x14K)\xaa\xc7f$h" +
	"\x99H\xce\xe03\x10\xca\x00\x84<}K\x11\x92{\xf3" +
	" \xe7r\x90\x1d\xd6\x0d\x0b2\x10\x07\x19\x08\x9cY\xf9" +
	"\xa4Y\xeb06\x1a,\xc5\x8a\x80Y\x07 g\x00\x17" +
	"\xbd\xe9_\xb6\xc8\xfb\xde\xb9\xfb\x00\x9238\x98\x94\x07" +
	"\xd0\x07!\x0f<\x1e\xd5\xb0%\x99\x96bA\xc4\x94\xf4" +
	"&I\x91\xb2\xc3\x18\x1b\x08\xc9\xb9\xce\xfa\xab\xc8\xfa+" +
	"y\x90\xef\xe0\xc0\x03\x90Kd\xe0i'\x83\xb7\xf1 " +
	"\xdf\xc5\x81\x87\xe3r\x81C\xc8\xb3v\x16B\xf2\x1d<" +
	"\xc8\xf7q\x00|.\xf0\x08y:\x1a\x11\x92\xef\xe1A" +
	"\xfe9\x07\x9e\x0c>\x172\x10\xf2l\xaaDH\xbe\x8f" +
	"\x07\xf9!\x0e\xb25%\x84\xa1\x0f\xe2\xa0\x0f\x82l%" +
	"\x100\xec\x1f\xd1\xa0bZ\x0d\x18k\x08!g\xcc\xd0" +
	"#Z\xc02T$\x84kM[\x12^l\x18z\xe2" +
	"=[.\x19Ir\xa9\xc5\x96Rn\xe0\x90n\xe1:" +
	"Uk.\xaa\xf3*\x86\x122YY\x17&d-\xb4" +
	"\xb6\xe8]\xa6\xe4\x92\xa7\x14\xb0\xa5\x10!\xdf\xc0g\"" +
	"\xe4D\x05\xb0\xdd\xb2\xb8\x8b+E\x9c\xb8\x8d\x13 \x01" +
	"\x11\xc0\xb6\x17q3}\xda\xc1\x09\xc09\x0e\x05\x88\x07" +
	"C\x9f\x0d\xfbLl\xa7O#\x9c\x00\xbc\x93v\x81\x9d" +
	"\xba\x89*W\x898q\x09'@\x86\x13\xff\xc1\xf6\xe9" +
	"\xa2\xcc\xd5 N\x9c\xca\x09\x90\xe9$\xe0`\x9b\xba8" +
	"\x8e\xabG\x9cX\xc1\x09\xd0\xcb\xc9G\xc1N\xb3\xc4b" +
	"\xfa\xf4jN\x00\xc1A\xd9`'\xe9\xa2\x87>\xcd\xe2" +
	"\x04\xe8\xed 8\xb0q\x96x\x09\xc8\xd3\xaf@\x80," +
	"\x07\x9d\x81\x9d-\x8b'a\x16\xe2\xc4\xe3 \xc0\x15\x0e" +
	"\xf6\x05;P\x89G\xe8\xd37A\x80+\x9d\x0c\x1c\xec" +
	"DB|\x11\x16!N\xdc\x0b\x02\xf4q\xaa\x1a`{" +
	"#q\x07}\xba\x0d\x04\xe8\xeb\x80U\xb0]\xb0\xb8\x19" +
	"\x1a\x11'n\x00\x01\xfa9\x80\x07lt)\xae\xa5<" +
	"\xaf\x02\x01\xb2\x9d\xd2\x00\xd8i\x94\xb8\x1c\x0c\xc4\x89*" +
	"\x08\x90\xe3\xc0(\xb03lq\x09\x8cG\x9c(\x83\x00" +
	"\x1e\xa7\xee\x00\xb6\x83\x17\xa7\xd2\xa7\xe3@\x80\xfeN\x0c" +
	"\x84-\xcf!\xea\xaa\xc52 :*\x00\x01D'\xbd" +
	"\x00\x1b=\x89\x03\xe8\x8e\xfa\x82\x00\xb9N.\x0a\xb6\x0b" +
	"\x15\x81\xec\xc8sQ\x80\x01N\xba\x03v6\xec9]" +
	"\x838\xcfq!{yD\xb5|\x90\x1dV\xb5f\x1f" +
	"d\xab\x1a\xf9\xe5\x0d\xe9\x11\xcd\xf2\xc1\xea\x88\x16\xff/" +
	"\xea\xd7\xb5&\xb5y:F\x90\xf8\xd5\xd0\xe9\xd7\xa4 " +
	"\x82\xa0\x0f\xa2\xb1\xc33)\x80 \xe0\xfc\xaa\x0f!\x84" +
	"\x9c_\xb3M\xf6W\x83\x82\xf8\x15\xd8\xf9Y\xa7\"\x9e" +
	"\xb0\x12\xff99\x88\x04\xac\x18> nh\xb6\xeeW" +
	",\x04\x98\xfd\xe5\xc5s\xf0J\xcb\x07\xd5\xad-\xba\x12" +
	"R}P\xdd\x88\xfdz\x08\xfb`\xb5_\xd74\xec'" +
	"\x1c\x06T\x93\xfe@<\xfd\xa9kAU\xc3u\x18\x09" +
	"\xd80}\xb0z\x056LU\xd7|P\x07\x89c\xdc" +
	"\xaf\xab\x1f\x8ehaUs\xfc\xafM\xd8\x8d\xbfNE" +
	"G=\x8d-V\xab\xa8N\xc9\xee\xc9\xd1,\xc3m\xe9" +
	"\xf9.[\x19\xc1\xa2z\xec\xa5\x0c\xb8MY\xc4\x81\xa0" +
	"\x04\x83\xd0\x0fA\x1d\x0f\x90\x93\xc0X\x08\xc8`\xb7q" +
	"\xa3\x9eje\x9a\x1e\x14\x02\xd8p\x8f\x1cE4rT" +
	"@#D'IMz0\x80\x8d\x0c\xc9jQ,I" +
	"\x91bJ\x95TSR\x82A\xbd\x15\x07$K\x97\x14" +
	"\xbf_\xc0\xa6IY\xb39\x1d1\x1e!\xb9\x88\x07y" +
	"4\x13Q\xcaHL(\xe1A\xbe\x96\x83\xea\xd8\xcc\xb6" +
	"P\xbcal\x84\xcc\xf4D\x143\x90\xa2:\xe2\xd9\xe1" +
	"\xb2\\{\xa6\xdbt\xb6)RC\x8c\xcdJ\xf6\xc2L" +
	";>1m\xb5\xa5\xfa\x97a\x0b\xb2\x10\x07Y\xe9\xc5" +
	"\xa1\x06e\x05v\x8bC5\x09]\xae\x8eQ\x9a\x09}" +
	":\xa9{\x92>{X\xa7>DL6\x9b\x98L\xb7" +
	"\xe4]\xc0Hu]\x17\xbeH\x84\xef\xc3\x83\x9c\xc7\x91" +
	"C\x1c\xd6\xeb\x14\xab\x85\x0d\xcfi\x98o\x03s \x18" +
	"\x9b(La\x13\xec)\xf1\xaeP\x82\x11\xdceQ\xbe" +
	"\xbb\xd3jo\x84Y\xae>1\xb3\xb3\\\x05\xd9\xddh" +
	"\x1e\xe4\xff\xc7A4\xa8\xfb\x95`\x1dqI-\x09\xf0" +
	"\xd1\xc3\x8e]\xa0]\xb3b4*\xcdx\xb2\x1e\x0cb" +
	"\xbfc=\xac8\x171\xe2T\x9a\x9b\x0dl\x9a*\xf1" +
	"\x98\x00\x88\x03H%\xcf\x98W\x8c\xf9\"\xbe\xb3/`" +
	"\xad2F\x069\x89D\x1e\x01\xe4\xa4\x9a\x9c\x06\x87\xb8" +
	"\x9f\x03\xb3'\x19\x13\xbf\xe9\xe2\xe1:\xc1V\xc5jI" +
	"\xcfFb\xcb:\x07-\x95\xc6\xc89\xb9\x86\x07y," +
	"\x07Q\xfajg\x8d\xad\xd6\xc3\x96\xaak&\xe4$\x0a" +
	"jI\x9bw\xd9\x90_\xb1\\\x1d\xece\x03q\x02\xc2" +
	"gjM:\xea\xd9\x99\xfe\x04\xa26e&u\x9f\x14" +
	"\x92\x97\x05\xd5eX\x0a`\xd3o\xa8t\x17\x14\xa0k" +
	"m\x92\xa6\x070\xa2\xc2\x88s&fA)B\x0d\x19" +
	"\xc0CC\x0e$\xc4#\xf6\xa5\xe3\xbd\xc9x.p\x00" +
	"1\x9c.z\xe8p\x1f2\x9cG\xc8y\xa0X]\x1c" +
	"\x00\x95\x085\xe4\x90\xf1\xc1d<c\x0d\x85\xebb>" +
	"\x1d\xcf%\xe3\x12\x19\xcf\xcc\xcc\x85L\x84\xc4\xab\xe9x" +
	"\x1e\x19/\"\xe3\xbd\xb8\\\xe8\x85\x90X\x005\x085" +
	"\x0c&\xe3%d\\h\xcf%)\x91X\x0c\xb3\x10j" +
	"(\"\xe3\xa3\xc9xo>\x17z#Dq\x10j(" +
	"!\xe3\xd7\x92\xf1\xac\x8c\\\xc8BH\xac\xa0|^C" +
	"\xc6\xc7B\x92\x15e\xb7(f\x0b\xf4E\x1c\xf4E\x90" +
	"m\xaa\xb7b\xdb\xedzU\"\xa0\xc4/s\x8aj\xd8" +
	"\xe7\xc9\x1b\xc0a\xab\xc5\xd6\xdb\xea\x90\x1e\x98\xa7&\xb2" +
	"\x8f\xa8j\xd6\xa9\x9a\x86\x03\xe4|\xc7\xdf @\xc3\xc2" +
	"\x9a\xe5,\x151\xb1q\xb9\xee\xce6\xa6\x9e\xe9\xe3H" +
	"\x85\x9e9!\xc9\xf4j\x12\xa6g#\x1a\xc8I\x14\x8a" +
	"R\xd8\xf4\x82\xc9\x0d\xe5A\xddIxz\x8a\x00x\xa5" +
	"jZ\xa6\x83o\xba\x0du1\xba\xf4\xfc\x94\x0d\xc9\xb0" +
	"a\xda\xae8\xd5\xf1\xfbg\xfc\x89\xdb\xae-%\x91\xe6" +
	"\xa5\x0a65L\xb01\xf0\x0a\xc7\x87XJ\xf3\x1c&" +
	"G\xedIz$\xd8\xae\xc0n\x9e\xfe\xb2\xb9\x9f\xd6P" +
	"n\xe9\x11\x7f\x8b[\x14\xfeg&\xa3\x8c\xd5W\xe3\xce" +
	"\x86\x98\x06\xe8\xb1C@w\x96`\xc4\x9e\xe7$J\xaf" +
	")\xc2\x0b\xd1K\x13\xb6\xfc-nrJ\x85\xd2\xdcv" +
	"\xb6,\xa0\x1an1\xbe4\xa1eG\xc9F\"`t" +
	"\x16\x9d\xdf\xc0\x8a\x85\xeb\x14\xe45\xb0\xe6b\xd9n\xd6" +
	"e\xb6i~\xb7\x85g%,\xc9\x89T\xf5\x0c\xb6h" +
	"U\xad\x96\x1f\xb6\xe8!\x16Gh\x18\x07\xa6a\xcbO" +
	"\xa2WZ\xa7\x8a\x01\x90]\xd4\xda\xbd\xc8\x9d\x83\xddm" +
	"Ic\xb2W\x0f\x85T\xab\xe7\xca\xd1\xdd\xd1\x06Uk" +
	"\x0eb)\x08z\xb3\x845\xcbhC \xe78\"P" +
	"\x88\xeco\xe4AnaN\x18&\xca]\xca\x83\x1cd" +
	"\x8aF*\xa1\x0c\xf0 \xaf!\x91(^5bkN" +
	"\x9d<\xbd\x102\x9b\x9d\x10`)\xcd\x0e*&c\xfd" +
	"\x10d\x07\x14\x0b_n2\x15w6\xe9yg\xa2m" +
	"\xbeg\x07\x16\xf3\x01]\xbdNM\x0a\xaf\xb3\xda4\xfc" +
	"u\x8cM\xae\x0e\x98V]:\xc8\x89\xa8\xd7O\xb5\xd6" +
	"\x15\xb0\xb9n\xc6\xce\x99\x09*M\x11\x13\xc8\xdc\x11\x8d" +
	"\xf8\xd1\xae\xa6\x93\x1a\xf3\xba\xc6\x91\xcaDr\xe3m2" +
	"0\x0e$R\x1b\xa7\x08\x9f~j3\xdb$:\x11z" +
	"\x0a*\xb5\x04\x19\xce\x0d[\xaa\xa0k&[\x07\xe8." +
	"dt9P\xee\xa9\x85\xe5\x10v\xe7\x9dU\xadI\x87" +
	"\x9cD\xcbC\x92kL>{\xf5\xdeX\x9d\xc4\xf5\xec" +
	"Iq\xb8X\x09Q\x02\x15I\xc6\xcd\xc7R\xee0\xc6" +
	"\x86\xd4\x8a\xa5\x90\xda\xdcbI\xc4+y%\xe2ch" +
	"va\xf35\x95\xf0\xe5\xe3A\x9e\xcd\x98\xdf\xccF\x84" +
	"\xe4\x19<\xc8\xf3\x98#)\x13\x9b\x9c\x1d;\xbc\x9d\xca" +
	"\xb3\xd1&Uk\xc6F\xd8@\x82\xaaY\x8e\x99\xc6\xb2" +
	"u&Au\xfau\xd2\xd7\xe2\xe4 V\x8c.\xe8\xa0" +
	"wwA1u\x9d\xc6\xaf\x87\xdb\xfeO\x0f!\xb3\x99" +
	"I\x81\x80\x1b\x82\xe9\x1c5\x09aR2\x9f2)s" +
	"\"\xb3k~\xf2\xdf+E\xd4\x87\xecs\xd4\x9d1k" +
	"\xe9\xa0\xa0$1t\x81\xbe|w\xa5\xb7\x7f\x06\xe7$" +
	"\x9f\x9f)\x82\xda\xd4\xe4~z\x06\xc7#\xd77\xd1)" +
	"jS\x136\xb0\xc6\xf9\xb1\xd4\x88\xadV\x8c5\xc9j" +
	"\xd5%\x7f5u\xa1\xc4Y\x0dvxx\x868\xab\xa7" +
	"x\x90\xdf`\xec\xe5 \xb1\x97\xfd<\xc8\xc7\x98S\xf3" +
	"\x01\x19|\x8f\x07\xf9<\x13\xc8\xce\x92\xc1S<4\xf4" +
	"\xa6\x09UF,\xa1\xca$\x89S\xbd\x93g\xd9\xf9T" +
	">\x8c\xb7\xf3,\x9a\x1f\xf5\xea\x15\xcb\xa7\xcah\xdeD" +
	"\xf3\xa0\x19\xc0\x81W\x09\x04X\x9f\xc9:\x97~(V" +
	"/Z\xd1\x13\x81\xda\xac\xe9FO\x04!\xd54U\xad" +
	"\xb9[\x02o\xd2\x02\xce\x15b\xecqu\x08\x1b\xcd=" +
	"<\xa7E\xe5\xa0\xea\xb7\x08\xfe\xe9\x96\xc8\xd6q\x96\x9b" +
	"\x81\x85\xe9\xfdM\x0c>v\xef\x03\xe2p\xbck\xe0\xe2" +
	"\xbb\xf1\x17]\xfc~Wp\xd4\xa2h\xcd\xb8g\x13\xfb" +
	"<:W\xc3\xd2\x0c\xd5\xb48\xddh\x8b\xa1#\xa9I" +
	"7$E\xcanR\x838\x8d\xeb\xb5\xf1n\xd7k\x84" +
	"r\x0d\x0f\xf2=\x8c\x81\xad/M\xdc\xb9\xd9\xf6\xe5\xe9" +
	" Vw\x17\x0f\xf2\xc6\xa4\x83S\xed\xa7\xec'\x92h" +
	"\xac\x04 '\xd1x\x15\xf3A\xd9\x1a^iu\x1d^" +
	"m\xe0&l\xcc\xd3\xd3s\x01\xf1\xeb\x05\x1b/\xb1\xc7" +
	"\xba\x9e\xa9z\xb9\x14m\xd2*z\xc5\x0b\xbc\xe9\xbaK" +
	"\xdb\x1b3\xe1\xb00\x11\x0e\x9dh\xb8\x88\x8d\x86\x10\x8f" +
	"\x86d\xb0\x8e\x07\xf9\xc6\xa4\x94\xc4RCX\x8fX\x0d" +
	"\x88\xc7~\xb8\x12qp%\x8a\x95\x0d-\\\xab \xde" +
	"\\\x962y\x99\x19\xc0\x9a\xa5Zm\xa8\xe7\x80\xdf\xdf" +
	"\x0e\xf8\x8d:\x1f\xb1$=bH\xfe\x88A\xd2\x14)" +
	"bb#v\x81K\xac\x8a\xc1\xdf\x8d\x0c\xd4\xb6\xb7\xa7" +
	"V\xc6\xa1v\x98\xb1\xaa\x10\xa1\x0c\xf2 \xafL\\\xda" +
	"FH\x02c\xc50y4\xbe\xd4|$0\x95\x0f\xaf" +
	"\xde\xaa1u\x10W\\\x10U\xcd\xb94\xf3g\xca)" +
	"i\xc3\xd2\xb4\x11\x98K\xf1\xfc\xb2+\x8f\x04\xf6\x85\x94" +
	"e\x98D\x06\xd7\xf2\x0b;c@mj\x82\x9cD{" +
	"X\x1a\xd9n\x1c\x9b\xbb]\x1f\xb0\xf9.\x93\xdbt\xbb" +
	"\xed\x98=\xd7cS\x88\x04i\x8e\x96*\xe7*\xed)" +
	"\xe7\x0a3\x9e\x845\x84\xee/\xe5\xb3C\x0ac\xd8\xee" +
	"zO]^\xfa\x1f*\x90\xc4n\xec\x92\x00\x86k\xbc" +
	"X\x1eI\xc8\xbf\x9bxA\x14\xd5\xa2\x9a\x96n\xb4\xb9" +
	"\x96\xd4\xd9+\x998]\"x9\xfdz)\x10/\xbb" +
	"\x88\xcb\x1d\xd5e\x03\x9e\x05\xd5\xb1\xb44\xc9\x12\x0c\xb7" +
	"\xd3O\xdcn\x0b\x0f\xb2\xc5X\xc2\xf2[\x11\x92\xc3<" +
	"\xc8\xb71\x96\xd0\xb6(\x11\x92\xe2+/\xc0\xc8\x1b\xab" +
	":v\xe6\xa8\x1e#p*e\xd1F\xc5\xbf\x0ck\x81" +
	"\x05(\xceU\xf2\x83z\xc4'\xeaj=\xbb\x02\xaa\xb0" +
	"\xae\x81\xbb\xe7<\xd0\xbe\xe2\xfa\xdf\xb9I\xb3#\x9a\xed" +
	" \xbaU\xca4h \xfa\x18K[B\xecn~\xb0" +
	"?\x90\x10wAe\xbcU!\xd1[\x04v{\x9a\xb8" +
	"\x19hK\x08\x08\xc09\x8d\xe6`\xf7\xd4\x8b\xedP\x88" +
	"81\x02\x02\xf0N\x9b6\xd8]c\xa2Jg^\x02" +
	"\x02d8-\xe6`\xb7\x9f\x8a2mF\x98\x0a\x02d" +
	":\x8d\xd0`\xf7\x91\x8b\xe3\xe8\xbae @/\xa7s" +
	"\x17\xec\x06U\xb1\x80>\x1d\x00\x02\x08\xce'\x02`w" +
	"G\x8aY\x84+\xcf%\x01z;m\xb5`\x7f)\xe2" +
	"9[\x898\xcf'\x02d9\xed\x9f`7'{\x8e" +
	"\x96\"\xce\xf3\xa6\x00W8\xdf4\x80\xdd3\xedy\xf1" +
	"V\xc4y\xf6\x0ap\xa5\xd3\x0c\x0fv\xaf\xb1g\x07\x99" +
	"s\xab\x00}\x9c\x16N\xb0\xfb\xf9=\x9b\xc6#\xce\xb3" +
	"^\x80\xbe\xce\xa7\x18`\x7fV\xe3Ye \xce\x13\x11" +
	"\xbc\xf4Z\xd0\x07\xd9A\xd5\xb4| \xf8\x15\xda\x18\xb1" +
	",\xa0\x1a\xbeXj\xb6\x82<\x8d\xff!\xc8\xd0\x07B" +
	"X\xd5|\xe0\xa5\xb9\x8a\x0f\xb2I\xec\xf1A\xd4.w" +
	"\xa0\xeaX\xc1\xc3\x07^\x9a\xa0\xfa\xec\x0a\xb9\x0f\xa2\xf6" +
	"\xa5*\xf2\xd2k\xd5\xce\x9d\x08=\x86\"\x1b;1h" +
	"q\x11\x03\x0c\xed\x93\xbd\xb6\x91\xc1\x80\xf6\xc9\xee\x98\xc5" +
	"4^\xd9'{\x13\xf1\x01\x1by\x90\x1f\xe5\x00\xe2`" +
	"\xf1a2\xf6\x10\x0f\xf2c\xf6\xad\xe7\xdcV\x0d\xf1L" +
	"t\x8f\x1d\x9b\xb9\xadH`c>%\xad\xc7+:u" +
	"g\xc52\xc9NN\xe1\xb2\x0b\x9bNe*E\xa5m" +
	"2-\xe0\xd5)*\x18\xa9\xf0\xf8\xf5\xb8m\xd4\x02%" +
	"\x18\xe1\xb0\x14VTCR5\xc9j\xc1\x92_\xcf&" +
	"St\xbegt\xbd\x1b(t\xbf\x88\x16V(\xc1\xb4" +
	"\xd0\x85\x81M\x9c\xb8\x01NU\x94!\xabM\xe1A\xae" +
	"s\xee\xec<\xb5\x95\x09h\xda)4\xb0W\x15\xde&" +
	"\xdd\xf0\xa7yy\xacj\xae\x0e\xd6%\xca\x92C\xe2Z" +
	"\xe8b]+IrT\xd6\xb5&\xa5\x8c\xdd.0=" +
	"v\x82fZ<\x0e\xf5\x0c\x83k :I2i\xd9" +
	"9CR-\x1c\x8a5\x9e\xb4*\xa6\xb4L\x0d\x06q" +
	"@jl\xa3jm\xf6\xa34*_5\x09!;\x87" +
	"\xa6[)'_\x03&\xe1\xdf\xd4\x92\xb6U\xcf\x04\xe9" +
	"YiC\xf4\x1a&r\xdbGy\xf9\xacD\xe4\x8e6" +
	"*&NjL\xe8\xcc\xe1\xeax\x04v8\x0e+\xa6" +
	"\xd9\xaa\x1b\x01\xb7V\x86+R\x95\xe9\xd2\xe9~\x8a7" +
	"\xe2\xd8H\xaa[x\xe6\\\xe0\xa4\x984Q\x87v\x01" +
	"\x8f\xec\xf5h\xba\xd7u\x9d|M\x97\x98\xde\xdd\x15\xea" +
	"e\x9f\x036\x89\xee\xe9\x1c\x10\x87_\xa7\xa8\x06\xea\xd9" +
	"\x97\x9d\x8b\xd6\xe30\xf1&\x1ag\xd1\xaaU\x80V\xb3" +
	"T\xadY\xf26\xa9Al^\xa633\x0d\x7f\xd7\xfa" +
	"\xb4\x100\xad\x1e\xaa\xd6\xa9\xfaj\xddd\xc4\xe6\xfcN" +
	"\x0f/\x84\x9d\xbc9\xb5\xf3L}\xfd\xd0\xe5\xb2\xd9\xad" +
	"\x9b\x9a\xbd|P\xb5&\x9dQ\x95\xf3qm\x92\xaa\x84" +
	"\xee\xae\xfeR\x99,?\x99\x02\xc1\"\x0a\x04\xedO\x11" +
	"\xc1\xee\xc8\x17=\x14\xcceR h\x7f\xd8\x02\xf6\x17" +
	"h\x9e\x8b\x04\xc7\x9c&0\xd0\xfe\x9c\x10\xec\xcf\xbd<" +
	"\xc7\x09\xde:B@\xa0\xfd]\x00\xd8_\xa1y\x0e\x12" +
	"l\xb4\x8f@@\xfbc\x09\xb0[\xf2=\xbb\xc8\xb3m" +
	"\x04\x00\xda\x1f\xa1\x80\xfd\xb9\x8ags\x0d\xe2<\x1d\x04" +
	"\xfe\xd9\x1ft\x80\xfd9\x8e\xa7}\x16\xe2<m\x04\xfc" +
	"\xd9_\xfe\x81\xdd\xab\xef\x09\x11\x0c\xa7\x10\xecg\x7fX" +
	"\x08\xf6'~\x9e\xf9d\xbd\x99\x82\x10\xd4\x9b}P\x1d" +
	"K\x83} XJ3\x85R\xb1\xbfT\xbd>'\xa9" +
	"\xf2A\xd4\x06@\xb4\x954\x9b\x88\xda\x07^z\x7f\xd9" +
	"\x19<%\x03\xefI|\xdd\xcc:\x80:>S\xee\x03" +
	"\x90\xf8\x8c\x05\xa1\xc4\x07\x04\x08%>yN\x95X$" +
	":8\xdd\xca\xed\x95\x09\xa7\x93~C\x1a\x0d\xa6.\xd7" +
	"\x12nw\xd5\xb3\x98\xbbjC\xd7\x13\x09vHY9" +
	"\x05\x87c\xee>\xb9\x07)\xa3\xdbri\x8fwqd" +
	"\x13\x06\x0e\x07\x1dh\xf3_\x01\x00\x00\xff\xff\xe4\xee\xdd" +
	"\xaf"

func init() {
	schemas.Register(schema_ea883e7d5248d81b,
		0x809d4e73dc197b11,
		0x8167eafcc8695b1c,
		0x81b6b14efe0127c4,
		0x83e6cb306e77e311,
		0x87c49e302c6516f8,
		0x884238694e8b8d88,
		0x8c8ac84e843e98c6,
		0x8cdf119f2d20b743,
		0x8ed051e9369ac720,
		0x90027b0333e503ee,
		0x943e5e6dc1abe7b8,
		0x94ee8cc65b181abe,
		0x956cdf6b89128744,
		0x958ea6b33d4e8cbb,
		0x97e9d1c7a00e713e,
		0x9ba7a818970a029c,
		0x9cb31f0ede4f5117,
		0x9eadc3c7605bd657,
		0x9ec3cfd8ff4bae06,
		0x9efc974402f016f6,
		0x9f647c7028225a97,
		0x9fe8d2cd92c27a38,
		0xa2305f2ea25a3484,
		0xa3b41ad02b8645ed,
		0xa40fb26fec6a8554,
		0xa4efd353c57d2b85,
		0xa5753d28ca12d2ba,
		0xa596c7cd35022b4b,
		0xa9095b4cff1e5634,
		0xa97d67096ee7d46d,
		0xa99c622e110c1203,
		0xab1e48e58e4c69af,
		0xab89c6fc9bf26f2a,
		0xad2dd70d5d17decb,
		0xaff62edfdbfe53d0,
		0xb030fc18cb3b0e61,
		0xb05bd83a34de71b7,
		0xb05ff814dad43968,
		0xb262e0d6c2474d9c,
		0xb47c58aa23289d55,
		0xb4b684abc5f91831,
		0xb6e947604cd03fdd,
		0xb76f3dc1dcf4fdf1,
		0xb7d0dd6b467e7539,
		0xb81842457ebf1a07,
		0xba0de490234c27af,
		0xbb5ea9a03dfddab3,
		0xbb6cabb7ec800819,
		0xbc4d5c31427dc498,
		0xbda949777c149f4b,
		0xbdb679ec96303b53,
		0xbe71bb7b0ed4539a,
		0xbea1cb452f61974f,
		0xbf1cf3d6e654e947,
		0xc0dd66dedad92ef8,
		0xc3b93ffa6fc9f160,
		0xc538e655744911c7,
		0xc53b6f91dec2daaa,
		0xc920e06b8110e91f,
		0xc9558eac26b0f15e,
		0xc9601ec89a6aa066,
		0xc9ac448a01179aec,
		0xc9b3a8263f6853d7,
		0xccf4f28c8951edf6,
		0xd01613feea87ee6a,
		0xd0b0c690855bac45,
		0xd289114a83107db7,
		0xd4353ecb879426a0,
		0xd49a2570fb5a4342,
		0xd5616267acef42a7,
		0xd78724f6fbd5c5c5,
		0xd7ef486de484610d,
		0xd9459f2361338d96,
		0xd95473f6f8a89a69,
		0xdb27e243a580d2f0,
		0xdba8e30445acc3f4,
		0xdf3a2e83d0d533b3,
		0xe0f49db8c42c72b2,
		0xe154e487144bf3c2,
		0xe1b522247fc407ad,
		0xe1dd2f0c85965fd6,
		0xe21b4052865cf7c4,
		0xe275355b4989aaee,
		0xe2b3585db47cd4f9,
		0xe2f81b4403ef433b,
		0xe478c8af63857432,
		0xe54de22194de748a,
		0xe71560d8bc06c6fd,
		0xe826e800c318a7c4,
		0xe92935bf20cc2856,
		0xecb10f87fbe0d6c5,
		0xed03ac5ef50453fb,
		0xf0f86c25885c5fe0,
		0xf135f1bd71a1071f,
		0xf3243256580294f3,
		0xf4d42db113af3a4b,
		0xf580568dec00ba9f,
		0xf7250939585a23f6,
		0xf8551f83bb42e152,
		0xf9b3f22591273e08,
		0xf9b772853fd93ea9,
		0xf9be86640a05f28e,
		0xfa04b4272d0ffcd9,
		0xfaa680ef12c44624,
		0xfc487818328b97ef,
		0xfd36e047f496768b,
		0xfd86771dd5950237,
		0xffd34f15ec608676)
}
