// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp2 "github.com/sahib/brig/gateway/db/capnp"
	context "golang.org/x/net/context"
	math "math"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// StatInfo is a stat-like description of any node
type StatInfo struct{ capnp.Struct }

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xa2305f2ea25a3484

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xa2305f2ea25a3484, s.Struct)
	return str
}

func (s StatInfo) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) TreeHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s StatInfo) HasTreeHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetTreeHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s StatInfo) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s StatInfo) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s StatInfo) Inode() uint64 {
	return s.Struct.Uint64(8)
}

func (s StatInfo) SetInode(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s StatInfo) IsDir() bool {
	return s.Struct.Bit(128)
}

func (s StatInfo) SetIsDir(v bool) {
	s.Struct.SetBit(128, v)
}

func (s StatInfo) Depth() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s StatInfo) SetDepth(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s StatInfo) ModTime() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s StatInfo) HasModTime() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s StatInfo) ModTimeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s StatInfo) SetModTime(v string) error {
	return s.Struct.SetText(2, v)
}

func (s StatInfo) IsPinned() bool {
	return s.Struct.Bit(129)
}

func (s StatInfo) SetIsPinned(v bool) {
	s.Struct.SetBit(129, v)
}

func (s StatInfo) IsExplicit() bool {
	return s.Struct.Bit(130)
}

func (s StatInfo) SetIsExplicit(v bool) {
	s.Struct.SetBit(130, v)
}

func (s StatInfo) ContentHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s StatInfo) HasContentHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetContentHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s StatInfo) User() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s StatInfo) HasUser() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s StatInfo) UserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s StatInfo) SetUser(v string) error {
	return s.Struct.SetText(4, v)
}

func (s StatInfo) BackendHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s StatInfo) HasBackendHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetBackendHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xa2305f2ea25a3484, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

// Single log entry
type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xb47c58aa23289d55

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xb47c58aa23289d55, s.Struct)
	return str
}

func (s Commit) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Commit) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Commit) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Commit) Tags() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Commit) HasTags() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Commit) SetTags(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Commit) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Commit) Date() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Commit) HasDate() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Commit) DateBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Commit) SetDate(v string) error {
	return s.Struct.SetText(3, v)
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xb47c58aa23289d55, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

// A config entry (including meta info)
type ConfigEntry struct{ capnp.Struct }

// ConfigEntry_TypeID is the unique identifier for the type ConfigEntry.
const ConfigEntry_TypeID = 0x974c11f8cfed4247

func NewConfigEntry(s *capnp.Segment) (ConfigEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ConfigEntry{st}, err
}

func NewRootConfigEntry(s *capnp.Segment) (ConfigEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ConfigEntry{st}, err
}

func ReadRootConfigEntry(msg *capnp.Message) (ConfigEntry, error) {
	root, err := msg.RootPtr()
	return ConfigEntry{root.Struct()}, err
}

func (s ConfigEntry) String() string {
	str, _ := text.Marshal(0x974c11f8cfed4247, s.Struct)
	return str
}

func (s ConfigEntry) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConfigEntry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConfigEntry) Val() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfigEntry) HasVal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) ValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetVal(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ConfigEntry) Doc() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ConfigEntry) HasDoc() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) DocBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetDoc(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ConfigEntry) Default() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ConfigEntry) HasDefault() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) DefaultBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetDefault(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ConfigEntry) NeedsRestart() bool {
	return s.Struct.Bit(0)
}

func (s ConfigEntry) SetNeedsRestart(v bool) {
	s.Struct.SetBit(0, v)
}

// ConfigEntry_List is a list of ConfigEntry.
type ConfigEntry_List struct{ capnp.List }

// NewConfigEntry creates a new list of ConfigEntry.
func NewConfigEntry_List(s *capnp.Segment, sz int32) (ConfigEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return ConfigEntry_List{l}, err
}

func (s ConfigEntry_List) At(i int) ConfigEntry { return ConfigEntry{s.List.Struct(i)} }

func (s ConfigEntry_List) Set(i int, v ConfigEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ConfigEntry_List) String() string {
	str, _ := text.MarshalList(0x974c11f8cfed4247, s.List)
	return str
}

// ConfigEntry_Promise is a wrapper for a ConfigEntry promised by a client call.
type ConfigEntry_Promise struct{ *capnp.Pipeline }

func (p ConfigEntry_Promise) Struct() (ConfigEntry, error) {
	s, err := p.Pipeline.Struct()
	return ConfigEntry{s}, err
}

// One history entry for a file
type Change struct{ capnp.Struct }

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0xd01613feea87ee6a

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Change{st}, err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Change{st}, err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.RootPtr()
	return Change{root.Struct()}, err
}

func (s Change) String() string {
	str, _ := text.Marshal(0xd01613feea87ee6a, s.Struct)
	return str
}

func (s Change) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Change) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Change) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Change) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Change) Change() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Change) HasChange() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Change) ChangeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Change) SetChange(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Change) Head() (Commit, error) {
	p, err := s.Struct.Ptr(2)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasHead() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Change) SetHead(v Commit) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewHead() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) Next() (Commit, error) {
	p, err := s.Struct.Ptr(3)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasNext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Change) SetNext(v Commit) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewNext sets the next field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewNext() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) MovedTo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Change) HasMovedTo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Change) MovedToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Change) SetMovedTo(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Change) WasPreviouslyAt() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Change) HasWasPreviouslyAt() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Change) WasPreviouslyAtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Change) SetWasPreviouslyAt(v string) error {
	return s.Struct.SetText(5, v)
}

func (s Change) IsPinned() bool {
	return s.Struct.Bit(0)
}

func (s Change) SetIsPinned(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Change) IsExplicit() bool {
	return s.Struct.Bit(1)
}

func (s Change) SetIsExplicit(v bool) {
	s.Struct.SetBit(1, v)
}

// Change_List is a list of Change.
type Change_List struct{ capnp.List }

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return Change_List{l}, err
}

func (s Change_List) At(i int) Change { return Change{s.List.Struct(i)} }

func (s Change_List) Set(i int, v Change) error { return s.List.SetStruct(i, v.Struct) }

func (s Change_List) String() string {
	str, _ := text.MarshalList(0xd01613feea87ee6a, s.List)
	return str
}

// Change_Promise is a wrapper for a Change promised by a client call.
type Change_Promise struct{ *capnp.Pipeline }

func (p Change_Promise) Struct() (Change, error) {
	s, err := p.Pipeline.Struct()
	return Change{s}, err
}

func (p Change_Promise) Head() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Change_Promise) Next() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

// Represent two differing files
type DiffPair struct{ capnp.Struct }

// DiffPair_TypeID is the unique identifier for the type DiffPair.
const DiffPair_TypeID = 0xf8551f83bb42e152

func NewDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func NewRootDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func ReadRootDiffPair(msg *capnp.Message) (DiffPair, error) {
	root, err := msg.RootPtr()
	return DiffPair{root.Struct()}, err
}

func (s DiffPair) String() string {
	str, _ := text.Marshal(0xf8551f83bb42e152, s.Struct)
	return str
}

func (s DiffPair) Src() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetSrc(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSrc sets the src field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewSrc() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DiffPair) Dst() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasDst() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetDst(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDst sets the dst field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewDst() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DiffPair_List is a list of DiffPair.
type DiffPair_List struct{ capnp.List }

// NewDiffPair creates a new list of DiffPair.
func NewDiffPair_List(s *capnp.Segment, sz int32) (DiffPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DiffPair_List{l}, err
}

func (s DiffPair_List) At(i int) DiffPair { return DiffPair{s.List.Struct(i)} }

func (s DiffPair_List) Set(i int, v DiffPair) error { return s.List.SetStruct(i, v.Struct) }

func (s DiffPair_List) String() string {
	str, _ := text.MarshalList(0xf8551f83bb42e152, s.List)
	return str
}

// DiffPair_Promise is a wrapper for a DiffPair promised by a client call.
type DiffPair_Promise struct{ *capnp.Pipeline }

func (p DiffPair_Promise) Struct() (DiffPair, error) {
	s, err := p.Pipeline.Struct()
	return DiffPair{s}, err
}

func (p DiffPair_Promise) Src() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DiffPair_Promise) Dst() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

// Difference between two commits
type Diff struct{ capnp.Struct }

// Diff_TypeID is the unique identifier for the type Diff.
const Diff_TypeID = 0xc9601ec89a6aa066

func NewDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func NewRootDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func ReadRootDiff(msg *capnp.Message) (Diff, error) {
	root, err := msg.RootPtr()
	return Diff{root.Struct()}, err
}

func (s Diff) String() string {
	str, _ := text.Marshal(0xc9601ec89a6aa066, s.Struct)
	return str
}

func (s Diff) Added() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasAdded() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Diff) SetAdded(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAdded sets the added field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewAdded(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Diff) Removed() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasRemoved() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Diff) SetRemoved(v StatInfo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRemoved sets the removed field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewRemoved(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Diff) Ignored() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(2)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasIgnored() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Diff) SetIgnored(v StatInfo_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewIgnored sets the ignored field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewIgnored(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Diff) Missing() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(3)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasMissing() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Diff) SetMissing(v StatInfo_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMissing sets the missing field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewMissing(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Diff) Moved() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(4)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMoved() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Diff) SetMoved(v DiffPair_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMoved sets the moved field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMoved(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Diff) Merged() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(5)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMerged() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Diff) SetMerged(v DiffPair_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewMerged sets the merged field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMerged(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Diff) Conflict() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(6)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasConflict() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Diff) SetConflict(v DiffPair_List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewConflict sets the conflict field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewConflict(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

// Diff_List is a list of Diff.
type Diff_List struct{ capnp.List }

// NewDiff creates a new list of Diff.
func NewDiff_List(s *capnp.Segment, sz int32) (Diff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return Diff_List{l}, err
}

func (s Diff_List) At(i int) Diff { return Diff{s.List.Struct(i)} }

func (s Diff_List) Set(i int, v Diff) error { return s.List.SetStruct(i, v.Struct) }

func (s Diff_List) String() string {
	str, _ := text.MarshalList(0xc9601ec89a6aa066, s.List)
	return str
}

// Diff_Promise is a wrapper for a Diff promised by a client call.
type Diff_Promise struct{ *capnp.Pipeline }

func (p Diff_Promise) Struct() (Diff, error) {
	s, err := p.Pipeline.Struct()
	return Diff{s}, err
}

// A folder that a remote is allowed to access
type RemoteFolder struct{ capnp.Struct }

// RemoteFolder_TypeID is the unique identifier for the type RemoteFolder.
const RemoteFolder_TypeID = 0x8ed051e9369ac720

func NewRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RemoteFolder{st}, err
}

func NewRootRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RemoteFolder{st}, err
}

func ReadRootRemoteFolder(msg *capnp.Message) (RemoteFolder, error) {
	root, err := msg.RootPtr()
	return RemoteFolder{root.Struct()}, err
}

func (s RemoteFolder) String() string {
	str, _ := text.Marshal(0x8ed051e9369ac720, s.Struct)
	return str
}

func (s RemoteFolder) Folder() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RemoteFolder) HasFolder() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RemoteFolder) FolderBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RemoteFolder) SetFolder(v string) error {
	return s.Struct.SetText(0, v)
}

// RemoteFolder_List is a list of RemoteFolder.
type RemoteFolder_List struct{ capnp.List }

// NewRemoteFolder creates a new list of RemoteFolder.
func NewRemoteFolder_List(s *capnp.Segment, sz int32) (RemoteFolder_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RemoteFolder_List{l}, err
}

func (s RemoteFolder_List) At(i int) RemoteFolder { return RemoteFolder{s.List.Struct(i)} }

func (s RemoteFolder_List) Set(i int, v RemoteFolder) error { return s.List.SetStruct(i, v.Struct) }

func (s RemoteFolder_List) String() string {
	str, _ := text.MarshalList(0x8ed051e9369ac720, s.List)
	return str
}

// RemoteFolder_Promise is a wrapper for a RemoteFolder promised by a client call.
type RemoteFolder_Promise struct{ *capnp.Pipeline }

func (p RemoteFolder_Promise) Struct() (RemoteFolder, error) {
	s, err := p.Pipeline.Struct()
	return RemoteFolder{s}, err
}

type LocateResult struct{ capnp.Struct }

// LocateResult_TypeID is the unique identifier for the type LocateResult.
const LocateResult_TypeID = 0xd95473f6f8a89a69

func NewLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func NewRootLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func ReadRootLocateResult(msg *capnp.Message) (LocateResult, error) {
	root, err := msg.RootPtr()
	return LocateResult{root.Struct()}, err
}

func (s LocateResult) String() string {
	str, _ := text.Marshal(0xd95473f6f8a89a69, s.Struct)
	return str
}

func (s LocateResult) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocateResult) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LocateResult) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocateResult) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocateResult) Addr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LocateResult) HasAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LocateResult) AddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LocateResult) SetAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LocateResult) Mask() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s LocateResult) HasMask() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LocateResult) MaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s LocateResult) SetMask(v string) error {
	return s.Struct.SetText(2, v)
}

func (s LocateResult) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s LocateResult) HasFingerprint() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s LocateResult) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s LocateResult) SetFingerprint(v string) error {
	return s.Struct.SetText(3, v)
}

// LocateResult_List is a list of LocateResult.
type LocateResult_List struct{ capnp.List }

// NewLocateResult creates a new list of LocateResult.
func NewLocateResult_List(s *capnp.Segment, sz int32) (LocateResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return LocateResult_List{l}, err
}

func (s LocateResult_List) At(i int) LocateResult { return LocateResult{s.List.Struct(i)} }

func (s LocateResult_List) Set(i int, v LocateResult) error { return s.List.SetStruct(i, v.Struct) }

func (s LocateResult_List) String() string {
	str, _ := text.MarshalList(0xd95473f6f8a89a69, s.List)
	return str
}

// LocateResult_Promise is a wrapper for a LocateResult promised by a client call.
type LocateResult_Promise struct{ *capnp.Pipeline }

func (p LocateResult_Promise) Struct() (LocateResult, error) {
	s, err := p.Pipeline.Struct()
	return LocateResult{s}, err
}

// Info about our current user state
type Identity struct{ capnp.Struct }

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xd49a2570fb5a4342

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.RootPtr()
	return Identity{root.Struct()}, err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xd49a2570fb5a4342, s.Struct)
	return str
}

func (s Identity) CurrentUser() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Identity) HasCurrentUser() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Identity) CurrentUserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetCurrentUser(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Identity) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Identity) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Identity) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Identity) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Identity) HasFingerprint() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Identity) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetFingerprint(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Identity) IsOnline() bool {
	return s.Struct.Bit(0)
}

func (s Identity) SetIsOnline(v bool) {
	s.Struct.SetBit(0, v)
}

// Identity_List is a list of Identity.
type Identity_List struct{ capnp.List }

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Identity_List{l}, err
}

func (s Identity_List) At(i int) Identity { return Identity{s.List.Struct(i)} }

func (s Identity_List) Set(i int, v Identity) error { return s.List.SetStruct(i, v.Struct) }

func (s Identity_List) String() string {
	str, _ := text.MarshalList(0xd49a2570fb5a4342, s.List)
	return str
}

// Identity_Promise is a wrapper for a Identity promised by a client call.
type Identity_Promise struct{ *capnp.Pipeline }

func (p Identity_Promise) Struct() (Identity, error) {
	s, err := p.Pipeline.Struct()
	return Identity{s}, err
}

type MountOptions struct{ capnp.Struct }

// MountOptions_TypeID is the unique identifier for the type MountOptions.
const MountOptions_TypeID = 0xbc4d5c31427dc498

func NewMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MountOptions{st}, err
}

func NewRootMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MountOptions{st}, err
}

func ReadRootMountOptions(msg *capnp.Message) (MountOptions, error) {
	root, err := msg.RootPtr()
	return MountOptions{root.Struct()}, err
}

func (s MountOptions) String() string {
	str, _ := text.Marshal(0xbc4d5c31427dc498, s.Struct)
	return str
}

func (s MountOptions) ReadOnly() bool {
	return s.Struct.Bit(0)
}

func (s MountOptions) SetReadOnly(v bool) {
	s.Struct.SetBit(0, v)
}

func (s MountOptions) RootPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MountOptions) HasRootPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MountOptions) RootPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MountOptions) SetRootPath(v string) error {
	return s.Struct.SetText(0, v)
}

// MountOptions_List is a list of MountOptions.
type MountOptions_List struct{ capnp.List }

// NewMountOptions creates a new list of MountOptions.
func NewMountOptions_List(s *capnp.Segment, sz int32) (MountOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MountOptions_List{l}, err
}

func (s MountOptions_List) At(i int) MountOptions { return MountOptions{s.List.Struct(i)} }

func (s MountOptions_List) Set(i int, v MountOptions) error { return s.List.SetStruct(i, v.Struct) }

func (s MountOptions_List) String() string {
	str, _ := text.MarshalList(0xbc4d5c31427dc498, s.List)
	return str
}

// MountOptions_Promise is a wrapper for a MountOptions promised by a client call.
type MountOptions_Promise struct{ *capnp.Pipeline }

func (p MountOptions_Promise) Struct() (MountOptions, error) {
	s, err := p.Pipeline.Struct()
	return MountOptions{s}, err
}

// Info a remote peer we might sync with
type Remote struct{ capnp.Struct }

// Remote_TypeID is the unique identifier for the type Remote.
const Remote_TypeID = 0xbe71bb7b0ed4539a

func NewRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Remote{st}, err
}

func NewRootRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Remote{st}, err
}

func ReadRootRemote(msg *capnp.Message) (Remote, error) {
	root, err := msg.RootPtr()
	return Remote{root.Struct()}, err
}

func (s Remote) String() string {
	str, _ := text.Marshal(0xbe71bb7b0ed4539a, s.Struct)
	return str
}

func (s Remote) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Remote) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Remote) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Remote) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Remote) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Remote) HasFingerprint() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Remote) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Remote) SetFingerprint(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Remote) Folders() (RemoteFolder_List, error) {
	p, err := s.Struct.Ptr(2)
	return RemoteFolder_List{List: p.List()}, err
}

func (s Remote) HasFolders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Remote) SetFolders(v RemoteFolder_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated RemoteFolder_List, preferring placement in s's segment.
func (s Remote) NewFolders(n int32) (RemoteFolder_List, error) {
	l, err := NewRemoteFolder_List(s.Struct.Segment(), n)
	if err != nil {
		return RemoteFolder_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Remote) AcceptAutoUpdates() bool {
	return s.Struct.Bit(0)
}

func (s Remote) SetAcceptAutoUpdates(v bool) {
	s.Struct.SetBit(0, v)
}

// Remote_List is a list of Remote.
type Remote_List struct{ capnp.List }

// NewRemote creates a new list of Remote.
func NewRemote_List(s *capnp.Segment, sz int32) (Remote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Remote_List{l}, err
}

func (s Remote_List) At(i int) Remote { return Remote{s.List.Struct(i)} }

func (s Remote_List) Set(i int, v Remote) error { return s.List.SetStruct(i, v.Struct) }

func (s Remote_List) String() string {
	str, _ := text.MarshalList(0xbe71bb7b0ed4539a, s.List)
	return str
}

// Remote_Promise is a wrapper for a Remote promised by a client call.
type Remote_Promise struct{ *capnp.Pipeline }

func (p Remote_Promise) Struct() (Remote, error) {
	s, err := p.Pipeline.Struct()
	return Remote{s}, err
}

// net status of a remote
type RemoteStatus struct{ capnp.Struct }

// RemoteStatus_TypeID is the unique identifier for the type RemoteStatus.
const RemoteStatus_TypeID = 0xa9e401c52756826a

func NewRemoteStatus(s *capnp.Segment) (RemoteStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RemoteStatus{st}, err
}

func NewRootRemoteStatus(s *capnp.Segment) (RemoteStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RemoteStatus{st}, err
}

func ReadRootRemoteStatus(msg *capnp.Message) (RemoteStatus, error) {
	root, err := msg.RootPtr()
	return RemoteStatus{root.Struct()}, err
}

func (s RemoteStatus) String() string {
	str, _ := text.Marshal(0xa9e401c52756826a, s.Struct)
	return str
}

func (s RemoteStatus) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s RemoteStatus) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RemoteStatus) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s RemoteStatus) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RemoteStatus) LastSeen() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s RemoteStatus) HasLastSeen() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RemoteStatus) LastSeenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s RemoteStatus) SetLastSeen(v string) error {
	return s.Struct.SetText(1, v)
}

func (s RemoteStatus) RoundtripMs() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s RemoteStatus) SetRoundtripMs(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s RemoteStatus) Error() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s RemoteStatus) HasError() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RemoteStatus) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s RemoteStatus) SetError(v string) error {
	return s.Struct.SetText(2, v)
}

func (s RemoteStatus) Authenticated() bool {
	return s.Struct.Bit(32)
}

func (s RemoteStatus) SetAuthenticated(v bool) {
	s.Struct.SetBit(32, v)
}

// RemoteStatus_List is a list of RemoteStatus.
type RemoteStatus_List struct{ capnp.List }

// NewRemoteStatus creates a new list of RemoteStatus.
func NewRemoteStatus_List(s *capnp.Segment, sz int32) (RemoteStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return RemoteStatus_List{l}, err
}

func (s RemoteStatus_List) At(i int) RemoteStatus { return RemoteStatus{s.List.Struct(i)} }

func (s RemoteStatus_List) Set(i int, v RemoteStatus) error { return s.List.SetStruct(i, v.Struct) }

func (s RemoteStatus_List) String() string {
	str, _ := text.MarshalList(0xa9e401c52756826a, s.List)
	return str
}

// RemoteStatus_Promise is a wrapper for a RemoteStatus promised by a client call.
type RemoteStatus_Promise struct{ *capnp.Pipeline }

func (p RemoteStatus_Promise) Struct() (RemoteStatus, error) {
	s, err := p.Pipeline.Struct()
	return RemoteStatus{s}, err
}

func (p RemoteStatus_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

// A single item that was killed by the gc
type GarbageItem struct{ capnp.Struct }

// GarbageItem_TypeID is the unique identifier for the type GarbageItem.
const GarbageItem_TypeID = 0xecb10f87fbe0d6c5

func NewGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func NewRootGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func ReadRootGarbageItem(msg *capnp.Message) (GarbageItem, error) {
	root, err := msg.RootPtr()
	return GarbageItem{root.Struct()}, err
}

func (s GarbageItem) String() string {
	str, _ := text.Marshal(0xecb10f87fbe0d6c5, s.Struct)
	return str
}

func (s GarbageItem) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GarbageItem) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GarbageItem) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GarbageItem) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GarbageItem) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s GarbageItem) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GarbageItem) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s GarbageItem) Owner() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GarbageItem) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GarbageItem) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GarbageItem) SetOwner(v string) error {
	return s.Struct.SetText(2, v)
}

// GarbageItem_List is a list of GarbageItem.
type GarbageItem_List struct{ capnp.List }

// NewGarbageItem creates a new list of GarbageItem.
func NewGarbageItem_List(s *capnp.Segment, sz int32) (GarbageItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return GarbageItem_List{l}, err
}

func (s GarbageItem_List) At(i int) GarbageItem { return GarbageItem{s.List.Struct(i)} }

func (s GarbageItem_List) Set(i int, v GarbageItem) error { return s.List.SetStruct(i, v.Struct) }

func (s GarbageItem_List) String() string {
	str, _ := text.MarshalList(0xecb10f87fbe0d6c5, s.List)
	return str
}

// GarbageItem_Promise is a wrapper for a GarbageItem promised by a client call.
type GarbageItem_Promise struct{ *capnp.Pipeline }

func (p GarbageItem_Promise) Struct() (GarbageItem, error) {
	s, err := p.Pipeline.Struct()
	return GarbageItem{s}, err
}

type Version struct{ capnp.Struct }

// Version_TypeID is the unique identifier for the type Version.
const Version_TypeID = 0xe1b522247fc407ad

func NewVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func NewRootVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func ReadRootVersion(msg *capnp.Message) (Version, error) {
	root, err := msg.RootPtr()
	return Version{root.Struct()}, err
}

func (s Version) String() string {
	str, _ := text.Marshal(0xe1b522247fc407ad, s.Struct)
	return str
}

func (s Version) ServerVersion() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Version) HasServerVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Version) ServerVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Version) SetServerVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Version) ServerRev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Version) HasServerRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Version) ServerRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Version) SetServerRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Version) BackendVersion() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Version) HasBackendVersion() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Version) BackendVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Version) SetBackendVersion(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Version) BackendRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Version) HasBackendRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Version) BackendRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Version) SetBackendRev(v string) error {
	return s.Struct.SetText(3, v)
}

// Version_List is a list of Version.
type Version_List struct{ capnp.List }

// NewVersion creates a new list of Version.
func NewVersion_List(s *capnp.Segment, sz int32) (Version_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Version_List{l}, err
}

func (s Version_List) At(i int) Version { return Version{s.List.Struct(i)} }

func (s Version_List) Set(i int, v Version) error { return s.List.SetStruct(i, v.Struct) }

func (s Version_List) String() string {
	str, _ := text.MarshalList(0xe1b522247fc407ad, s.List)
	return str
}

// Version_Promise is a wrapper for a Version promised by a client call.
type Version_Promise struct{ *capnp.Pipeline }

func (p Version_Promise) Struct() (Version, error) {
	s, err := p.Pipeline.Struct()
	return Version{s}, err
}

type ExplicitPin struct{ capnp.Struct }

// ExplicitPin_TypeID is the unique identifier for the type ExplicitPin.
const ExplicitPin_TypeID = 0xdc876697979bc7e5

func NewExplicitPin(s *capnp.Segment) (ExplicitPin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExplicitPin{st}, err
}

func NewRootExplicitPin(s *capnp.Segment) (ExplicitPin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExplicitPin{st}, err
}

func ReadRootExplicitPin(msg *capnp.Message) (ExplicitPin, error) {
	root, err := msg.RootPtr()
	return ExplicitPin{root.Struct()}, err
}

func (s ExplicitPin) String() string {
	str, _ := text.Marshal(0xdc876697979bc7e5, s.Struct)
	return str
}

func (s ExplicitPin) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ExplicitPin) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ExplicitPin) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ExplicitPin) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ExplicitPin) Commit() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ExplicitPin) HasCommit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ExplicitPin) CommitBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ExplicitPin) SetCommit(v string) error {
	return s.Struct.SetText(1, v)
}

// ExplicitPin_List is a list of ExplicitPin.
type ExplicitPin_List struct{ capnp.List }

// NewExplicitPin creates a new list of ExplicitPin.
func NewExplicitPin_List(s *capnp.Segment, sz int32) (ExplicitPin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ExplicitPin_List{l}, err
}

func (s ExplicitPin_List) At(i int) ExplicitPin { return ExplicitPin{s.List.Struct(i)} }

func (s ExplicitPin_List) Set(i int, v ExplicitPin) error { return s.List.SetStruct(i, v.Struct) }

func (s ExplicitPin_List) String() string {
	str, _ := text.MarshalList(0xdc876697979bc7e5, s.List)
	return str
}

// ExplicitPin_Promise is a wrapper for a ExplicitPin promised by a client call.
type ExplicitPin_Promise struct{ *capnp.Pipeline }

func (p ExplicitPin_Promise) Struct() (ExplicitPin, error) {
	s, err := p.Pipeline.Struct()
	return ExplicitPin{s}, err
}

type FsTabEntry struct{ capnp.Struct }

// FsTabEntry_TypeID is the unique identifier for the type FsTabEntry.
const FsTabEntry_TypeID = 0xf7da25d3ead6c0d3

func NewFsTabEntry(s *capnp.Segment) (FsTabEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FsTabEntry{st}, err
}

func NewRootFsTabEntry(s *capnp.Segment) (FsTabEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FsTabEntry{st}, err
}

func ReadRootFsTabEntry(msg *capnp.Message) (FsTabEntry, error) {
	root, err := msg.RootPtr()
	return FsTabEntry{root.Struct()}, err
}

func (s FsTabEntry) String() string {
	str, _ := text.Marshal(0xf7da25d3ead6c0d3, s.Struct)
	return str
}

func (s FsTabEntry) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FsTabEntry) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FsTabEntry) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FsTabEntry) HasPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FsTabEntry) ReadOnly() bool {
	return s.Struct.Bit(0)
}

func (s FsTabEntry) SetReadOnly(v bool) {
	s.Struct.SetBit(0, v)
}

func (s FsTabEntry) Root() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s FsTabEntry) HasRoot() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetRoot(v string) error {
	return s.Struct.SetText(2, v)
}

func (s FsTabEntry) Active() bool {
	return s.Struct.Bit(1)
}

func (s FsTabEntry) SetActive(v bool) {
	s.Struct.SetBit(1, v)
}

// FsTabEntry_List is a list of FsTabEntry.
type FsTabEntry_List struct{ capnp.List }

// NewFsTabEntry creates a new list of FsTabEntry.
func NewFsTabEntry_List(s *capnp.Segment, sz int32) (FsTabEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return FsTabEntry_List{l}, err
}

func (s FsTabEntry_List) At(i int) FsTabEntry { return FsTabEntry{s.List.Struct(i)} }

func (s FsTabEntry_List) Set(i int, v FsTabEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s FsTabEntry_List) String() string {
	str, _ := text.MarshalList(0xf7da25d3ead6c0d3, s.List)
	return str
}

// FsTabEntry_Promise is a wrapper for a FsTabEntry promised by a client call.
type FsTabEntry_Promise struct{ *capnp.Pipeline }

func (p FsTabEntry_Promise) Struct() (FsTabEntry, error) {
	s, err := p.Pipeline.Struct()
	return FsTabEntry{s}, err
}

type FS struct{ Client capnp.Client }

// FS_TypeID is the unique identifier for the type FS.
const FS_TypeID = 0xe2b3585db47cd4f9

func (c FS) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Tar(ctx context.Context, params func(FS_tar_Params) error, opts ...capnp.CallOption) FS_tar_Results_Promise {
	if c.Client == nil {
		return FS_tar_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "tar",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_tar_Params{Struct: s}) }
	}
	return FS_tar_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) DeletedNodes(ctx context.Context, params func(FS_deletedNodes_Params) error, opts ...capnp.CallOption) FS_deletedNodes_Results_Promise {
	if c.Client == nil {
		return FS_deletedNodes_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "deletedNodes",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_deletedNodes_Params{Struct: s}) }
	}
	return FS_deletedNodes_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Undelete(ctx context.Context, params func(FS_undelete_Params) error, opts ...capnp.CallOption) FS_undelete_Results_Promise {
	if c.Client == nil {
		return FS_undelete_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "undelete",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_undelete_Params{Struct: s}) }
	}
	return FS_undelete_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type FS_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	Tar(FS_tar) error

	DeletedNodes(FS_deletedNodes) error

	Undelete(FS_undelete) error
}

func FS_ServerToClient(s FS_Server) FS {
	c, _ := s.(server.Closer)
	return FS{Client: server.New(FS_Methods(nil, s), c)}
}

func FS_Methods(methods []server.Method, s FS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 16)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "tar",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_tar{c, opts, FS_tar_Params{Struct: p}, FS_tar_Results{Struct: r}}
			return s.Tar(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "deletedNodes",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_deletedNodes{c, opts, FS_deletedNodes_Params{Struct: p}, FS_deletedNodes_Results{Struct: r}}
			return s.DeletedNodes(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "undelete",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_undelete{c, opts, FS_undelete_Params{Struct: p}, FS_undelete_Results{Struct: r}}
			return s.Undelete(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// FS_stage holds the arguments for a server call to FS.stage.
type FS_stage struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stage_Params
	Results FS_stage_Results
}

// FS_list holds the arguments for a server call to FS.list.
type FS_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_list_Params
	Results FS_list_Results
}

// FS_cat holds the arguments for a server call to FS.cat.
type FS_cat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_cat_Params
	Results FS_cat_Results
}

// FS_mkdir holds the arguments for a server call to FS.mkdir.
type FS_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_mkdir_Params
	Results FS_mkdir_Results
}

// FS_remove holds the arguments for a server call to FS.remove.
type FS_remove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_remove_Params
	Results FS_remove_Results
}

// FS_move holds the arguments for a server call to FS.move.
type FS_move struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_move_Params
	Results FS_move_Results
}

// FS_copy holds the arguments for a server call to FS.copy.
type FS_copy struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_copy_Params
	Results FS_copy_Results
}

// FS_pin holds the arguments for a server call to FS.pin.
type FS_pin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_pin_Params
	Results FS_pin_Results
}

// FS_unpin holds the arguments for a server call to FS.unpin.
type FS_unpin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_unpin_Params
	Results FS_unpin_Results
}

// FS_stat holds the arguments for a server call to FS.stat.
type FS_stat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stat_Params
	Results FS_stat_Results
}

// FS_garbageCollect holds the arguments for a server call to FS.garbageCollect.
type FS_garbageCollect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_garbageCollect_Params
	Results FS_garbageCollect_Results
}

// FS_touch holds the arguments for a server call to FS.touch.
type FS_touch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_touch_Params
	Results FS_touch_Results
}

// FS_exists holds the arguments for a server call to FS.exists.
type FS_exists struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_exists_Params
	Results FS_exists_Results
}

// FS_tar holds the arguments for a server call to FS.tar.
type FS_tar struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_tar_Params
	Results FS_tar_Results
}

// FS_deletedNodes holds the arguments for a server call to FS.deletedNodes.
type FS_deletedNodes struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_deletedNodes_Params
	Results FS_deletedNodes_Results
}

// FS_undelete holds the arguments for a server call to FS.undelete.
type FS_undelete struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_undelete_Params
	Results FS_undelete_Results
}

type FS_stage_Params struct{ capnp.Struct }

// FS_stage_Params_TypeID is the unique identifier for the type FS_stage_Params.
const FS_stage_Params_TypeID = 0x9ba7a818970a029c

func NewFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func NewRootFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func ReadRootFS_stage_Params(msg *capnp.Message) (FS_stage_Params, error) {
	root, err := msg.RootPtr()
	return FS_stage_Params{root.Struct()}, err
}

func (s FS_stage_Params) String() string {
	str, _ := text.Marshal(0x9ba7a818970a029c, s.Struct)
	return str
}

func (s FS_stage_Params) LocalPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stage_Params) HasLocalPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) LocalPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetLocalPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_stage_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_stage_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_stage_Params_List is a list of FS_stage_Params.
type FS_stage_Params_List struct{ capnp.List }

// NewFS_stage_Params creates a new list of FS_stage_Params.
func NewFS_stage_Params_List(s *capnp.Segment, sz int32) (FS_stage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_stage_Params_List{l}, err
}

func (s FS_stage_Params_List) At(i int) FS_stage_Params { return FS_stage_Params{s.List.Struct(i)} }

func (s FS_stage_Params_List) Set(i int, v FS_stage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Params_List) String() string {
	str, _ := text.MarshalList(0x9ba7a818970a029c, s.List)
	return str
}

// FS_stage_Params_Promise is a wrapper for a FS_stage_Params promised by a client call.
type FS_stage_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Params_Promise) Struct() (FS_stage_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Params{s}, err
}

type FS_stage_Results struct{ capnp.Struct }

// FS_stage_Results_TypeID is the unique identifier for the type FS_stage_Results.
const FS_stage_Results_TypeID = 0x884238694e8b8d88

func NewFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func NewRootFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func ReadRootFS_stage_Results(msg *capnp.Message) (FS_stage_Results, error) {
	root, err := msg.RootPtr()
	return FS_stage_Results{root.Struct()}, err
}

func (s FS_stage_Results) String() string {
	str, _ := text.Marshal(0x884238694e8b8d88, s.Struct)
	return str
}

// FS_stage_Results_List is a list of FS_stage_Results.
type FS_stage_Results_List struct{ capnp.List }

// NewFS_stage_Results creates a new list of FS_stage_Results.
func NewFS_stage_Results_List(s *capnp.Segment, sz int32) (FS_stage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_stage_Results_List{l}, err
}

func (s FS_stage_Results_List) At(i int) FS_stage_Results { return FS_stage_Results{s.List.Struct(i)} }

func (s FS_stage_Results_List) Set(i int, v FS_stage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Results_List) String() string {
	str, _ := text.MarshalList(0x884238694e8b8d88, s.List)
	return str
}

// FS_stage_Results_Promise is a wrapper for a FS_stage_Results promised by a client call.
type FS_stage_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Results_Promise) Struct() (FS_stage_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Results{s}, err
}

type FS_list_Params struct{ capnp.Struct }

// FS_list_Params_TypeID is the unique identifier for the type FS_list_Params.
const FS_list_Params_TypeID = 0xfd86771dd5950237

func NewFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func NewRootFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func ReadRootFS_list_Params(msg *capnp.Message) (FS_list_Params, error) {
	root, err := msg.RootPtr()
	return FS_list_Params{root.Struct()}, err
}

func (s FS_list_Params) String() string {
	str, _ := text.Marshal(0xfd86771dd5950237, s.Struct)
	return str
}

func (s FS_list_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_list_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_list_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_list_Params) MaxDepth() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_list_Params) SetMaxDepth(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_list_Params_List is a list of FS_list_Params.
type FS_list_Params_List struct{ capnp.List }

// NewFS_list_Params creates a new list of FS_list_Params.
func NewFS_list_Params_List(s *capnp.Segment, sz int32) (FS_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_list_Params_List{l}, err
}

func (s FS_list_Params_List) At(i int) FS_list_Params { return FS_list_Params{s.List.Struct(i)} }

func (s FS_list_Params_List) Set(i int, v FS_list_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_list_Params_List) String() string {
	str, _ := text.MarshalList(0xfd86771dd5950237, s.List)
	return str
}

// FS_list_Params_Promise is a wrapper for a FS_list_Params promised by a client call.
type FS_list_Params_Promise struct{ *capnp.Pipeline }

func (p FS_list_Params_Promise) Struct() (FS_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Params{s}, err
}

type FS_list_Results struct{ capnp.Struct }

// FS_list_Results_TypeID is the unique identifier for the type FS_list_Results.
const FS_list_Results_TypeID = 0xe92935bf20cc2856

func NewFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func NewRootFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func ReadRootFS_list_Results(msg *capnp.Message) (FS_list_Results, error) {
	root, err := msg.RootPtr()
	return FS_list_Results{root.Struct()}, err
}

func (s FS_list_Results) String() string {
	str, _ := text.Marshal(0xe92935bf20cc2856, s.Struct)
	return str
}

func (s FS_list_Results) Entries() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_list_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Results) SetEntries(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_list_Results) NewEntries(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_list_Results_List is a list of FS_list_Results.
type FS_list_Results_List struct{ capnp.List }

// NewFS_list_Results creates a new list of FS_list_Results.
func NewFS_list_Results_List(s *capnp.Segment, sz int32) (FS_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_list_Results_List{l}, err
}

func (s FS_list_Results_List) At(i int) FS_list_Results { return FS_list_Results{s.List.Struct(i)} }

func (s FS_list_Results_List) Set(i int, v FS_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_list_Results_List) String() string {
	str, _ := text.MarshalList(0xe92935bf20cc2856, s.List)
	return str
}

// FS_list_Results_Promise is a wrapper for a FS_list_Results promised by a client call.
type FS_list_Results_Promise struct{ *capnp.Pipeline }

func (p FS_list_Results_Promise) Struct() (FS_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Results{s}, err
}

type FS_cat_Params struct{ capnp.Struct }

// FS_cat_Params_TypeID is the unique identifier for the type FS_cat_Params.
const FS_cat_Params_TypeID = 0xa9095b4cff1e5634

func NewFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func NewRootFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func ReadRootFS_cat_Params(msg *capnp.Message) (FS_cat_Params, error) {
	root, err := msg.RootPtr()
	return FS_cat_Params{root.Struct()}, err
}

func (s FS_cat_Params) String() string {
	str, _ := text.Marshal(0xa9095b4cff1e5634, s.Struct)
	return str
}

func (s FS_cat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Params_List is a list of FS_cat_Params.
type FS_cat_Params_List struct{ capnp.List }

// NewFS_cat_Params creates a new list of FS_cat_Params.
func NewFS_cat_Params_List(s *capnp.Segment, sz int32) (FS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Params_List{l}, err
}

func (s FS_cat_Params_List) At(i int) FS_cat_Params { return FS_cat_Params{s.List.Struct(i)} }

func (s FS_cat_Params_List) Set(i int, v FS_cat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Params_List) String() string {
	str, _ := text.MarshalList(0xa9095b4cff1e5634, s.List)
	return str
}

// FS_cat_Params_Promise is a wrapper for a FS_cat_Params promised by a client call.
type FS_cat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Params_Promise) Struct() (FS_cat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Params{s}, err
}

type FS_cat_Results struct{ capnp.Struct }

// FS_cat_Results_TypeID is the unique identifier for the type FS_cat_Results.
const FS_cat_Results_TypeID = 0x9fe8d2cd92c27a38

func NewFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func NewRootFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func ReadRootFS_cat_Results(msg *capnp.Message) (FS_cat_Results, error) {
	root, err := msg.RootPtr()
	return FS_cat_Results{root.Struct()}, err
}

func (s FS_cat_Results) String() string {
	str, _ := text.Marshal(0x9fe8d2cd92c27a38, s.Struct)
	return str
}

func (s FS_cat_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_cat_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_cat_Results_List is a list of FS_cat_Results.
type FS_cat_Results_List struct{ capnp.List }

// NewFS_cat_Results creates a new list of FS_cat_Results.
func NewFS_cat_Results_List(s *capnp.Segment, sz int32) (FS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_cat_Results_List{l}, err
}

func (s FS_cat_Results_List) At(i int) FS_cat_Results { return FS_cat_Results{s.List.Struct(i)} }

func (s FS_cat_Results_List) Set(i int, v FS_cat_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Results_List) String() string {
	str, _ := text.MarshalList(0x9fe8d2cd92c27a38, s.List)
	return str
}

// FS_cat_Results_Promise is a wrapper for a FS_cat_Results promised by a client call.
type FS_cat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Results_Promise) Struct() (FS_cat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Results{s}, err
}

type FS_mkdir_Params struct{ capnp.Struct }

// FS_mkdir_Params_TypeID is the unique identifier for the type FS_mkdir_Params.
const FS_mkdir_Params_TypeID = 0xb030fc18cb3b0e61

func NewFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func NewRootFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func ReadRootFS_mkdir_Params(msg *capnp.Message) (FS_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Params{root.Struct()}, err
}

func (s FS_mkdir_Params) String() string {
	str, _ := text.Marshal(0xb030fc18cb3b0e61, s.Struct)
	return str
}

func (s FS_mkdir_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_mkdir_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_mkdir_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_mkdir_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_mkdir_Params) CreateParents() bool {
	return s.Struct.Bit(0)
}

func (s FS_mkdir_Params) SetCreateParents(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_mkdir_Params_List is a list of FS_mkdir_Params.
type FS_mkdir_Params_List struct{ capnp.List }

// NewFS_mkdir_Params creates a new list of FS_mkdir_Params.
func NewFS_mkdir_Params_List(s *capnp.Segment, sz int32) (FS_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_mkdir_Params_List{l}, err
}

func (s FS_mkdir_Params_List) At(i int) FS_mkdir_Params { return FS_mkdir_Params{s.List.Struct(i)} }

func (s FS_mkdir_Params_List) Set(i int, v FS_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xb030fc18cb3b0e61, s.List)
	return str
}

// FS_mkdir_Params_Promise is a wrapper for a FS_mkdir_Params promised by a client call.
type FS_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Params_Promise) Struct() (FS_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Params{s}, err
}

type FS_mkdir_Results struct{ capnp.Struct }

// FS_mkdir_Results_TypeID is the unique identifier for the type FS_mkdir_Results.
const FS_mkdir_Results_TypeID = 0xf3243256580294f3

func NewFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func NewRootFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func ReadRootFS_mkdir_Results(msg *capnp.Message) (FS_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Results{root.Struct()}, err
}

func (s FS_mkdir_Results) String() string {
	str, _ := text.Marshal(0xf3243256580294f3, s.Struct)
	return str
}

// FS_mkdir_Results_List is a list of FS_mkdir_Results.
type FS_mkdir_Results_List struct{ capnp.List }

// NewFS_mkdir_Results creates a new list of FS_mkdir_Results.
func NewFS_mkdir_Results_List(s *capnp.Segment, sz int32) (FS_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_mkdir_Results_List{l}, err
}

func (s FS_mkdir_Results_List) At(i int) FS_mkdir_Results { return FS_mkdir_Results{s.List.Struct(i)} }

func (s FS_mkdir_Results_List) Set(i int, v FS_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xf3243256580294f3, s.List)
	return str
}

// FS_mkdir_Results_Promise is a wrapper for a FS_mkdir_Results promised by a client call.
type FS_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Results_Promise) Struct() (FS_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Results{s}, err
}

type FS_remove_Params struct{ capnp.Struct }

// FS_remove_Params_TypeID is the unique identifier for the type FS_remove_Params.
const FS_remove_Params_TypeID = 0xa99c622e110c1203

func NewFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func NewRootFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func ReadRootFS_remove_Params(msg *capnp.Message) (FS_remove_Params, error) {
	root, err := msg.RootPtr()
	return FS_remove_Params{root.Struct()}, err
}

func (s FS_remove_Params) String() string {
	str, _ := text.Marshal(0xa99c622e110c1203, s.Struct)
	return str
}

func (s FS_remove_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_remove_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_remove_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_remove_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_remove_Params_List is a list of FS_remove_Params.
type FS_remove_Params_List struct{ capnp.List }

// NewFS_remove_Params creates a new list of FS_remove_Params.
func NewFS_remove_Params_List(s *capnp.Segment, sz int32) (FS_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_remove_Params_List{l}, err
}

func (s FS_remove_Params_List) At(i int) FS_remove_Params { return FS_remove_Params{s.List.Struct(i)} }

func (s FS_remove_Params_List) Set(i int, v FS_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xa99c622e110c1203, s.List)
	return str
}

// FS_remove_Params_Promise is a wrapper for a FS_remove_Params promised by a client call.
type FS_remove_Params_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Params_Promise) Struct() (FS_remove_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Params{s}, err
}

type FS_remove_Results struct{ capnp.Struct }

// FS_remove_Results_TypeID is the unique identifier for the type FS_remove_Results.
const FS_remove_Results_TypeID = 0xc9b3a8263f6853d7

func NewFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func NewRootFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func ReadRootFS_remove_Results(msg *capnp.Message) (FS_remove_Results, error) {
	root, err := msg.RootPtr()
	return FS_remove_Results{root.Struct()}, err
}

func (s FS_remove_Results) String() string {
	str, _ := text.Marshal(0xc9b3a8263f6853d7, s.Struct)
	return str
}

// FS_remove_Results_List is a list of FS_remove_Results.
type FS_remove_Results_List struct{ capnp.List }

// NewFS_remove_Results creates a new list of FS_remove_Results.
func NewFS_remove_Results_List(s *capnp.Segment, sz int32) (FS_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_remove_Results_List{l}, err
}

func (s FS_remove_Results_List) At(i int) FS_remove_Results {
	return FS_remove_Results{s.List.Struct(i)}
}

func (s FS_remove_Results_List) Set(i int, v FS_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xc9b3a8263f6853d7, s.List)
	return str
}

// FS_remove_Results_Promise is a wrapper for a FS_remove_Results promised by a client call.
type FS_remove_Results_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Results_Promise) Struct() (FS_remove_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Results{s}, err
}

type FS_move_Params struct{ capnp.Struct }

// FS_move_Params_TypeID is the unique identifier for the type FS_move_Params.
const FS_move_Params_TypeID = 0xb76f3dc1dcf4fdf1

func NewFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func NewRootFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func ReadRootFS_move_Params(msg *capnp.Message) (FS_move_Params, error) {
	root, err := msg.RootPtr()
	return FS_move_Params{root.Struct()}, err
}

func (s FS_move_Params) String() string {
	str, _ := text.Marshal(0xb76f3dc1dcf4fdf1, s.Struct)
	return str
}

func (s FS_move_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_move_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_move_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_move_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_move_Params_List is a list of FS_move_Params.
type FS_move_Params_List struct{ capnp.List }

// NewFS_move_Params creates a new list of FS_move_Params.
func NewFS_move_Params_List(s *capnp.Segment, sz int32) (FS_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_move_Params_List{l}, err
}

func (s FS_move_Params_List) At(i int) FS_move_Params { return FS_move_Params{s.List.Struct(i)} }

func (s FS_move_Params_List) Set(i int, v FS_move_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_move_Params_List) String() string {
	str, _ := text.MarshalList(0xb76f3dc1dcf4fdf1, s.List)
	return str
}

// FS_move_Params_Promise is a wrapper for a FS_move_Params promised by a client call.
type FS_move_Params_Promise struct{ *capnp.Pipeline }

func (p FS_move_Params_Promise) Struct() (FS_move_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Params{s}, err
}

type FS_move_Results struct{ capnp.Struct }

// FS_move_Results_TypeID is the unique identifier for the type FS_move_Results.
const FS_move_Results_TypeID = 0xab89c6fc9bf26f2a

func NewFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func NewRootFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func ReadRootFS_move_Results(msg *capnp.Message) (FS_move_Results, error) {
	root, err := msg.RootPtr()
	return FS_move_Results{root.Struct()}, err
}

func (s FS_move_Results) String() string {
	str, _ := text.Marshal(0xab89c6fc9bf26f2a, s.Struct)
	return str
}

// FS_move_Results_List is a list of FS_move_Results.
type FS_move_Results_List struct{ capnp.List }

// NewFS_move_Results creates a new list of FS_move_Results.
func NewFS_move_Results_List(s *capnp.Segment, sz int32) (FS_move_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_move_Results_List{l}, err
}

func (s FS_move_Results_List) At(i int) FS_move_Results { return FS_move_Results{s.List.Struct(i)} }

func (s FS_move_Results_List) Set(i int, v FS_move_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_move_Results_List) String() string {
	str, _ := text.MarshalList(0xab89c6fc9bf26f2a, s.List)
	return str
}

// FS_move_Results_Promise is a wrapper for a FS_move_Results promised by a client call.
type FS_move_Results_Promise struct{ *capnp.Pipeline }

func (p FS_move_Results_Promise) Struct() (FS_move_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Results{s}, err
}

type FS_copy_Params struct{ capnp.Struct }

// FS_copy_Params_TypeID is the unique identifier for the type FS_copy_Params.
const FS_copy_Params_TypeID = 0xc0dd66dedad92ef8

func NewFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func NewRootFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func ReadRootFS_copy_Params(msg *capnp.Message) (FS_copy_Params, error) {
	root, err := msg.RootPtr()
	return FS_copy_Params{root.Struct()}, err
}

func (s FS_copy_Params) String() string {
	str, _ := text.Marshal(0xc0dd66dedad92ef8, s.Struct)
	return str
}

func (s FS_copy_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_copy_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_copy_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_copy_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_copy_Params_List is a list of FS_copy_Params.
type FS_copy_Params_List struct{ capnp.List }

// NewFS_copy_Params creates a new list of FS_copy_Params.
func NewFS_copy_Params_List(s *capnp.Segment, sz int32) (FS_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_copy_Params_List{l}, err
}

func (s FS_copy_Params_List) At(i int) FS_copy_Params { return FS_copy_Params{s.List.Struct(i)} }

func (s FS_copy_Params_List) Set(i int, v FS_copy_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_copy_Params_List) String() string {
	str, _ := text.MarshalList(0xc0dd66dedad92ef8, s.List)
	return str
}

// FS_copy_Params_Promise is a wrapper for a FS_copy_Params promised by a client call.
type FS_copy_Params_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Params_Promise) Struct() (FS_copy_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Params{s}, err
}

type FS_copy_Results struct{ capnp.Struct }

// FS_copy_Results_TypeID is the unique identifier for the type FS_copy_Results.
const FS_copy_Results_TypeID = 0xccf4f28c8951edf6

func NewFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func NewRootFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func ReadRootFS_copy_Results(msg *capnp.Message) (FS_copy_Results, error) {
	root, err := msg.RootPtr()
	return FS_copy_Results{root.Struct()}, err
}

func (s FS_copy_Results) String() string {
	str, _ := text.Marshal(0xccf4f28c8951edf6, s.Struct)
	return str
}

// FS_copy_Results_List is a list of FS_copy_Results.
type FS_copy_Results_List struct{ capnp.List }

// NewFS_copy_Results creates a new list of FS_copy_Results.
func NewFS_copy_Results_List(s *capnp.Segment, sz int32) (FS_copy_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_copy_Results_List{l}, err
}

func (s FS_copy_Results_List) At(i int) FS_copy_Results { return FS_copy_Results{s.List.Struct(i)} }

func (s FS_copy_Results_List) Set(i int, v FS_copy_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_copy_Results_List) String() string {
	str, _ := text.MarshalList(0xccf4f28c8951edf6, s.List)
	return str
}

// FS_copy_Results_Promise is a wrapper for a FS_copy_Results promised by a client call.
type FS_copy_Results_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Results_Promise) Struct() (FS_copy_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Results{s}, err
}

type FS_pin_Params struct{ capnp.Struct }

// FS_pin_Params_TypeID is the unique identifier for the type FS_pin_Params.
const FS_pin_Params_TypeID = 0x9efc974402f016f6

func NewFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func NewRootFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func ReadRootFS_pin_Params(msg *capnp.Message) (FS_pin_Params, error) {
	root, err := msg.RootPtr()
	return FS_pin_Params{root.Struct()}, err
}

func (s FS_pin_Params) String() string {
	str, _ := text.Marshal(0x9efc974402f016f6, s.Struct)
	return str
}

func (s FS_pin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_pin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_pin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_pin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_pin_Params_List is a list of FS_pin_Params.
type FS_pin_Params_List struct{ capnp.List }

// NewFS_pin_Params creates a new list of FS_pin_Params.
func NewFS_pin_Params_List(s *capnp.Segment, sz int32) (FS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_pin_Params_List{l}, err
}

func (s FS_pin_Params_List) At(i int) FS_pin_Params { return FS_pin_Params{s.List.Struct(i)} }

func (s FS_pin_Params_List) Set(i int, v FS_pin_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Params_List) String() string {
	str, _ := text.MarshalList(0x9efc974402f016f6, s.List)
	return str
}

// FS_pin_Params_Promise is a wrapper for a FS_pin_Params promised by a client call.
type FS_pin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Params_Promise) Struct() (FS_pin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Params{s}, err
}

type FS_pin_Results struct{ capnp.Struct }

// FS_pin_Results_TypeID is the unique identifier for the type FS_pin_Results.
const FS_pin_Results_TypeID = 0xdba8e30445acc3f4

func NewFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func NewRootFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func ReadRootFS_pin_Results(msg *capnp.Message) (FS_pin_Results, error) {
	root, err := msg.RootPtr()
	return FS_pin_Results{root.Struct()}, err
}

func (s FS_pin_Results) String() string {
	str, _ := text.Marshal(0xdba8e30445acc3f4, s.Struct)
	return str
}

// FS_pin_Results_List is a list of FS_pin_Results.
type FS_pin_Results_List struct{ capnp.List }

// NewFS_pin_Results creates a new list of FS_pin_Results.
func NewFS_pin_Results_List(s *capnp.Segment, sz int32) (FS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_pin_Results_List{l}, err
}

func (s FS_pin_Results_List) At(i int) FS_pin_Results { return FS_pin_Results{s.List.Struct(i)} }

func (s FS_pin_Results_List) Set(i int, v FS_pin_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Results_List) String() string {
	str, _ := text.MarshalList(0xdba8e30445acc3f4, s.List)
	return str
}

// FS_pin_Results_Promise is a wrapper for a FS_pin_Results promised by a client call.
type FS_pin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Results_Promise) Struct() (FS_pin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Results{s}, err
}

type FS_unpin_Params struct{ capnp.Struct }

// FS_unpin_Params_TypeID is the unique identifier for the type FS_unpin_Params.
const FS_unpin_Params_TypeID = 0xc9558eac26b0f15e

func NewFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func NewRootFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func ReadRootFS_unpin_Params(msg *capnp.Message) (FS_unpin_Params, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Params{root.Struct()}, err
}

func (s FS_unpin_Params) String() string {
	str, _ := text.Marshal(0xc9558eac26b0f15e, s.Struct)
	return str
}

func (s FS_unpin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_unpin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_unpin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_unpin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_unpin_Params_List is a list of FS_unpin_Params.
type FS_unpin_Params_List struct{ capnp.List }

// NewFS_unpin_Params creates a new list of FS_unpin_Params.
func NewFS_unpin_Params_List(s *capnp.Segment, sz int32) (FS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_unpin_Params_List{l}, err
}

func (s FS_unpin_Params_List) At(i int) FS_unpin_Params { return FS_unpin_Params{s.List.Struct(i)} }

func (s FS_unpin_Params_List) Set(i int, v FS_unpin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Params_List) String() string {
	str, _ := text.MarshalList(0xc9558eac26b0f15e, s.List)
	return str
}

// FS_unpin_Params_Promise is a wrapper for a FS_unpin_Params promised by a client call.
type FS_unpin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Params_Promise) Struct() (FS_unpin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Params{s}, err
}

type FS_unpin_Results struct{ capnp.Struct }

// FS_unpin_Results_TypeID is the unique identifier for the type FS_unpin_Results.
const FS_unpin_Results_TypeID = 0x87c49e302c6516f8

func NewFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func NewRootFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func ReadRootFS_unpin_Results(msg *capnp.Message) (FS_unpin_Results, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Results{root.Struct()}, err
}

func (s FS_unpin_Results) String() string {
	str, _ := text.Marshal(0x87c49e302c6516f8, s.Struct)
	return str
}

// FS_unpin_Results_List is a list of FS_unpin_Results.
type FS_unpin_Results_List struct{ capnp.List }

// NewFS_unpin_Results creates a new list of FS_unpin_Results.
func NewFS_unpin_Results_List(s *capnp.Segment, sz int32) (FS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_unpin_Results_List{l}, err
}

func (s FS_unpin_Results_List) At(i int) FS_unpin_Results { return FS_unpin_Results{s.List.Struct(i)} }

func (s FS_unpin_Results_List) Set(i int, v FS_unpin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Results_List) String() string {
	str, _ := text.MarshalList(0x87c49e302c6516f8, s.List)
	return str
}

// FS_unpin_Results_Promise is a wrapper for a FS_unpin_Results promised by a client call.
type FS_unpin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Results_Promise) Struct() (FS_unpin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Results{s}, err
}

type FS_stat_Params struct{ capnp.Struct }

// FS_stat_Params_TypeID is the unique identifier for the type FS_stat_Params.
const FS_stat_Params_TypeID = 0xd78724f6fbd5c5c5

func NewFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func NewRootFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func ReadRootFS_stat_Params(msg *capnp.Message) (FS_stat_Params, error) {
	root, err := msg.RootPtr()
	return FS_stat_Params{root.Struct()}, err
}

func (s FS_stat_Params) String() string {
	str, _ := text.Marshal(0xd78724f6fbd5c5c5, s.Struct)
	return str
}

func (s FS_stat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_stat_Params_List is a list of FS_stat_Params.
type FS_stat_Params_List struct{ capnp.List }

// NewFS_stat_Params creates a new list of FS_stat_Params.
func NewFS_stat_Params_List(s *capnp.Segment, sz int32) (FS_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Params_List{l}, err
}

func (s FS_stat_Params_List) At(i int) FS_stat_Params { return FS_stat_Params{s.List.Struct(i)} }

func (s FS_stat_Params_List) Set(i int, v FS_stat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_stat_Params_List) String() string {
	str, _ := text.MarshalList(0xd78724f6fbd5c5c5, s.List)
	return str
}

// FS_stat_Params_Promise is a wrapper for a FS_stat_Params promised by a client call.
type FS_stat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Params_Promise) Struct() (FS_stat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Params{s}, err
}

type FS_stat_Results struct{ capnp.Struct }

// FS_stat_Results_TypeID is the unique identifier for the type FS_stat_Results.
const FS_stat_Results_TypeID = 0xbdb679ec96303b53

func NewFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func NewRootFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func ReadRootFS_stat_Results(msg *capnp.Message) (FS_stat_Results, error) {
	root, err := msg.RootPtr()
	return FS_stat_Results{root.Struct()}, err
}

func (s FS_stat_Results) String() string {
	str, _ := text.Marshal(0xbdb679ec96303b53, s.Struct)
	return str
}

func (s FS_stat_Results) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s FS_stat_Results) HasInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Results) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s FS_stat_Results) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FS_stat_Results_List is a list of FS_stat_Results.
type FS_stat_Results_List struct{ capnp.List }

// NewFS_stat_Results creates a new list of FS_stat_Results.
func NewFS_stat_Results_List(s *capnp.Segment, sz int32) (FS_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Results_List{l}, err
}

func (s FS_stat_Results_List) At(i int) FS_stat_Results { return FS_stat_Results{s.List.Struct(i)} }

func (s FS_stat_Results_List) Set(i int, v FS_stat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stat_Results_List) String() string {
	str, _ := text.MarshalList(0xbdb679ec96303b53, s.List)
	return str
}

// FS_stat_Results_Promise is a wrapper for a FS_stat_Results promised by a client call.
type FS_stat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Results_Promise) Struct() (FS_stat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Results{s}, err
}

func (p FS_stat_Results_Promise) Info() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FS_garbageCollect_Params struct{ capnp.Struct }

// FS_garbageCollect_Params_TypeID is the unique identifier for the type FS_garbageCollect_Params.
const FS_garbageCollect_Params_TypeID = 0x9cb31f0ede4f5117

func NewFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func NewRootFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func ReadRootFS_garbageCollect_Params(msg *capnp.Message) (FS_garbageCollect_Params, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Params{root.Struct()}, err
}

func (s FS_garbageCollect_Params) String() string {
	str, _ := text.Marshal(0x9cb31f0ede4f5117, s.Struct)
	return str
}

func (s FS_garbageCollect_Params) Aggressive() bool {
	return s.Struct.Bit(0)
}

func (s FS_garbageCollect_Params) SetAggressive(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_garbageCollect_Params_List is a list of FS_garbageCollect_Params.
type FS_garbageCollect_Params_List struct{ capnp.List }

// NewFS_garbageCollect_Params creates a new list of FS_garbageCollect_Params.
func NewFS_garbageCollect_Params_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_garbageCollect_Params_List{l}, err
}

func (s FS_garbageCollect_Params_List) At(i int) FS_garbageCollect_Params {
	return FS_garbageCollect_Params{s.List.Struct(i)}
}

func (s FS_garbageCollect_Params_List) Set(i int, v FS_garbageCollect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Params_List) String() string {
	str, _ := text.MarshalList(0x9cb31f0ede4f5117, s.List)
	return str
}

// FS_garbageCollect_Params_Promise is a wrapper for a FS_garbageCollect_Params promised by a client call.
type FS_garbageCollect_Params_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Params_Promise) Struct() (FS_garbageCollect_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Params{s}, err
}

type FS_garbageCollect_Results struct{ capnp.Struct }

// FS_garbageCollect_Results_TypeID is the unique identifier for the type FS_garbageCollect_Results.
const FS_garbageCollect_Results_TypeID = 0xbb5ea9a03dfddab3

func NewFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func NewRootFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func ReadRootFS_garbageCollect_Results(msg *capnp.Message) (FS_garbageCollect_Results, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Results{root.Struct()}, err
}

func (s FS_garbageCollect_Results) String() string {
	str, _ := text.Marshal(0xbb5ea9a03dfddab3, s.Struct)
	return str
}

func (s FS_garbageCollect_Results) Freed() (GarbageItem_List, error) {
	p, err := s.Struct.Ptr(0)
	return GarbageItem_List{List: p.List()}, err
}

func (s FS_garbageCollect_Results) HasFreed() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_garbageCollect_Results) SetFreed(v GarbageItem_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFreed sets the freed field to a newly
// allocated GarbageItem_List, preferring placement in s's segment.
func (s FS_garbageCollect_Results) NewFreed(n int32) (GarbageItem_List, error) {
	l, err := NewGarbageItem_List(s.Struct.Segment(), n)
	if err != nil {
		return GarbageItem_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_garbageCollect_Results_List is a list of FS_garbageCollect_Results.
type FS_garbageCollect_Results_List struct{ capnp.List }

// NewFS_garbageCollect_Results creates a new list of FS_garbageCollect_Results.
func NewFS_garbageCollect_Results_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_garbageCollect_Results_List{l}, err
}

func (s FS_garbageCollect_Results_List) At(i int) FS_garbageCollect_Results {
	return FS_garbageCollect_Results{s.List.Struct(i)}
}

func (s FS_garbageCollect_Results_List) Set(i int, v FS_garbageCollect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Results_List) String() string {
	str, _ := text.MarshalList(0xbb5ea9a03dfddab3, s.List)
	return str
}

// FS_garbageCollect_Results_Promise is a wrapper for a FS_garbageCollect_Results promised by a client call.
type FS_garbageCollect_Results_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Results_Promise) Struct() (FS_garbageCollect_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Results{s}, err
}

type FS_touch_Params struct{ capnp.Struct }

// FS_touch_Params_TypeID is the unique identifier for the type FS_touch_Params.
const FS_touch_Params_TypeID = 0xab1e48e58e4c69af

func NewFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func NewRootFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func ReadRootFS_touch_Params(msg *capnp.Message) (FS_touch_Params, error) {
	root, err := msg.RootPtr()
	return FS_touch_Params{root.Struct()}, err
}

func (s FS_touch_Params) String() string {
	str, _ := text.Marshal(0xab1e48e58e4c69af, s.Struct)
	return str
}

func (s FS_touch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_touch_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_touch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_touch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_touch_Params_List is a list of FS_touch_Params.
type FS_touch_Params_List struct{ capnp.List }

// NewFS_touch_Params creates a new list of FS_touch_Params.
func NewFS_touch_Params_List(s *capnp.Segment, sz int32) (FS_touch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_touch_Params_List{l}, err
}

func (s FS_touch_Params_List) At(i int) FS_touch_Params { return FS_touch_Params{s.List.Struct(i)} }

func (s FS_touch_Params_List) Set(i int, v FS_touch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Params_List) String() string {
	str, _ := text.MarshalList(0xab1e48e58e4c69af, s.List)
	return str
}

// FS_touch_Params_Promise is a wrapper for a FS_touch_Params promised by a client call.
type FS_touch_Params_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Params_Promise) Struct() (FS_touch_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Params{s}, err
}

type FS_touch_Results struct{ capnp.Struct }

// FS_touch_Results_TypeID is the unique identifier for the type FS_touch_Results.
const FS_touch_Results_TypeID = 0xbf1cf3d6e654e947

func NewFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func NewRootFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func ReadRootFS_touch_Results(msg *capnp.Message) (FS_touch_Results, error) {
	root, err := msg.RootPtr()
	return FS_touch_Results{root.Struct()}, err
}

func (s FS_touch_Results) String() string {
	str, _ := text.Marshal(0xbf1cf3d6e654e947, s.Struct)
	return str
}

// FS_touch_Results_List is a list of FS_touch_Results.
type FS_touch_Results_List struct{ capnp.List }

// NewFS_touch_Results creates a new list of FS_touch_Results.
func NewFS_touch_Results_List(s *capnp.Segment, sz int32) (FS_touch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_touch_Results_List{l}, err
}

func (s FS_touch_Results_List) At(i int) FS_touch_Results { return FS_touch_Results{s.List.Struct(i)} }

func (s FS_touch_Results_List) Set(i int, v FS_touch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Results_List) String() string {
	str, _ := text.MarshalList(0xbf1cf3d6e654e947, s.List)
	return str
}

// FS_touch_Results_Promise is a wrapper for a FS_touch_Results promised by a client call.
type FS_touch_Results_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Results_Promise) Struct() (FS_touch_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Results{s}, err
}

type FS_exists_Params struct{ capnp.Struct }

// FS_exists_Params_TypeID is the unique identifier for the type FS_exists_Params.
const FS_exists_Params_TypeID = 0xdb27e243a580d2f0

func NewFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func NewRootFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func ReadRootFS_exists_Params(msg *capnp.Message) (FS_exists_Params, error) {
	root, err := msg.RootPtr()
	return FS_exists_Params{root.Struct()}, err
}

func (s FS_exists_Params) String() string {
	str, _ := text.Marshal(0xdb27e243a580d2f0, s.Struct)
	return str
}

func (s FS_exists_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_exists_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_exists_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_exists_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_exists_Params_List is a list of FS_exists_Params.
type FS_exists_Params_List struct{ capnp.List }

// NewFS_exists_Params creates a new list of FS_exists_Params.
func NewFS_exists_Params_List(s *capnp.Segment, sz int32) (FS_exists_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_exists_Params_List{l}, err
}

func (s FS_exists_Params_List) At(i int) FS_exists_Params { return FS_exists_Params{s.List.Struct(i)} }

func (s FS_exists_Params_List) Set(i int, v FS_exists_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Params_List) String() string {
	str, _ := text.MarshalList(0xdb27e243a580d2f0, s.List)
	return str
}

// FS_exists_Params_Promise is a wrapper for a FS_exists_Params promised by a client call.
type FS_exists_Params_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Params_Promise) Struct() (FS_exists_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Params{s}, err
}

type FS_exists_Results struct{ capnp.Struct }

// FS_exists_Results_TypeID is the unique identifier for the type FS_exists_Results.
const FS_exists_Results_TypeID = 0xa5753d28ca12d2ba

func NewFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func NewRootFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func ReadRootFS_exists_Results(msg *capnp.Message) (FS_exists_Results, error) {
	root, err := msg.RootPtr()
	return FS_exists_Results{root.Struct()}, err
}

func (s FS_exists_Results) String() string {
	str, _ := text.Marshal(0xa5753d28ca12d2ba, s.Struct)
	return str
}

func (s FS_exists_Results) Exists() bool {
	return s.Struct.Bit(0)
}

func (s FS_exists_Results) SetExists(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_exists_Results_List is a list of FS_exists_Results.
type FS_exists_Results_List struct{ capnp.List }

// NewFS_exists_Results creates a new list of FS_exists_Results.
func NewFS_exists_Results_List(s *capnp.Segment, sz int32) (FS_exists_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_exists_Results_List{l}, err
}

func (s FS_exists_Results_List) At(i int) FS_exists_Results {
	return FS_exists_Results{s.List.Struct(i)}
}

func (s FS_exists_Results_List) Set(i int, v FS_exists_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Results_List) String() string {
	str, _ := text.MarshalList(0xa5753d28ca12d2ba, s.List)
	return str
}

// FS_exists_Results_Promise is a wrapper for a FS_exists_Results promised by a client call.
type FS_exists_Results_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Results_Promise) Struct() (FS_exists_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Results{s}, err
}

type FS_tar_Params struct{ capnp.Struct }

// FS_tar_Params_TypeID is the unique identifier for the type FS_tar_Params.
const FS_tar_Params_TypeID = 0x958ea6b33d4e8cbb

func NewFS_tar_Params(s *capnp.Segment) (FS_tar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_tar_Params{st}, err
}

func NewRootFS_tar_Params(s *capnp.Segment) (FS_tar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_tar_Params{st}, err
}

func ReadRootFS_tar_Params(msg *capnp.Message) (FS_tar_Params, error) {
	root, err := msg.RootPtr()
	return FS_tar_Params{root.Struct()}, err
}

func (s FS_tar_Params) String() string {
	str, _ := text.Marshal(0x958ea6b33d4e8cbb, s.Struct)
	return str
}

func (s FS_tar_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_tar_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_tar_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_tar_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_tar_Params_List is a list of FS_tar_Params.
type FS_tar_Params_List struct{ capnp.List }

// NewFS_tar_Params creates a new list of FS_tar_Params.
func NewFS_tar_Params_List(s *capnp.Segment, sz int32) (FS_tar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_tar_Params_List{l}, err
}

func (s FS_tar_Params_List) At(i int) FS_tar_Params { return FS_tar_Params{s.List.Struct(i)} }

func (s FS_tar_Params_List) Set(i int, v FS_tar_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_tar_Params_List) String() string {
	str, _ := text.MarshalList(0x958ea6b33d4e8cbb, s.List)
	return str
}

// FS_tar_Params_Promise is a wrapper for a FS_tar_Params promised by a client call.
type FS_tar_Params_Promise struct{ *capnp.Pipeline }

func (p FS_tar_Params_Promise) Struct() (FS_tar_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_tar_Params{s}, err
}

type FS_tar_Results struct{ capnp.Struct }

// FS_tar_Results_TypeID is the unique identifier for the type FS_tar_Results.
const FS_tar_Results_TypeID = 0x809d4e73dc197b11

func NewFS_tar_Results(s *capnp.Segment) (FS_tar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_tar_Results{st}, err
}

func NewRootFS_tar_Results(s *capnp.Segment) (FS_tar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_tar_Results{st}, err
}

func ReadRootFS_tar_Results(msg *capnp.Message) (FS_tar_Results, error) {
	root, err := msg.RootPtr()
	return FS_tar_Results{root.Struct()}, err
}

func (s FS_tar_Results) String() string {
	str, _ := text.Marshal(0x809d4e73dc197b11, s.Struct)
	return str
}

func (s FS_tar_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_tar_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_tar_Results_List is a list of FS_tar_Results.
type FS_tar_Results_List struct{ capnp.List }

// NewFS_tar_Results creates a new list of FS_tar_Results.
func NewFS_tar_Results_List(s *capnp.Segment, sz int32) (FS_tar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_tar_Results_List{l}, err
}

func (s FS_tar_Results_List) At(i int) FS_tar_Results { return FS_tar_Results{s.List.Struct(i)} }

func (s FS_tar_Results_List) Set(i int, v FS_tar_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_tar_Results_List) String() string {
	str, _ := text.MarshalList(0x809d4e73dc197b11, s.List)
	return str
}

// FS_tar_Results_Promise is a wrapper for a FS_tar_Results promised by a client call.
type FS_tar_Results_Promise struct{ *capnp.Pipeline }

func (p FS_tar_Results_Promise) Struct() (FS_tar_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_tar_Results{s}, err
}

type FS_deletedNodes_Params struct{ capnp.Struct }

// FS_deletedNodes_Params_TypeID is the unique identifier for the type FS_deletedNodes_Params.
const FS_deletedNodes_Params_TypeID = 0xa17d6c20c2174ec8

func NewFS_deletedNodes_Params(s *capnp.Segment) (FS_deletedNodes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_deletedNodes_Params{st}, err
}

func NewRootFS_deletedNodes_Params(s *capnp.Segment) (FS_deletedNodes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_deletedNodes_Params{st}, err
}

func ReadRootFS_deletedNodes_Params(msg *capnp.Message) (FS_deletedNodes_Params, error) {
	root, err := msg.RootPtr()
	return FS_deletedNodes_Params{root.Struct()}, err
}

func (s FS_deletedNodes_Params) String() string {
	str, _ := text.Marshal(0xa17d6c20c2174ec8, s.Struct)
	return str
}

func (s FS_deletedNodes_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_deletedNodes_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_deletedNodes_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_deletedNodes_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_deletedNodes_Params_List is a list of FS_deletedNodes_Params.
type FS_deletedNodes_Params_List struct{ capnp.List }

// NewFS_deletedNodes_Params creates a new list of FS_deletedNodes_Params.
func NewFS_deletedNodes_Params_List(s *capnp.Segment, sz int32) (FS_deletedNodes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_deletedNodes_Params_List{l}, err
}

func (s FS_deletedNodes_Params_List) At(i int) FS_deletedNodes_Params {
	return FS_deletedNodes_Params{s.List.Struct(i)}
}

func (s FS_deletedNodes_Params_List) Set(i int, v FS_deletedNodes_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_deletedNodes_Params_List) String() string {
	str, _ := text.MarshalList(0xa17d6c20c2174ec8, s.List)
	return str
}

// FS_deletedNodes_Params_Promise is a wrapper for a FS_deletedNodes_Params promised by a client call.
type FS_deletedNodes_Params_Promise struct{ *capnp.Pipeline }

func (p FS_deletedNodes_Params_Promise) Struct() (FS_deletedNodes_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_deletedNodes_Params{s}, err
}

type FS_deletedNodes_Results struct{ capnp.Struct }

// FS_deletedNodes_Results_TypeID is the unique identifier for the type FS_deletedNodes_Results.
const FS_deletedNodes_Results_TypeID = 0xa78946d2af827622

func NewFS_deletedNodes_Results(s *capnp.Segment) (FS_deletedNodes_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_deletedNodes_Results{st}, err
}

func NewRootFS_deletedNodes_Results(s *capnp.Segment) (FS_deletedNodes_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_deletedNodes_Results{st}, err
}

func ReadRootFS_deletedNodes_Results(msg *capnp.Message) (FS_deletedNodes_Results, error) {
	root, err := msg.RootPtr()
	return FS_deletedNodes_Results{root.Struct()}, err
}

func (s FS_deletedNodes_Results) String() string {
	str, _ := text.Marshal(0xa78946d2af827622, s.Struct)
	return str
}

func (s FS_deletedNodes_Results) Nodes() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_deletedNodes_Results) HasNodes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_deletedNodes_Results) SetNodes(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_deletedNodes_Results) NewNodes(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_deletedNodes_Results_List is a list of FS_deletedNodes_Results.
type FS_deletedNodes_Results_List struct{ capnp.List }

// NewFS_deletedNodes_Results creates a new list of FS_deletedNodes_Results.
func NewFS_deletedNodes_Results_List(s *capnp.Segment, sz int32) (FS_deletedNodes_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_deletedNodes_Results_List{l}, err
}

func (s FS_deletedNodes_Results_List) At(i int) FS_deletedNodes_Results {
	return FS_deletedNodes_Results{s.List.Struct(i)}
}

func (s FS_deletedNodes_Results_List) Set(i int, v FS_deletedNodes_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_deletedNodes_Results_List) String() string {
	str, _ := text.MarshalList(0xa78946d2af827622, s.List)
	return str
}

// FS_deletedNodes_Results_Promise is a wrapper for a FS_deletedNodes_Results promised by a client call.
type FS_deletedNodes_Results_Promise struct{ *capnp.Pipeline }

func (p FS_deletedNodes_Results_Promise) Struct() (FS_deletedNodes_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_deletedNodes_Results{s}, err
}

type FS_undelete_Params struct{ capnp.Struct }

// FS_undelete_Params_TypeID is the unique identifier for the type FS_undelete_Params.
const FS_undelete_Params_TypeID = 0x946963af664858d0

func NewFS_undelete_Params(s *capnp.Segment) (FS_undelete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_undelete_Params{st}, err
}

func NewRootFS_undelete_Params(s *capnp.Segment) (FS_undelete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_undelete_Params{st}, err
}

func ReadRootFS_undelete_Params(msg *capnp.Message) (FS_undelete_Params, error) {
	root, err := msg.RootPtr()
	return FS_undelete_Params{root.Struct()}, err
}

func (s FS_undelete_Params) String() string {
	str, _ := text.Marshal(0x946963af664858d0, s.Struct)
	return str
}

func (s FS_undelete_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_undelete_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_undelete_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_undelete_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_undelete_Params_List is a list of FS_undelete_Params.
type FS_undelete_Params_List struct{ capnp.List }

// NewFS_undelete_Params creates a new list of FS_undelete_Params.
func NewFS_undelete_Params_List(s *capnp.Segment, sz int32) (FS_undelete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_undelete_Params_List{l}, err
}

func (s FS_undelete_Params_List) At(i int) FS_undelete_Params {
	return FS_undelete_Params{s.List.Struct(i)}
}

func (s FS_undelete_Params_List) Set(i int, v FS_undelete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_undelete_Params_List) String() string {
	str, _ := text.MarshalList(0x946963af664858d0, s.List)
	return str
}

// FS_undelete_Params_Promise is a wrapper for a FS_undelete_Params promised by a client call.
type FS_undelete_Params_Promise struct{ *capnp.Pipeline }

func (p FS_undelete_Params_Promise) Struct() (FS_undelete_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_undelete_Params{s}, err
}

type FS_undelete_Results struct{ capnp.Struct }

// FS_undelete_Results_TypeID is the unique identifier for the type FS_undelete_Results.
const FS_undelete_Results_TypeID = 0x95a8b7d1ed942672

func NewFS_undelete_Results(s *capnp.Segment) (FS_undelete_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_undelete_Results{st}, err
}

func NewRootFS_undelete_Results(s *capnp.Segment) (FS_undelete_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_undelete_Results{st}, err
}

func ReadRootFS_undelete_Results(msg *capnp.Message) (FS_undelete_Results, error) {
	root, err := msg.RootPtr()
	return FS_undelete_Results{root.Struct()}, err
}

func (s FS_undelete_Results) String() string {
	str, _ := text.Marshal(0x95a8b7d1ed942672, s.Struct)
	return str
}

// FS_undelete_Results_List is a list of FS_undelete_Results.
type FS_undelete_Results_List struct{ capnp.List }

// NewFS_undelete_Results creates a new list of FS_undelete_Results.
func NewFS_undelete_Results_List(s *capnp.Segment, sz int32) (FS_undelete_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_undelete_Results_List{l}, err
}

func (s FS_undelete_Results_List) At(i int) FS_undelete_Results {
	return FS_undelete_Results{s.List.Struct(i)}
}

func (s FS_undelete_Results_List) Set(i int, v FS_undelete_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_undelete_Results_List) String() string {
	str, _ := text.MarshalList(0x95a8b7d1ed942672, s.List)
	return str
}

// FS_undelete_Results_Promise is a wrapper for a FS_undelete_Results promised by a client call.
type FS_undelete_Results_Promise struct{ *capnp.Pipeline }

func (p FS_undelete_Results_Promise) Struct() (FS_undelete_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_undelete_Results{s}, err
}

type VCS struct{ Client capnp.Client }

// VCS_TypeID is the unique identifier for the type VCS.
const VCS_TypeID = 0xfaa680ef12c44624

func (c VCS) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) CommitInfo(ctx context.Context, params func(VCS_commitInfo_Params) error, opts ...capnp.CallOption) VCS_commitInfo_Results_Promise {
	if c.Client == nil {
		return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commitInfo_Params{Struct: s}) }
	}
	return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type VCS_Server interface {
	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error

	CommitInfo(VCS_commitInfo) error
}

func VCS_ServerToClient(s VCS_Server) VCS {
	c, _ := s.(server.Closer)
	return VCS{Client: server.New(VCS_Methods(nil, s), c)}
}

func VCS_Methods(methods []server.Method, s VCS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 10)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commitInfo{c, opts, VCS_commitInfo_Params{Struct: p}, VCS_commitInfo_Results{Struct: r}}
			return s.CommitInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 1},
	})

	return methods
}

// VCS_log holds the arguments for a server call to VCS.log.
type VCS_log struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_log_Params
	Results VCS_log_Results
}

// VCS_commit holds the arguments for a server call to VCS.commit.
type VCS_commit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commit_Params
	Results VCS_commit_Results
}

// VCS_tag holds the arguments for a server call to VCS.tag.
type VCS_tag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_tag_Params
	Results VCS_tag_Results
}

// VCS_untag holds the arguments for a server call to VCS.untag.
type VCS_untag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_untag_Params
	Results VCS_untag_Results
}

// VCS_reset holds the arguments for a server call to VCS.reset.
type VCS_reset struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_reset_Params
	Results VCS_reset_Results
}

// VCS_history holds the arguments for a server call to VCS.history.
type VCS_history struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_history_Params
	Results VCS_history_Results
}

// VCS_makeDiff holds the arguments for a server call to VCS.makeDiff.
type VCS_makeDiff struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_makeDiff_Params
	Results VCS_makeDiff_Results
}

// VCS_sync holds the arguments for a server call to VCS.sync.
type VCS_sync struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_sync_Params
	Results VCS_sync_Results
}

// VCS_fetch holds the arguments for a server call to VCS.fetch.
type VCS_fetch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_fetch_Params
	Results VCS_fetch_Results
}

// VCS_commitInfo holds the arguments for a server call to VCS.commitInfo.
type VCS_commitInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commitInfo_Params
	Results VCS_commitInfo_Results
}

type VCS_log_Params struct{ capnp.Struct }

// VCS_log_Params_TypeID is the unique identifier for the type VCS_log_Params.
const VCS_log_Params_TypeID = 0xa4efd353c57d2b85

func NewVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func NewRootVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func ReadRootVCS_log_Params(msg *capnp.Message) (VCS_log_Params, error) {
	root, err := msg.RootPtr()
	return VCS_log_Params{root.Struct()}, err
}

func (s VCS_log_Params) String() string {
	str, _ := text.Marshal(0xa4efd353c57d2b85, s.Struct)
	return str
}

// VCS_log_Params_List is a list of VCS_log_Params.
type VCS_log_Params_List struct{ capnp.List }

// NewVCS_log_Params creates a new list of VCS_log_Params.
func NewVCS_log_Params_List(s *capnp.Segment, sz int32) (VCS_log_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_log_Params_List{l}, err
}

func (s VCS_log_Params_List) At(i int) VCS_log_Params { return VCS_log_Params{s.List.Struct(i)} }

func (s VCS_log_Params_List) Set(i int, v VCS_log_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_log_Params_List) String() string {
	str, _ := text.MarshalList(0xa4efd353c57d2b85, s.List)
	return str
}

// VCS_log_Params_Promise is a wrapper for a VCS_log_Params promised by a client call.
type VCS_log_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Params_Promise) Struct() (VCS_log_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Params{s}, err
}

type VCS_log_Results struct{ capnp.Struct }

// VCS_log_Results_TypeID is the unique identifier for the type VCS_log_Results.
const VCS_log_Results_TypeID = 0xf7250939585a23f6

func NewVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func NewRootVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func ReadRootVCS_log_Results(msg *capnp.Message) (VCS_log_Results, error) {
	root, err := msg.RootPtr()
	return VCS_log_Results{root.Struct()}, err
}

func (s VCS_log_Results) String() string {
	str, _ := text.Marshal(0xf7250939585a23f6, s.Struct)
	return str
}

func (s VCS_log_Results) Entries() (Commit_List, error) {
	p, err := s.Struct.Ptr(0)
	return Commit_List{List: p.List()}, err
}

func (s VCS_log_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_log_Results) SetEntries(v Commit_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Commit_List, preferring placement in s's segment.
func (s VCS_log_Results) NewEntries(n int32) (Commit_List, error) {
	l, err := NewCommit_List(s.Struct.Segment(), n)
	if err != nil {
		return Commit_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_log_Results_List is a list of VCS_log_Results.
type VCS_log_Results_List struct{ capnp.List }

// NewVCS_log_Results creates a new list of VCS_log_Results.
func NewVCS_log_Results_List(s *capnp.Segment, sz int32) (VCS_log_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_log_Results_List{l}, err
}

func (s VCS_log_Results_List) At(i int) VCS_log_Results { return VCS_log_Results{s.List.Struct(i)} }

func (s VCS_log_Results_List) Set(i int, v VCS_log_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_log_Results_List) String() string {
	str, _ := text.MarshalList(0xf7250939585a23f6, s.List)
	return str
}

// VCS_log_Results_Promise is a wrapper for a VCS_log_Results promised by a client call.
type VCS_log_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Results_Promise) Struct() (VCS_log_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Results{s}, err
}

type VCS_commit_Params struct{ capnp.Struct }

// VCS_commit_Params_TypeID is the unique identifier for the type VCS_commit_Params.
const VCS_commit_Params_TypeID = 0xd9459f2361338d96

func NewVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func NewRootVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func ReadRootVCS_commit_Params(msg *capnp.Message) (VCS_commit_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Params{root.Struct()}, err
}

func (s VCS_commit_Params) String() string {
	str, _ := text.Marshal(0xd9459f2361338d96, s.Struct)
	return str
}

func (s VCS_commit_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commit_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commit_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commit_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commit_Params_List is a list of VCS_commit_Params.
type VCS_commit_Params_List struct{ capnp.List }

// NewVCS_commit_Params creates a new list of VCS_commit_Params.
func NewVCS_commit_Params_List(s *capnp.Segment, sz int32) (VCS_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commit_Params_List{l}, err
}

func (s VCS_commit_Params_List) At(i int) VCS_commit_Params {
	return VCS_commit_Params{s.List.Struct(i)}
}

func (s VCS_commit_Params_List) Set(i int, v VCS_commit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Params_List) String() string {
	str, _ := text.MarshalList(0xd9459f2361338d96, s.List)
	return str
}

// VCS_commit_Params_Promise is a wrapper for a VCS_commit_Params promised by a client call.
type VCS_commit_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Params_Promise) Struct() (VCS_commit_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Params{s}, err
}

type VCS_commit_Results struct{ capnp.Struct }

// VCS_commit_Results_TypeID is the unique identifier for the type VCS_commit_Results.
const VCS_commit_Results_TypeID = 0xb7d0dd6b467e7539

func NewVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func NewRootVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func ReadRootVCS_commit_Results(msg *capnp.Message) (VCS_commit_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Results{root.Struct()}, err
}

func (s VCS_commit_Results) String() string {
	str, _ := text.Marshal(0xb7d0dd6b467e7539, s.Struct)
	return str
}

// VCS_commit_Results_List is a list of VCS_commit_Results.
type VCS_commit_Results_List struct{ capnp.List }

// NewVCS_commit_Results creates a new list of VCS_commit_Results.
func NewVCS_commit_Results_List(s *capnp.Segment, sz int32) (VCS_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_commit_Results_List{l}, err
}

func (s VCS_commit_Results_List) At(i int) VCS_commit_Results {
	return VCS_commit_Results{s.List.Struct(i)}
}

func (s VCS_commit_Results_List) Set(i int, v VCS_commit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Results_List) String() string {
	str, _ := text.MarshalList(0xb7d0dd6b467e7539, s.List)
	return str
}

// VCS_commit_Results_Promise is a wrapper for a VCS_commit_Results promised by a client call.
type VCS_commit_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Results_Promise) Struct() (VCS_commit_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Results{s}, err
}

type VCS_tag_Params struct{ capnp.Struct }

// VCS_tag_Params_TypeID is the unique identifier for the type VCS_tag_Params.
const VCS_tag_Params_TypeID = 0xa97d67096ee7d46d

func NewVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func NewRootVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func ReadRootVCS_tag_Params(msg *capnp.Message) (VCS_tag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Params{root.Struct()}, err
}

func (s VCS_tag_Params) String() string {
	str, _ := text.Marshal(0xa97d67096ee7d46d, s.Struct)
	return str
}

func (s VCS_tag_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_tag_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_tag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_tag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetTagName(v string) error {
	return s.Struct.SetText(1, v)
}

// VCS_tag_Params_List is a list of VCS_tag_Params.
type VCS_tag_Params_List struct{ capnp.List }

// NewVCS_tag_Params creates a new list of VCS_tag_Params.
func NewVCS_tag_Params_List(s *capnp.Segment, sz int32) (VCS_tag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VCS_tag_Params_List{l}, err
}

func (s VCS_tag_Params_List) At(i int) VCS_tag_Params { return VCS_tag_Params{s.List.Struct(i)} }

func (s VCS_tag_Params_List) Set(i int, v VCS_tag_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_tag_Params_List) String() string {
	str, _ := text.MarshalList(0xa97d67096ee7d46d, s.List)
	return str
}

// VCS_tag_Params_Promise is a wrapper for a VCS_tag_Params promised by a client call.
type VCS_tag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Params_Promise) Struct() (VCS_tag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Params{s}, err
}

type VCS_tag_Results struct{ capnp.Struct }

// VCS_tag_Results_TypeID is the unique identifier for the type VCS_tag_Results.
const VCS_tag_Results_TypeID = 0xbda949777c149f4b

func NewVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func NewRootVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func ReadRootVCS_tag_Results(msg *capnp.Message) (VCS_tag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Results{root.Struct()}, err
}

func (s VCS_tag_Results) String() string {
	str, _ := text.Marshal(0xbda949777c149f4b, s.Struct)
	return str
}

// VCS_tag_Results_List is a list of VCS_tag_Results.
type VCS_tag_Results_List struct{ capnp.List }

// NewVCS_tag_Results creates a new list of VCS_tag_Results.
func NewVCS_tag_Results_List(s *capnp.Segment, sz int32) (VCS_tag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_tag_Results_List{l}, err
}

func (s VCS_tag_Results_List) At(i int) VCS_tag_Results { return VCS_tag_Results{s.List.Struct(i)} }

func (s VCS_tag_Results_List) Set(i int, v VCS_tag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_tag_Results_List) String() string {
	str, _ := text.MarshalList(0xbda949777c149f4b, s.List)
	return str
}

// VCS_tag_Results_Promise is a wrapper for a VCS_tag_Results promised by a client call.
type VCS_tag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Results_Promise) Struct() (VCS_tag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Results{s}, err
}

type VCS_untag_Params struct{ capnp.Struct }

// VCS_untag_Params_TypeID is the unique identifier for the type VCS_untag_Params.
const VCS_untag_Params_TypeID = 0xf4d42db113af3a4b

func NewVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func NewRootVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func ReadRootVCS_untag_Params(msg *capnp.Message) (VCS_untag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Params{root.Struct()}, err
}

func (s VCS_untag_Params) String() string {
	str, _ := text.Marshal(0xf4d42db113af3a4b, s.Struct)
	return str
}

func (s VCS_untag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_untag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_untag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_untag_Params) SetTagName(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_untag_Params_List is a list of VCS_untag_Params.
type VCS_untag_Params_List struct{ capnp.List }

// NewVCS_untag_Params creates a new list of VCS_untag_Params.
func NewVCS_untag_Params_List(s *capnp.Segment, sz int32) (VCS_untag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_untag_Params_List{l}, err
}

func (s VCS_untag_Params_List) At(i int) VCS_untag_Params { return VCS_untag_Params{s.List.Struct(i)} }

func (s VCS_untag_Params_List) Set(i int, v VCS_untag_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Params_List) String() string {
	str, _ := text.MarshalList(0xf4d42db113af3a4b, s.List)
	return str
}

// VCS_untag_Params_Promise is a wrapper for a VCS_untag_Params promised by a client call.
type VCS_untag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Params_Promise) Struct() (VCS_untag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Params{s}, err
}

type VCS_untag_Results struct{ capnp.Struct }

// VCS_untag_Results_TypeID is the unique identifier for the type VCS_untag_Results.
const VCS_untag_Results_TypeID = 0xba0de490234c27af

func NewVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func NewRootVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func ReadRootVCS_untag_Results(msg *capnp.Message) (VCS_untag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Results{root.Struct()}, err
}

func (s VCS_untag_Results) String() string {
	str, _ := text.Marshal(0xba0de490234c27af, s.Struct)
	return str
}

// VCS_untag_Results_List is a list of VCS_untag_Results.
type VCS_untag_Results_List struct{ capnp.List }

// NewVCS_untag_Results creates a new list of VCS_untag_Results.
func NewVCS_untag_Results_List(s *capnp.Segment, sz int32) (VCS_untag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_untag_Results_List{l}, err
}

func (s VCS_untag_Results_List) At(i int) VCS_untag_Results {
	return VCS_untag_Results{s.List.Struct(i)}
}

func (s VCS_untag_Results_List) Set(i int, v VCS_untag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Results_List) String() string {
	str, _ := text.MarshalList(0xba0de490234c27af, s.List)
	return str
}

// VCS_untag_Results_Promise is a wrapper for a VCS_untag_Results promised by a client call.
type VCS_untag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Results_Promise) Struct() (VCS_untag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Results{s}, err
}

type VCS_reset_Params struct{ capnp.Struct }

// VCS_reset_Params_TypeID is the unique identifier for the type VCS_reset_Params.
const VCS_reset_Params_TypeID = 0xe71560d8bc06c6fd

func NewVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func NewRootVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func ReadRootVCS_reset_Params(msg *capnp.Message) (VCS_reset_Params, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Params{root.Struct()}, err
}

func (s VCS_reset_Params) String() string {
	str, _ := text.Marshal(0xe71560d8bc06c6fd, s.Struct)
	return str
}

func (s VCS_reset_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_reset_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_reset_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_reset_Params) HasRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_reset_Params) Force() bool {
	return s.Struct.Bit(0)
}

func (s VCS_reset_Params) SetForce(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_reset_Params_List is a list of VCS_reset_Params.
type VCS_reset_Params_List struct{ capnp.List }

// NewVCS_reset_Params creates a new list of VCS_reset_Params.
func NewVCS_reset_Params_List(s *capnp.Segment, sz int32) (VCS_reset_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return VCS_reset_Params_List{l}, err
}

func (s VCS_reset_Params_List) At(i int) VCS_reset_Params { return VCS_reset_Params{s.List.Struct(i)} }

func (s VCS_reset_Params_List) Set(i int, v VCS_reset_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Params_List) String() string {
	str, _ := text.MarshalList(0xe71560d8bc06c6fd, s.List)
	return str
}

// VCS_reset_Params_Promise is a wrapper for a VCS_reset_Params promised by a client call.
type VCS_reset_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Params_Promise) Struct() (VCS_reset_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Params{s}, err
}

type VCS_reset_Results struct{ capnp.Struct }

// VCS_reset_Results_TypeID is the unique identifier for the type VCS_reset_Results.
const VCS_reset_Results_TypeID = 0xf9b772853fd93ea9

func NewVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func NewRootVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func ReadRootVCS_reset_Results(msg *capnp.Message) (VCS_reset_Results, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Results{root.Struct()}, err
}

func (s VCS_reset_Results) String() string {
	str, _ := text.Marshal(0xf9b772853fd93ea9, s.Struct)
	return str
}

// VCS_reset_Results_List is a list of VCS_reset_Results.
type VCS_reset_Results_List struct{ capnp.List }

// NewVCS_reset_Results creates a new list of VCS_reset_Results.
func NewVCS_reset_Results_List(s *capnp.Segment, sz int32) (VCS_reset_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_reset_Results_List{l}, err
}

func (s VCS_reset_Results_List) At(i int) VCS_reset_Results {
	return VCS_reset_Results{s.List.Struct(i)}
}

func (s VCS_reset_Results_List) Set(i int, v VCS_reset_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Results_List) String() string {
	str, _ := text.MarshalList(0xf9b772853fd93ea9, s.List)
	return str
}

// VCS_reset_Results_Promise is a wrapper for a VCS_reset_Results promised by a client call.
type VCS_reset_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Results_Promise) Struct() (VCS_reset_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Results{s}, err
}

type VCS_history_Params struct{ capnp.Struct }

// VCS_history_Params_TypeID is the unique identifier for the type VCS_history_Params.
const VCS_history_Params_TypeID = 0xe154e487144bf3c2

func NewVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func NewRootVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func ReadRootVCS_history_Params(msg *capnp.Message) (VCS_history_Params, error) {
	root, err := msg.RootPtr()
	return VCS_history_Params{root.Struct()}, err
}

func (s VCS_history_Params) String() string {
	str, _ := text.Marshal(0xe154e487144bf3c2, s.Struct)
	return str
}

func (s VCS_history_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_history_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_history_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_history_Params_List is a list of VCS_history_Params.
type VCS_history_Params_List struct{ capnp.List }

// NewVCS_history_Params creates a new list of VCS_history_Params.
func NewVCS_history_Params_List(s *capnp.Segment, sz int32) (VCS_history_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Params_List{l}, err
}

func (s VCS_history_Params_List) At(i int) VCS_history_Params {
	return VCS_history_Params{s.List.Struct(i)}
}

func (s VCS_history_Params_List) Set(i int, v VCS_history_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Params_List) String() string {
	str, _ := text.MarshalList(0xe154e487144bf3c2, s.List)
	return str
}

// VCS_history_Params_Promise is a wrapper for a VCS_history_Params promised by a client call.
type VCS_history_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Params_Promise) Struct() (VCS_history_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Params{s}, err
}

type VCS_history_Results struct{ capnp.Struct }

// VCS_history_Results_TypeID is the unique identifier for the type VCS_history_Results.
const VCS_history_Results_TypeID = 0xe0f49db8c42c72b2

func NewVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func NewRootVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func ReadRootVCS_history_Results(msg *capnp.Message) (VCS_history_Results, error) {
	root, err := msg.RootPtr()
	return VCS_history_Results{root.Struct()}, err
}

func (s VCS_history_Results) String() string {
	str, _ := text.Marshal(0xe0f49db8c42c72b2, s.Struct)
	return str
}

func (s VCS_history_Results) History() (Change_List, error) {
	p, err := s.Struct.Ptr(0)
	return Change_List{List: p.List()}, err
}

func (s VCS_history_Results) HasHistory() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Results) SetHistory(v Change_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHistory sets the history field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s VCS_history_Results) NewHistory(n int32) (Change_List, error) {
	l, err := NewChange_List(s.Struct.Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_history_Results_List is a list of VCS_history_Results.
type VCS_history_Results_List struct{ capnp.List }

// NewVCS_history_Results creates a new list of VCS_history_Results.
func NewVCS_history_Results_List(s *capnp.Segment, sz int32) (VCS_history_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Results_List{l}, err
}

func (s VCS_history_Results_List) At(i int) VCS_history_Results {
	return VCS_history_Results{s.List.Struct(i)}
}

func (s VCS_history_Results_List) Set(i int, v VCS_history_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Results_List) String() string {
	str, _ := text.MarshalList(0xe0f49db8c42c72b2, s.List)
	return str
}

// VCS_history_Results_Promise is a wrapper for a VCS_history_Results promised by a client call.
type VCS_history_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Results_Promise) Struct() (VCS_history_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Results{s}, err
}

type VCS_makeDiff_Params struct{ capnp.Struct }

// VCS_makeDiff_Params_TypeID is the unique identifier for the type VCS_makeDiff_Params.
const VCS_makeDiff_Params_TypeID = 0xe2f81b4403ef433b

func NewVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func NewRootVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func ReadRootVCS_makeDiff_Params(msg *capnp.Message) (VCS_makeDiff_Params, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Params{root.Struct()}, err
}

func (s VCS_makeDiff_Params) String() string {
	str, _ := text.Marshal(0xe2f81b4403ef433b, s.Struct)
	return str
}

func (s VCS_makeDiff_Params) LocalOwner() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalOwner(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_makeDiff_Params) RemoteOwner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_makeDiff_Params) LocalRev() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalRev() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalRev(v string) error {
	return s.Struct.SetText(2, v)
}

func (s VCS_makeDiff_Params) RemoteRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteRev(v string) error {
	return s.Struct.SetText(3, v)
}

func (s VCS_makeDiff_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_makeDiff_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_makeDiff_Params_List is a list of VCS_makeDiff_Params.
type VCS_makeDiff_Params_List struct{ capnp.List }

// NewVCS_makeDiff_Params creates a new list of VCS_makeDiff_Params.
func NewVCS_makeDiff_Params_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return VCS_makeDiff_Params_List{l}, err
}

func (s VCS_makeDiff_Params_List) At(i int) VCS_makeDiff_Params {
	return VCS_makeDiff_Params{s.List.Struct(i)}
}

func (s VCS_makeDiff_Params_List) Set(i int, v VCS_makeDiff_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Params_List) String() string {
	str, _ := text.MarshalList(0xe2f81b4403ef433b, s.List)
	return str
}

// VCS_makeDiff_Params_Promise is a wrapper for a VCS_makeDiff_Params promised by a client call.
type VCS_makeDiff_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Params_Promise) Struct() (VCS_makeDiff_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Params{s}, err
}

type VCS_makeDiff_Results struct{ capnp.Struct }

// VCS_makeDiff_Results_TypeID is the unique identifier for the type VCS_makeDiff_Results.
const VCS_makeDiff_Results_TypeID = 0xd7ef486de484610d

func NewVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func NewRootVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func ReadRootVCS_makeDiff_Results(msg *capnp.Message) (VCS_makeDiff_Results, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Results{root.Struct()}, err
}

func (s VCS_makeDiff_Results) String() string {
	str, _ := text.Marshal(0xd7ef486de484610d, s.Struct)
	return str
}

func (s VCS_makeDiff_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_makeDiff_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_makeDiff_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_makeDiff_Results_List is a list of VCS_makeDiff_Results.
type VCS_makeDiff_Results_List struct{ capnp.List }

// NewVCS_makeDiff_Results creates a new list of VCS_makeDiff_Results.
func NewVCS_makeDiff_Results_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_makeDiff_Results_List{l}, err
}

func (s VCS_makeDiff_Results_List) At(i int) VCS_makeDiff_Results {
	return VCS_makeDiff_Results{s.List.Struct(i)}
}

func (s VCS_makeDiff_Results_List) Set(i int, v VCS_makeDiff_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Results_List) String() string {
	str, _ := text.MarshalList(0xd7ef486de484610d, s.List)
	return str
}

// VCS_makeDiff_Results_Promise is a wrapper for a VCS_makeDiff_Results promised by a client call.
type VCS_makeDiff_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Results_Promise) Struct() (VCS_makeDiff_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Results{s}, err
}

func (p VCS_makeDiff_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type VCS_sync_Params struct{ capnp.Struct }

// VCS_sync_Params_TypeID is the unique identifier for the type VCS_sync_Params.
const VCS_sync_Params_TypeID = 0xb05bd83a34de71b7

func NewVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func NewRootVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func ReadRootVCS_sync_Params(msg *capnp.Message) (VCS_sync_Params, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Params{root.Struct()}, err
}

func (s VCS_sync_Params) String() string {
	str, _ := text.Marshal(0xb05bd83a34de71b7, s.Struct)
	return str
}

func (s VCS_sync_Params) WithWhom() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_sync_Params) HasWithWhom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_sync_Params) WithWhomBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_sync_Params) SetWithWhom(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_sync_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_sync_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_sync_Params_List is a list of VCS_sync_Params.
type VCS_sync_Params_List struct{ capnp.List }

// NewVCS_sync_Params creates a new list of VCS_sync_Params.
func NewVCS_sync_Params_List(s *capnp.Segment, sz int32) (VCS_sync_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_sync_Params_List{l}, err
}

func (s VCS_sync_Params_List) At(i int) VCS_sync_Params { return VCS_sync_Params{s.List.Struct(i)} }

func (s VCS_sync_Params_List) Set(i int, v VCS_sync_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Params_List) String() string {
	str, _ := text.MarshalList(0xb05bd83a34de71b7, s.List)
	return str
}

// VCS_sync_Params_Promise is a wrapper for a VCS_sync_Params promised by a client call.
type VCS_sync_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Params_Promise) Struct() (VCS_sync_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Params{s}, err
}

type VCS_sync_Results struct{ capnp.Struct }

// VCS_sync_Results_TypeID is the unique identifier for the type VCS_sync_Results.
const VCS_sync_Results_TypeID = 0xfa04b4272d0ffcd9

func NewVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_sync_Results{st}, err
}

func NewRootVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_sync_Results{st}, err
}

func ReadRootVCS_sync_Results(msg *capnp.Message) (VCS_sync_Results, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Results{root.Struct()}, err
}

func (s VCS_sync_Results) String() string {
	str, _ := text.Marshal(0xfa04b4272d0ffcd9, s.Struct)
	return str
}

func (s VCS_sync_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_sync_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_sync_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_sync_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_sync_Results_List is a list of VCS_sync_Results.
type VCS_sync_Results_List struct{ capnp.List }

// NewVCS_sync_Results creates a new list of VCS_sync_Results.
func NewVCS_sync_Results_List(s *capnp.Segment, sz int32) (VCS_sync_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_sync_Results_List{l}, err
}

func (s VCS_sync_Results_List) At(i int) VCS_sync_Results { return VCS_sync_Results{s.List.Struct(i)} }

func (s VCS_sync_Results_List) Set(i int, v VCS_sync_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Results_List) String() string {
	str, _ := text.MarshalList(0xfa04b4272d0ffcd9, s.List)
	return str
}

// VCS_sync_Results_Promise is a wrapper for a VCS_sync_Results promised by a client call.
type VCS_sync_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Results_Promise) Struct() (VCS_sync_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Results{s}, err
}

func (p VCS_sync_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type VCS_fetch_Params struct{ capnp.Struct }

// VCS_fetch_Params_TypeID is the unique identifier for the type VCS_fetch_Params.
const VCS_fetch_Params_TypeID = 0xaff62edfdbfe53d0

func NewVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func NewRootVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func ReadRootVCS_fetch_Params(msg *capnp.Message) (VCS_fetch_Params, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Params{root.Struct()}, err
}

func (s VCS_fetch_Params) String() string {
	str, _ := text.Marshal(0xaff62edfdbfe53d0, s.Struct)
	return str
}

func (s VCS_fetch_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_fetch_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_fetch_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_fetch_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_fetch_Params_List is a list of VCS_fetch_Params.
type VCS_fetch_Params_List struct{ capnp.List }

// NewVCS_fetch_Params creates a new list of VCS_fetch_Params.
func NewVCS_fetch_Params_List(s *capnp.Segment, sz int32) (VCS_fetch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_fetch_Params_List{l}, err
}

func (s VCS_fetch_Params_List) At(i int) VCS_fetch_Params { return VCS_fetch_Params{s.List.Struct(i)} }

func (s VCS_fetch_Params_List) Set(i int, v VCS_fetch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Params_List) String() string {
	str, _ := text.MarshalList(0xaff62edfdbfe53d0, s.List)
	return str
}

// VCS_fetch_Params_Promise is a wrapper for a VCS_fetch_Params promised by a client call.
type VCS_fetch_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Params_Promise) Struct() (VCS_fetch_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Params{s}, err
}

type VCS_fetch_Results struct{ capnp.Struct }

// VCS_fetch_Results_TypeID is the unique identifier for the type VCS_fetch_Results.
const VCS_fetch_Results_TypeID = 0xb262e0d6c2474d9c

func NewVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func NewRootVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func ReadRootVCS_fetch_Results(msg *capnp.Message) (VCS_fetch_Results, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Results{root.Struct()}, err
}

func (s VCS_fetch_Results) String() string {
	str, _ := text.Marshal(0xb262e0d6c2474d9c, s.Struct)
	return str
}

// VCS_fetch_Results_List is a list of VCS_fetch_Results.
type VCS_fetch_Results_List struct{ capnp.List }

// NewVCS_fetch_Results creates a new list of VCS_fetch_Results.
func NewVCS_fetch_Results_List(s *capnp.Segment, sz int32) (VCS_fetch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_fetch_Results_List{l}, err
}

func (s VCS_fetch_Results_List) At(i int) VCS_fetch_Results {
	return VCS_fetch_Results{s.List.Struct(i)}
}

func (s VCS_fetch_Results_List) Set(i int, v VCS_fetch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Results_List) String() string {
	str, _ := text.MarshalList(0xb262e0d6c2474d9c, s.List)
	return str
}

// VCS_fetch_Results_Promise is a wrapper for a VCS_fetch_Results promised by a client call.
type VCS_fetch_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Results_Promise) Struct() (VCS_fetch_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Results{s}, err
}

type VCS_commitInfo_Params struct{ capnp.Struct }

// VCS_commitInfo_Params_TypeID is the unique identifier for the type VCS_commitInfo_Params.
const VCS_commitInfo_Params_TypeID = 0xa630576401b1a5b7

func NewVCS_commitInfo_Params(s *capnp.Segment) (VCS_commitInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commitInfo_Params{st}, err
}

func NewRootVCS_commitInfo_Params(s *capnp.Segment) (VCS_commitInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commitInfo_Params{st}, err
}

func ReadRootVCS_commitInfo_Params(msg *capnp.Message) (VCS_commitInfo_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commitInfo_Params{root.Struct()}, err
}

func (s VCS_commitInfo_Params) String() string {
	str, _ := text.Marshal(0xa630576401b1a5b7, s.Struct)
	return str
}

func (s VCS_commitInfo_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commitInfo_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commitInfo_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commitInfo_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commitInfo_Params_List is a list of VCS_commitInfo_Params.
type VCS_commitInfo_Params_List struct{ capnp.List }

// NewVCS_commitInfo_Params creates a new list of VCS_commitInfo_Params.
func NewVCS_commitInfo_Params_List(s *capnp.Segment, sz int32) (VCS_commitInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commitInfo_Params_List{l}, err
}

func (s VCS_commitInfo_Params_List) At(i int) VCS_commitInfo_Params {
	return VCS_commitInfo_Params{s.List.Struct(i)}
}

func (s VCS_commitInfo_Params_List) Set(i int, v VCS_commitInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commitInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xa630576401b1a5b7, s.List)
	return str
}

// VCS_commitInfo_Params_Promise is a wrapper for a VCS_commitInfo_Params promised by a client call.
type VCS_commitInfo_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commitInfo_Params_Promise) Struct() (VCS_commitInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commitInfo_Params{s}, err
}

type VCS_commitInfo_Results struct{ capnp.Struct }

// VCS_commitInfo_Results_TypeID is the unique identifier for the type VCS_commitInfo_Results.
const VCS_commitInfo_Results_TypeID = 0xa1a9e5ab638eed79

func NewVCS_commitInfo_Results(s *capnp.Segment) (VCS_commitInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_commitInfo_Results{st}, err
}

func NewRootVCS_commitInfo_Results(s *capnp.Segment) (VCS_commitInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_commitInfo_Results{st}, err
}

func ReadRootVCS_commitInfo_Results(msg *capnp.Message) (VCS_commitInfo_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commitInfo_Results{root.Struct()}, err
}

func (s VCS_commitInfo_Results) String() string {
	str, _ := text.Marshal(0xa1a9e5ab638eed79, s.Struct)
	return str
}

func (s VCS_commitInfo_Results) IsValidRef() bool {
	return s.Struct.Bit(0)
}

func (s VCS_commitInfo_Results) SetIsValidRef(v bool) {
	s.Struct.SetBit(0, v)
}

func (s VCS_commitInfo_Results) Commit() (Commit, error) {
	p, err := s.Struct.Ptr(0)
	return Commit{Struct: p.Struct()}, err
}

func (s VCS_commitInfo_Results) HasCommit() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commitInfo_Results) SetCommit(v Commit) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCommit sets the commit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s VCS_commitInfo_Results) NewCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_commitInfo_Results_List is a list of VCS_commitInfo_Results.
type VCS_commitInfo_Results_List struct{ capnp.List }

// NewVCS_commitInfo_Results creates a new list of VCS_commitInfo_Results.
func NewVCS_commitInfo_Results_List(s *capnp.Segment, sz int32) (VCS_commitInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_commitInfo_Results_List{l}, err
}

func (s VCS_commitInfo_Results_List) At(i int) VCS_commitInfo_Results {
	return VCS_commitInfo_Results{s.List.Struct(i)}
}

func (s VCS_commitInfo_Results_List) Set(i int, v VCS_commitInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commitInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa1a9e5ab638eed79, s.List)
	return str
}

// VCS_commitInfo_Results_Promise is a wrapper for a VCS_commitInfo_Results promised by a client call.
type VCS_commitInfo_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commitInfo_Results_Promise) Struct() (VCS_commitInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commitInfo_Results{s}, err
}

func (p VCS_commitInfo_Results_Promise) Commit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo struct{ Client capnp.Client }

// Repo_TypeID is the unique identifier for the type Repo.
const Repo_TypeID = 0xa862cd929f7af191

func (c Repo) Quit(ctx context.Context, params func(Repo_quit_Params) error, opts ...capnp.CallOption) Repo_quit_Results_Promise {
	if c.Client == nil {
		return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_quit_Params{Struct: s}) }
	}
	return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Ping(ctx context.Context, params func(Repo_ping_Params) error, opts ...capnp.CallOption) Repo_ping_Results_Promise {
	if c.Client == nil {
		return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_ping_Params{Struct: s}) }
	}
	return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Init(ctx context.Context, params func(Repo_init_Params) error, opts ...capnp.CallOption) Repo_init_Results_Promise {
	if c.Client == nil {
		return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_init_Params{Struct: s}) }
	}
	return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Mount(ctx context.Context, params func(Repo_mount_Params) error, opts ...capnp.CallOption) Repo_mount_Results_Promise {
	if c.Client == nil {
		return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_mount_Params{Struct: s}) }
	}
	return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Unmount(ctx context.Context, params func(Repo_unmount_Params) error, opts ...capnp.CallOption) Repo_unmount_Results_Promise {
	if c.Client == nil {
		return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_unmount_Params{Struct: s}) }
	}
	return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigGet(ctx context.Context, params func(Repo_configGet_Params) error, opts ...capnp.CallOption) Repo_configGet_Results_Promise {
	if c.Client == nil {
		return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configGet_Params{Struct: s}) }
	}
	return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigSet(ctx context.Context, params func(Repo_configSet_Params) error, opts ...capnp.CallOption) Repo_configSet_Results_Promise {
	if c.Client == nil {
		return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configSet_Params{Struct: s}) }
	}
	return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigAll(ctx context.Context, params func(Repo_configAll_Params) error, opts ...capnp.CallOption) Repo_configAll_Results_Promise {
	if c.Client == nil {
		return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configAll_Params{Struct: s}) }
	}
	return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigDoc(ctx context.Context, params func(Repo_configDoc_Params) error, opts ...capnp.CallOption) Repo_configDoc_Results_Promise {
	if c.Client == nil {
		return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configDoc_Params{Struct: s}) }
	}
	return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Become(ctx context.Context, params func(Repo_become_Params) error, opts ...capnp.CallOption) Repo_become_Results_Promise {
	if c.Client == nil {
		return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_become_Params{Struct: s}) }
	}
	return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabAdd(ctx context.Context, params func(Repo_fstabAdd_Params) error, opts ...capnp.CallOption) Repo_fstabAdd_Results_Promise {
	if c.Client == nil {
		return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabAdd_Params{Struct: s}) }
	}
	return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabRemove(ctx context.Context, params func(Repo_fstabRemove_Params) error, opts ...capnp.CallOption) Repo_fstabRemove_Results_Promise {
	if c.Client == nil {
		return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabRemove_Params{Struct: s}) }
	}
	return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabApply(ctx context.Context, params func(Repo_fstabApply_Params) error, opts ...capnp.CallOption) Repo_fstabApply_Results_Promise {
	if c.Client == nil {
		return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabApply_Params{Struct: s}) }
	}
	return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabList(ctx context.Context, params func(Repo_fstabList_Params) error, opts ...capnp.CallOption) Repo_fstabList_Results_Promise {
	if c.Client == nil {
		return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabList_Params{Struct: s}) }
	}
	return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabUnmountAll(ctx context.Context, params func(Repo_fstabUnmountAll_Params) error, opts ...capnp.CallOption) Repo_fstabUnmountAll_Results_Promise {
	if c.Client == nil {
		return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabUnmountAll_Params{Struct: s}) }
	}
	return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Version(ctx context.Context, params func(Repo_version_Params) error, opts ...capnp.CallOption) Repo_version_Results_Promise {
	if c.Client == nil {
		return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_version_Params{Struct: s}) }
	}
	return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) WaitForInit(ctx context.Context, params func(Repo_waitForInit_Params) error, opts ...capnp.CallOption) Repo_waitForInit_Results_Promise {
	if c.Client == nil {
		return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_waitForInit_Params{Struct: s}) }
	}
	return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) GatewayUserAdd(ctx context.Context, params func(Repo_gatewayUserAdd_Params) error, opts ...capnp.CallOption) Repo_gatewayUserAdd_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      17,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserAdd_Params{Struct: s}) }
	}
	return Repo_gatewayUserAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) GatewayUserRm(ctx context.Context, params func(Repo_gatewayUserRm_Params) error, opts ...capnp.CallOption) Repo_gatewayUserRm_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      18,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserRm_Params{Struct: s}) }
	}
	return Repo_gatewayUserRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) GatewayUserList(ctx context.Context, params func(Repo_gatewayUserList_Params) error, opts ...capnp.CallOption) Repo_gatewayUserList_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      19,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserList_Params{Struct: s}) }
	}
	return Repo_gatewayUserList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Repo_Server interface {
	Quit(Repo_quit) error

	Ping(Repo_ping) error

	Init(Repo_init) error

	Mount(Repo_mount) error

	Unmount(Repo_unmount) error

	ConfigGet(Repo_configGet) error

	ConfigSet(Repo_configSet) error

	ConfigAll(Repo_configAll) error

	ConfigDoc(Repo_configDoc) error

	Become(Repo_become) error

	FstabAdd(Repo_fstabAdd) error

	FstabRemove(Repo_fstabRemove) error

	FstabApply(Repo_fstabApply) error

	FstabList(Repo_fstabList) error

	FstabUnmountAll(Repo_fstabUnmountAll) error

	Version(Repo_version) error

	WaitForInit(Repo_waitForInit) error

	GatewayUserAdd(Repo_gatewayUserAdd) error

	GatewayUserRm(Repo_gatewayUserRm) error

	GatewayUserList(Repo_gatewayUserList) error
}

func Repo_ServerToClient(s Repo_Server) Repo {
	c, _ := s.(server.Closer)
	return Repo{Client: server.New(Repo_Methods(nil, s), c)}
}

func Repo_Methods(methods []server.Method, s Repo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 20)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_quit{c, opts, Repo_quit_Params{Struct: p}, Repo_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_ping{c, opts, Repo_ping_Params{Struct: p}, Repo_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_init{c, opts, Repo_init_Params{Struct: p}, Repo_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_mount{c, opts, Repo_mount_Params{Struct: p}, Repo_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_unmount{c, opts, Repo_unmount_Params{Struct: p}, Repo_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configGet{c, opts, Repo_configGet_Params{Struct: p}, Repo_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configSet{c, opts, Repo_configSet_Params{Struct: p}, Repo_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configAll{c, opts, Repo_configAll_Params{Struct: p}, Repo_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configDoc{c, opts, Repo_configDoc_Params{Struct: p}, Repo_configDoc_Results{Struct: r}}
			return s.ConfigDoc(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_become{c, opts, Repo_become_Params{Struct: p}, Repo_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabAdd{c, opts, Repo_fstabAdd_Params{Struct: p}, Repo_fstabAdd_Results{Struct: r}}
			return s.FstabAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabRemove{c, opts, Repo_fstabRemove_Params{Struct: p}, Repo_fstabRemove_Results{Struct: r}}
			return s.FstabRemove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabApply{c, opts, Repo_fstabApply_Params{Struct: p}, Repo_fstabApply_Results{Struct: r}}
			return s.FstabApply(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabList{c, opts, Repo_fstabList_Params{Struct: p}, Repo_fstabList_Results{Struct: r}}
			return s.FstabList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabUnmountAll{c, opts, Repo_fstabUnmountAll_Params{Struct: p}, Repo_fstabUnmountAll_Results{Struct: r}}
			return s.FstabUnmountAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_version{c, opts, Repo_version_Params{Struct: p}, Repo_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_waitForInit{c, opts, Repo_waitForInit_Params{Struct: p}, Repo_waitForInit_Results{Struct: r}}
			return s.WaitForInit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      17,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserAdd{c, opts, Repo_gatewayUserAdd_Params{Struct: p}, Repo_gatewayUserAdd_Results{Struct: r}}
			return s.GatewayUserAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      18,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserRm{c, opts, Repo_gatewayUserRm_Params{Struct: p}, Repo_gatewayUserRm_Results{Struct: r}}
			return s.GatewayUserRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      19,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserList{c, opts, Repo_gatewayUserList_Params{Struct: p}, Repo_gatewayUserList_Results{Struct: r}}
			return s.GatewayUserList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Repo_quit holds the arguments for a server call to Repo.quit.
type Repo_quit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_quit_Params
	Results Repo_quit_Results
}

// Repo_ping holds the arguments for a server call to Repo.ping.
type Repo_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_ping_Params
	Results Repo_ping_Results
}

// Repo_init holds the arguments for a server call to Repo.init.
type Repo_init struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_init_Params
	Results Repo_init_Results
}

// Repo_mount holds the arguments for a server call to Repo.mount.
type Repo_mount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_mount_Params
	Results Repo_mount_Results
}

// Repo_unmount holds the arguments for a server call to Repo.unmount.
type Repo_unmount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_unmount_Params
	Results Repo_unmount_Results
}

// Repo_configGet holds the arguments for a server call to Repo.configGet.
type Repo_configGet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configGet_Params
	Results Repo_configGet_Results
}

// Repo_configSet holds the arguments for a server call to Repo.configSet.
type Repo_configSet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configSet_Params
	Results Repo_configSet_Results
}

// Repo_configAll holds the arguments for a server call to Repo.configAll.
type Repo_configAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configAll_Params
	Results Repo_configAll_Results
}

// Repo_configDoc holds the arguments for a server call to Repo.configDoc.
type Repo_configDoc struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configDoc_Params
	Results Repo_configDoc_Results
}

// Repo_become holds the arguments for a server call to Repo.become.
type Repo_become struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_become_Params
	Results Repo_become_Results
}

// Repo_fstabAdd holds the arguments for a server call to Repo.fstabAdd.
type Repo_fstabAdd struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabAdd_Params
	Results Repo_fstabAdd_Results
}

// Repo_fstabRemove holds the arguments for a server call to Repo.fstabRemove.
type Repo_fstabRemove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabRemove_Params
	Results Repo_fstabRemove_Results
}

// Repo_fstabApply holds the arguments for a server call to Repo.fstabApply.
type Repo_fstabApply struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabApply_Params
	Results Repo_fstabApply_Results
}

// Repo_fstabList holds the arguments for a server call to Repo.fstabList.
type Repo_fstabList struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabList_Params
	Results Repo_fstabList_Results
}

// Repo_fstabUnmountAll holds the arguments for a server call to Repo.fstabUnmountAll.
type Repo_fstabUnmountAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabUnmountAll_Params
	Results Repo_fstabUnmountAll_Results
}

// Repo_version holds the arguments for a server call to Repo.version.
type Repo_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_version_Params
	Results Repo_version_Results
}

// Repo_waitForInit holds the arguments for a server call to Repo.waitForInit.
type Repo_waitForInit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_waitForInit_Params
	Results Repo_waitForInit_Results
}

// Repo_gatewayUserAdd holds the arguments for a server call to Repo.gatewayUserAdd.
type Repo_gatewayUserAdd struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_gatewayUserAdd_Params
	Results Repo_gatewayUserAdd_Results
}

// Repo_gatewayUserRm holds the arguments for a server call to Repo.gatewayUserRm.
type Repo_gatewayUserRm struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_gatewayUserRm_Params
	Results Repo_gatewayUserRm_Results
}

// Repo_gatewayUserList holds the arguments for a server call to Repo.gatewayUserList.
type Repo_gatewayUserList struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_gatewayUserList_Params
	Results Repo_gatewayUserList_Results
}

type Repo_quit_Params struct{ capnp.Struct }

// Repo_quit_Params_TypeID is the unique identifier for the type Repo_quit_Params.
const Repo_quit_Params_TypeID = 0xaa98a78425cdd321

func NewRepo_quit_Params(s *capnp.Segment) (Repo_quit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Params{st}, err
}

func NewRootRepo_quit_Params(s *capnp.Segment) (Repo_quit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Params{st}, err
}

func ReadRootRepo_quit_Params(msg *capnp.Message) (Repo_quit_Params, error) {
	root, err := msg.RootPtr()
	return Repo_quit_Params{root.Struct()}, err
}

func (s Repo_quit_Params) String() string {
	str, _ := text.Marshal(0xaa98a78425cdd321, s.Struct)
	return str
}

// Repo_quit_Params_List is a list of Repo_quit_Params.
type Repo_quit_Params_List struct{ capnp.List }

// NewRepo_quit_Params creates a new list of Repo_quit_Params.
func NewRepo_quit_Params_List(s *capnp.Segment, sz int32) (Repo_quit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_quit_Params_List{l}, err
}

func (s Repo_quit_Params_List) At(i int) Repo_quit_Params { return Repo_quit_Params{s.List.Struct(i)} }

func (s Repo_quit_Params_List) Set(i int, v Repo_quit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_quit_Params_List) String() string {
	str, _ := text.MarshalList(0xaa98a78425cdd321, s.List)
	return str
}

// Repo_quit_Params_Promise is a wrapper for a Repo_quit_Params promised by a client call.
type Repo_quit_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_quit_Params_Promise) Struct() (Repo_quit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_quit_Params{s}, err
}

type Repo_quit_Results struct{ capnp.Struct }

// Repo_quit_Results_TypeID is the unique identifier for the type Repo_quit_Results.
const Repo_quit_Results_TypeID = 0x860c3dd5698349f5

func NewRepo_quit_Results(s *capnp.Segment) (Repo_quit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Results{st}, err
}

func NewRootRepo_quit_Results(s *capnp.Segment) (Repo_quit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Results{st}, err
}

func ReadRootRepo_quit_Results(msg *capnp.Message) (Repo_quit_Results, error) {
	root, err := msg.RootPtr()
	return Repo_quit_Results{root.Struct()}, err
}

func (s Repo_quit_Results) String() string {
	str, _ := text.Marshal(0x860c3dd5698349f5, s.Struct)
	return str
}

// Repo_quit_Results_List is a list of Repo_quit_Results.
type Repo_quit_Results_List struct{ capnp.List }

// NewRepo_quit_Results creates a new list of Repo_quit_Results.
func NewRepo_quit_Results_List(s *capnp.Segment, sz int32) (Repo_quit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_quit_Results_List{l}, err
}

func (s Repo_quit_Results_List) At(i int) Repo_quit_Results {
	return Repo_quit_Results{s.List.Struct(i)}
}

func (s Repo_quit_Results_List) Set(i int, v Repo_quit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_quit_Results_List) String() string {
	str, _ := text.MarshalList(0x860c3dd5698349f5, s.List)
	return str
}

// Repo_quit_Results_Promise is a wrapper for a Repo_quit_Results promised by a client call.
type Repo_quit_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_quit_Results_Promise) Struct() (Repo_quit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_quit_Results{s}, err
}

type Repo_ping_Params struct{ capnp.Struct }

// Repo_ping_Params_TypeID is the unique identifier for the type Repo_ping_Params.
const Repo_ping_Params_TypeID = 0x978c524c1a35015c

func NewRepo_ping_Params(s *capnp.Segment) (Repo_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_ping_Params{st}, err
}

func NewRootRepo_ping_Params(s *capnp.Segment) (Repo_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_ping_Params{st}, err
}

func ReadRootRepo_ping_Params(msg *capnp.Message) (Repo_ping_Params, error) {
	root, err := msg.RootPtr()
	return Repo_ping_Params{root.Struct()}, err
}

func (s Repo_ping_Params) String() string {
	str, _ := text.Marshal(0x978c524c1a35015c, s.Struct)
	return str
}

// Repo_ping_Params_List is a list of Repo_ping_Params.
type Repo_ping_Params_List struct{ capnp.List }

// NewRepo_ping_Params creates a new list of Repo_ping_Params.
func NewRepo_ping_Params_List(s *capnp.Segment, sz int32) (Repo_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_ping_Params_List{l}, err
}

func (s Repo_ping_Params_List) At(i int) Repo_ping_Params { return Repo_ping_Params{s.List.Struct(i)} }

func (s Repo_ping_Params_List) Set(i int, v Repo_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_ping_Params_List) String() string {
	str, _ := text.MarshalList(0x978c524c1a35015c, s.List)
	return str
}

// Repo_ping_Params_Promise is a wrapper for a Repo_ping_Params promised by a client call.
type Repo_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_ping_Params_Promise) Struct() (Repo_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_ping_Params{s}, err
}

type Repo_ping_Results struct{ capnp.Struct }

// Repo_ping_Results_TypeID is the unique identifier for the type Repo_ping_Results.
const Repo_ping_Results_TypeID = 0x9d64fa17798952ff

func NewRepo_ping_Results(s *capnp.Segment) (Repo_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_ping_Results{st}, err
}

func NewRootRepo_ping_Results(s *capnp.Segment) (Repo_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_ping_Results{st}, err
}

func ReadRootRepo_ping_Results(msg *capnp.Message) (Repo_ping_Results, error) {
	root, err := msg.RootPtr()
	return Repo_ping_Results{root.Struct()}, err
}

func (s Repo_ping_Results) String() string {
	str, _ := text.Marshal(0x9d64fa17798952ff, s.Struct)
	return str
}

func (s Repo_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_ping_Results_List is a list of Repo_ping_Results.
type Repo_ping_Results_List struct{ capnp.List }

// NewRepo_ping_Results creates a new list of Repo_ping_Results.
func NewRepo_ping_Results_List(s *capnp.Segment, sz int32) (Repo_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_ping_Results_List{l}, err
}

func (s Repo_ping_Results_List) At(i int) Repo_ping_Results {
	return Repo_ping_Results{s.List.Struct(i)}
}

func (s Repo_ping_Results_List) Set(i int, v Repo_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_ping_Results_List) String() string {
	str, _ := text.MarshalList(0x9d64fa17798952ff, s.List)
	return str
}

// Repo_ping_Results_Promise is a wrapper for a Repo_ping_Results promised by a client call.
type Repo_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_ping_Results_Promise) Struct() (Repo_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_ping_Results{s}, err
}

type Repo_init_Params struct{ capnp.Struct }

// Repo_init_Params_TypeID is the unique identifier for the type Repo_init_Params.
const Repo_init_Params_TypeID = 0x9c19777f493f1110

func NewRepo_init_Params(s *capnp.Segment) (Repo_init_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_init_Params{st}, err
}

func NewRootRepo_init_Params(s *capnp.Segment) (Repo_init_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_init_Params{st}, err
}

func ReadRootRepo_init_Params(msg *capnp.Message) (Repo_init_Params, error) {
	root, err := msg.RootPtr()
	return Repo_init_Params{root.Struct()}, err
}

func (s Repo_init_Params) String() string {
	str, _ := text.Marshal(0x9c19777f493f1110, s.Struct)
	return str
}

func (s Repo_init_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_init_Params) HasBasePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_init_Params) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_init_Params) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Repo_init_Params) Backend() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Repo_init_Params) HasBackend() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) BackendBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetBackend(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Repo_init_Params) Password() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Repo_init_Params) HasPassword() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetPassword(v string) error {
	return s.Struct.SetText(3, v)
}

// Repo_init_Params_List is a list of Repo_init_Params.
type Repo_init_Params_List struct{ capnp.List }

// NewRepo_init_Params creates a new list of Repo_init_Params.
func NewRepo_init_Params_List(s *capnp.Segment, sz int32) (Repo_init_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Repo_init_Params_List{l}, err
}

func (s Repo_init_Params_List) At(i int) Repo_init_Params { return Repo_init_Params{s.List.Struct(i)} }

func (s Repo_init_Params_List) Set(i int, v Repo_init_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_init_Params_List) String() string {
	str, _ := text.MarshalList(0x9c19777f493f1110, s.List)
	return str
}

// Repo_init_Params_Promise is a wrapper for a Repo_init_Params promised by a client call.
type Repo_init_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_init_Params_Promise) Struct() (Repo_init_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_init_Params{s}, err
}

type Repo_init_Results struct{ capnp.Struct }

// Repo_init_Results_TypeID is the unique identifier for the type Repo_init_Results.
const Repo_init_Results_TypeID = 0xfc6b4417fdef895a

func NewRepo_init_Results(s *capnp.Segment) (Repo_init_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_init_Results{st}, err
}

func NewRootRepo_init_Results(s *capnp.Segment) (Repo_init_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_init_Results{st}, err
}

func ReadRootRepo_init_Results(msg *capnp.Message) (Repo_init_Results, error) {
	root, err := msg.RootPtr()
	return Repo_init_Results{root.Struct()}, err
}

func (s Repo_init_Results) String() string {
	str, _ := text.Marshal(0xfc6b4417fdef895a, s.Struct)
	return str
}

// Repo_init_Results_List is a list of Repo_init_Results.
type Repo_init_Results_List struct{ capnp.List }

// NewRepo_init_Results creates a new list of Repo_init_Results.
func NewRepo_init_Results_List(s *capnp.Segment, sz int32) (Repo_init_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_init_Results_List{l}, err
}

func (s Repo_init_Results_List) At(i int) Repo_init_Results {
	return Repo_init_Results{s.List.Struct(i)}
}

func (s Repo_init_Results_List) Set(i int, v Repo_init_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_init_Results_List) String() string {
	str, _ := text.MarshalList(0xfc6b4417fdef895a, s.List)
	return str
}

// Repo_init_Results_Promise is a wrapper for a Repo_init_Results promised by a client call.
type Repo_init_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_init_Results_Promise) Struct() (Repo_init_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_init_Results{s}, err
}

type Repo_mount_Params struct{ capnp.Struct }

// Repo_mount_Params_TypeID is the unique identifier for the type Repo_mount_Params.
const Repo_mount_Params_TypeID = 0x98300b93ef71cc57

func NewRepo_mount_Params(s *capnp.Segment) (Repo_mount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_mount_Params{st}, err
}

func NewRootRepo_mount_Params(s *capnp.Segment) (Repo_mount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_mount_Params{st}, err
}

func ReadRootRepo_mount_Params(msg *capnp.Message) (Repo_mount_Params, error) {
	root, err := msg.RootPtr()
	return Repo_mount_Params{root.Struct()}, err
}

func (s Repo_mount_Params) String() string {
	str, _ := text.Marshal(0x98300b93ef71cc57, s.Struct)
	return str
}

func (s Repo_mount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_mount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_mount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_mount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_mount_Params) Options() (MountOptions, error) {
	p, err := s.Struct.Ptr(1)
	return MountOptions{Struct: p.Struct()}, err
}

func (s Repo_mount_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_mount_Params) SetOptions(v MountOptions) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated MountOptions struct, preferring placement in s's segment.
func (s Repo_mount_Params) NewOptions() (MountOptions, error) {
	ss, err := NewMountOptions(s.Struct.Segment())
	if err != nil {
		return MountOptions{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Repo_mount_Params_List is a list of Repo_mount_Params.
type Repo_mount_Params_List struct{ capnp.List }

// NewRepo_mount_Params creates a new list of Repo_mount_Params.
func NewRepo_mount_Params_List(s *capnp.Segment, sz int32) (Repo_mount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Repo_mount_Params_List{l}, err
}

func (s Repo_mount_Params_List) At(i int) Repo_mount_Params {
	return Repo_mount_Params{s.List.Struct(i)}
}

func (s Repo_mount_Params_List) Set(i int, v Repo_mount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_mount_Params_List) String() string {
	str, _ := text.MarshalList(0x98300b93ef71cc57, s.List)
	return str
}

// Repo_mount_Params_Promise is a wrapper for a Repo_mount_Params promised by a client call.
type Repo_mount_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_mount_Params_Promise) Struct() (Repo_mount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_mount_Params{s}, err
}

func (p Repo_mount_Params_Promise) Options() MountOptions_Promise {
	return MountOptions_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Repo_mount_Results struct{ capnp.Struct }

// Repo_mount_Results_TypeID is the unique identifier for the type Repo_mount_Results.
const Repo_mount_Results_TypeID = 0xfa4486fa9522275e

func NewRepo_mount_Results(s *capnp.Segment) (Repo_mount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_mount_Results{st}, err
}

func NewRootRepo_mount_Results(s *capnp.Segment) (Repo_mount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_mount_Results{st}, err
}

func ReadRootRepo_mount_Results(msg *capnp.Message) (Repo_mount_Results, error) {
	root, err := msg.RootPtr()
	return Repo_mount_Results{root.Struct()}, err
}

func (s Repo_mount_Results) String() string {
	str, _ := text.Marshal(0xfa4486fa9522275e, s.Struct)
	return str
}

// Repo_mount_Results_List is a list of Repo_mount_Results.
type Repo_mount_Results_List struct{ capnp.List }

// NewRepo_mount_Results creates a new list of Repo_mount_Results.
func NewRepo_mount_Results_List(s *capnp.Segment, sz int32) (Repo_mount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_mount_Results_List{l}, err
}

func (s Repo_mount_Results_List) At(i int) Repo_mount_Results {
	return Repo_mount_Results{s.List.Struct(i)}
}

func (s Repo_mount_Results_List) Set(i int, v Repo_mount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_mount_Results_List) String() string {
	str, _ := text.MarshalList(0xfa4486fa9522275e, s.List)
	return str
}

// Repo_mount_Results_Promise is a wrapper for a Repo_mount_Results promised by a client call.
type Repo_mount_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_mount_Results_Promise) Struct() (Repo_mount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_mount_Results{s}, err
}

type Repo_unmount_Params struct{ capnp.Struct }

// Repo_unmount_Params_TypeID is the unique identifier for the type Repo_unmount_Params.
const Repo_unmount_Params_TypeID = 0xd7a7f00d5a96fc43

func NewRepo_unmount_Params(s *capnp.Segment) (Repo_unmount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_unmount_Params{st}, err
}

func NewRootRepo_unmount_Params(s *capnp.Segment) (Repo_unmount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_unmount_Params{st}, err
}

func ReadRootRepo_unmount_Params(msg *capnp.Message) (Repo_unmount_Params, error) {
	root, err := msg.RootPtr()
	return Repo_unmount_Params{root.Struct()}, err
}

func (s Repo_unmount_Params) String() string {
	str, _ := text.Marshal(0xd7a7f00d5a96fc43, s.Struct)
	return str
}

func (s Repo_unmount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_unmount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_unmount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_unmount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_unmount_Params_List is a list of Repo_unmount_Params.
type Repo_unmount_Params_List struct{ capnp.List }

// NewRepo_unmount_Params creates a new list of Repo_unmount_Params.
func NewRepo_unmount_Params_List(s *capnp.Segment, sz int32) (Repo_unmount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_unmount_Params_List{l}, err
}

func (s Repo_unmount_Params_List) At(i int) Repo_unmount_Params {
	return Repo_unmount_Params{s.List.Struct(i)}
}

func (s Repo_unmount_Params_List) Set(i int, v Repo_unmount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_unmount_Params_List) String() string {
	str, _ := text.MarshalList(0xd7a7f00d5a96fc43, s.List)
	return str
}

// Repo_unmount_Params_Promise is a wrapper for a Repo_unmount_Params promised by a client call.
type Repo_unmount_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_unmount_Params_Promise) Struct() (Repo_unmount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_unmount_Params{s}, err
}

type Repo_unmount_Results struct{ capnp.Struct }

// Repo_unmount_Results_TypeID is the unique identifier for the type Repo_unmount_Results.
const Repo_unmount_Results_TypeID = 0xd70c154f9521b73d

func NewRepo_unmount_Results(s *capnp.Segment) (Repo_unmount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_unmount_Results{st}, err
}

func NewRootRepo_unmount_Results(s *capnp.Segment) (Repo_unmount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_unmount_Results{st}, err
}

func ReadRootRepo_unmount_Results(msg *capnp.Message) (Repo_unmount_Results, error) {
	root, err := msg.RootPtr()
	return Repo_unmount_Results{root.Struct()}, err
}

func (s Repo_unmount_Results) String() string {
	str, _ := text.Marshal(0xd70c154f9521b73d, s.Struct)
	return str
}

// Repo_unmount_Results_List is a list of Repo_unmount_Results.
type Repo_unmount_Results_List struct{ capnp.List }

// NewRepo_unmount_Results creates a new list of Repo_unmount_Results.
func NewRepo_unmount_Results_List(s *capnp.Segment, sz int32) (Repo_unmount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_unmount_Results_List{l}, err
}

func (s Repo_unmount_Results_List) At(i int) Repo_unmount_Results {
	return Repo_unmount_Results{s.List.Struct(i)}
}

func (s Repo_unmount_Results_List) Set(i int, v Repo_unmount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_unmount_Results_List) String() string {
	str, _ := text.MarshalList(0xd70c154f9521b73d, s.List)
	return str
}

// Repo_unmount_Results_Promise is a wrapper for a Repo_unmount_Results promised by a client call.
type Repo_unmount_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_unmount_Results_Promise) Struct() (Repo_unmount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_unmount_Results{s}, err
}

type Repo_configGet_Params struct{ capnp.Struct }

// Repo_configGet_Params_TypeID is the unique identifier for the type Repo_configGet_Params.
const Repo_configGet_Params_TypeID = 0xe0b1a560d0e4d51a

func NewRepo_configGet_Params(s *capnp.Segment) (Repo_configGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Params{st}, err
}

func NewRootRepo_configGet_Params(s *capnp.Segment) (Repo_configGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Params{st}, err
}

func ReadRootRepo_configGet_Params(msg *capnp.Message) (Repo_configGet_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configGet_Params{root.Struct()}, err
}

func (s Repo_configGet_Params) String() string {
	str, _ := text.Marshal(0xe0b1a560d0e4d51a, s.Struct)
	return str
}

func (s Repo_configGet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configGet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configGet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configGet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configGet_Params_List is a list of Repo_configGet_Params.
type Repo_configGet_Params_List struct{ capnp.List }

// NewRepo_configGet_Params creates a new list of Repo_configGet_Params.
func NewRepo_configGet_Params_List(s *capnp.Segment, sz int32) (Repo_configGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configGet_Params_List{l}, err
}

func (s Repo_configGet_Params_List) At(i int) Repo_configGet_Params {
	return Repo_configGet_Params{s.List.Struct(i)}
}

func (s Repo_configGet_Params_List) Set(i int, v Repo_configGet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configGet_Params_List) String() string {
	str, _ := text.MarshalList(0xe0b1a560d0e4d51a, s.List)
	return str
}

// Repo_configGet_Params_Promise is a wrapper for a Repo_configGet_Params promised by a client call.
type Repo_configGet_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configGet_Params_Promise) Struct() (Repo_configGet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configGet_Params{s}, err
}

type Repo_configGet_Results struct{ capnp.Struct }

// Repo_configGet_Results_TypeID is the unique identifier for the type Repo_configGet_Results.
const Repo_configGet_Results_TypeID = 0xabc3ec90b96a6d71

func NewRepo_configGet_Results(s *capnp.Segment) (Repo_configGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Results{st}, err
}

func NewRootRepo_configGet_Results(s *capnp.Segment) (Repo_configGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Results{st}, err
}

func ReadRootRepo_configGet_Results(msg *capnp.Message) (Repo_configGet_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configGet_Results{root.Struct()}, err
}

func (s Repo_configGet_Results) String() string {
	str, _ := text.Marshal(0xabc3ec90b96a6d71, s.Struct)
	return str
}

func (s Repo_configGet_Results) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configGet_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configGet_Results) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configGet_Results) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configGet_Results_List is a list of Repo_configGet_Results.
type Repo_configGet_Results_List struct{ capnp.List }

// NewRepo_configGet_Results creates a new list of Repo_configGet_Results.
func NewRepo_configGet_Results_List(s *capnp.Segment, sz int32) (Repo_configGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configGet_Results_List{l}, err
}

func (s Repo_configGet_Results_List) At(i int) Repo_configGet_Results {
	return Repo_configGet_Results{s.List.Struct(i)}
}

func (s Repo_configGet_Results_List) Set(i int, v Repo_configGet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configGet_Results_List) String() string {
	str, _ := text.MarshalList(0xabc3ec90b96a6d71, s.List)
	return str
}

// Repo_configGet_Results_Promise is a wrapper for a Repo_configGet_Results promised by a client call.
type Repo_configGet_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configGet_Results_Promise) Struct() (Repo_configGet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configGet_Results{s}, err
}

type Repo_configSet_Params struct{ capnp.Struct }

// Repo_configSet_Params_TypeID is the unique identifier for the type Repo_configSet_Params.
const Repo_configSet_Params_TypeID = 0xc0ad53271497ab77

func NewRepo_configSet_Params(s *capnp.Segment) (Repo_configSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_configSet_Params{st}, err
}

func NewRootRepo_configSet_Params(s *capnp.Segment) (Repo_configSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_configSet_Params{st}, err
}

func ReadRootRepo_configSet_Params(msg *capnp.Message) (Repo_configSet_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configSet_Params{root.Struct()}, err
}

func (s Repo_configSet_Params) String() string {
	str, _ := text.Marshal(0xc0ad53271497ab77, s.Struct)
	return str
}

func (s Repo_configSet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configSet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configSet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configSet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_configSet_Params) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_configSet_Params) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_configSet_Params) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_configSet_Params) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Repo_configSet_Params_List is a list of Repo_configSet_Params.
type Repo_configSet_Params_List struct{ capnp.List }

// NewRepo_configSet_Params creates a new list of Repo_configSet_Params.
func NewRepo_configSet_Params_List(s *capnp.Segment, sz int32) (Repo_configSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Repo_configSet_Params_List{l}, err
}

func (s Repo_configSet_Params_List) At(i int) Repo_configSet_Params {
	return Repo_configSet_Params{s.List.Struct(i)}
}

func (s Repo_configSet_Params_List) Set(i int, v Repo_configSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configSet_Params_List) String() string {
	str, _ := text.MarshalList(0xc0ad53271497ab77, s.List)
	return str
}

// Repo_configSet_Params_Promise is a wrapper for a Repo_configSet_Params promised by a client call.
type Repo_configSet_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configSet_Params_Promise) Struct() (Repo_configSet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configSet_Params{s}, err
}

type Repo_configSet_Results struct{ capnp.Struct }

// Repo_configSet_Results_TypeID is the unique identifier for the type Repo_configSet_Results.
const Repo_configSet_Results_TypeID = 0xa89254a0db970716

func NewRepo_configSet_Results(s *capnp.Segment) (Repo_configSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configSet_Results{st}, err
}

func NewRootRepo_configSet_Results(s *capnp.Segment) (Repo_configSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configSet_Results{st}, err
}

func ReadRootRepo_configSet_Results(msg *capnp.Message) (Repo_configSet_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configSet_Results{root.Struct()}, err
}

func (s Repo_configSet_Results) String() string {
	str, _ := text.Marshal(0xa89254a0db970716, s.Struct)
	return str
}

// Repo_configSet_Results_List is a list of Repo_configSet_Results.
type Repo_configSet_Results_List struct{ capnp.List }

// NewRepo_configSet_Results creates a new list of Repo_configSet_Results.
func NewRepo_configSet_Results_List(s *capnp.Segment, sz int32) (Repo_configSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_configSet_Results_List{l}, err
}

func (s Repo_configSet_Results_List) At(i int) Repo_configSet_Results {
	return Repo_configSet_Results{s.List.Struct(i)}
}

func (s Repo_configSet_Results_List) Set(i int, v Repo_configSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configSet_Results_List) String() string {
	str, _ := text.MarshalList(0xa89254a0db970716, s.List)
	return str
}

// Repo_configSet_Results_Promise is a wrapper for a Repo_configSet_Results promised by a client call.
type Repo_configSet_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configSet_Results_Promise) Struct() (Repo_configSet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configSet_Results{s}, err
}

type Repo_configAll_Params struct{ capnp.Struct }

// Repo_configAll_Params_TypeID is the unique identifier for the type Repo_configAll_Params.
const Repo_configAll_Params_TypeID = 0xbebae5caecad3c49

func NewRepo_configAll_Params(s *capnp.Segment) (Repo_configAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configAll_Params{st}, err
}

func NewRootRepo_configAll_Params(s *capnp.Segment) (Repo_configAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configAll_Params{st}, err
}

func ReadRootRepo_configAll_Params(msg *capnp.Message) (Repo_configAll_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configAll_Params{root.Struct()}, err
}

func (s Repo_configAll_Params) String() string {
	str, _ := text.Marshal(0xbebae5caecad3c49, s.Struct)
	return str
}

// Repo_configAll_Params_List is a list of Repo_configAll_Params.
type Repo_configAll_Params_List struct{ capnp.List }

// NewRepo_configAll_Params creates a new list of Repo_configAll_Params.
func NewRepo_configAll_Params_List(s *capnp.Segment, sz int32) (Repo_configAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_configAll_Params_List{l}, err
}

func (s Repo_configAll_Params_List) At(i int) Repo_configAll_Params {
	return Repo_configAll_Params{s.List.Struct(i)}
}

func (s Repo_configAll_Params_List) Set(i int, v Repo_configAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configAll_Params_List) String() string {
	str, _ := text.MarshalList(0xbebae5caecad3c49, s.List)
	return str
}

// Repo_configAll_Params_Promise is a wrapper for a Repo_configAll_Params promised by a client call.
type Repo_configAll_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configAll_Params_Promise) Struct() (Repo_configAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configAll_Params{s}, err
}

type Repo_configAll_Results struct{ capnp.Struct }

// Repo_configAll_Results_TypeID is the unique identifier for the type Repo_configAll_Results.
const Repo_configAll_Results_TypeID = 0xacf50d40a9d3436a

func NewRepo_configAll_Results(s *capnp.Segment) (Repo_configAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configAll_Results{st}, err
}

func NewRootRepo_configAll_Results(s *capnp.Segment) (Repo_configAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configAll_Results{st}, err
}

func ReadRootRepo_configAll_Results(msg *capnp.Message) (Repo_configAll_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configAll_Results{root.Struct()}, err
}

func (s Repo_configAll_Results) String() string {
	str, _ := text.Marshal(0xacf50d40a9d3436a, s.Struct)
	return str
}

func (s Repo_configAll_Results) All() (ConfigEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigEntry_List{List: p.List()}, err
}

func (s Repo_configAll_Results) HasAll() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configAll_Results) SetAll(v ConfigEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAll sets the all field to a newly
// allocated ConfigEntry_List, preferring placement in s's segment.
func (s Repo_configAll_Results) NewAll(n int32) (ConfigEntry_List, error) {
	l, err := NewConfigEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ConfigEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Repo_configAll_Results_List is a list of Repo_configAll_Results.
type Repo_configAll_Results_List struct{ capnp.List }

// NewRepo_configAll_Results creates a new list of Repo_configAll_Results.
func NewRepo_configAll_Results_List(s *capnp.Segment, sz int32) (Repo_configAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configAll_Results_List{l}, err
}

func (s Repo_configAll_Results_List) At(i int) Repo_configAll_Results {
	return Repo_configAll_Results{s.List.Struct(i)}
}

func (s Repo_configAll_Results_List) Set(i int, v Repo_configAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configAll_Results_List) String() string {
	str, _ := text.MarshalList(0xacf50d40a9d3436a, s.List)
	return str
}

// Repo_configAll_Results_Promise is a wrapper for a Repo_configAll_Results promised by a client call.
type Repo_configAll_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configAll_Results_Promise) Struct() (Repo_configAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configAll_Results{s}, err
}

type Repo_configDoc_Params struct{ capnp.Struct }

// Repo_configDoc_Params_TypeID is the unique identifier for the type Repo_configDoc_Params.
const Repo_configDoc_Params_TypeID = 0x9b96e8c9be077989

func NewRepo_configDoc_Params(s *capnp.Segment) (Repo_configDoc_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Params{st}, err
}

func NewRootRepo_configDoc_Params(s *capnp.Segment) (Repo_configDoc_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Params{st}, err
}

func ReadRootRepo_configDoc_Params(msg *capnp.Message) (Repo_configDoc_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configDoc_Params{root.Struct()}, err
}

func (s Repo_configDoc_Params) String() string {
	str, _ := text.Marshal(0x9b96e8c9be077989, s.Struct)
	return str
}

func (s Repo_configDoc_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configDoc_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configDoc_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configDoc_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configDoc_Params_List is a list of Repo_configDoc_Params.
type Repo_configDoc_Params_List struct{ capnp.List }

// NewRepo_configDoc_Params creates a new list of Repo_configDoc_Params.
func NewRepo_configDoc_Params_List(s *capnp.Segment, sz int32) (Repo_configDoc_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configDoc_Params_List{l}, err
}

func (s Repo_configDoc_Params_List) At(i int) Repo_configDoc_Params {
	return Repo_configDoc_Params{s.List.Struct(i)}
}

func (s Repo_configDoc_Params_List) Set(i int, v Repo_configDoc_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configDoc_Params_List) String() string {
	str, _ := text.MarshalList(0x9b96e8c9be077989, s.List)
	return str
}

// Repo_configDoc_Params_Promise is a wrapper for a Repo_configDoc_Params promised by a client call.
type Repo_configDoc_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configDoc_Params_Promise) Struct() (Repo_configDoc_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configDoc_Params{s}, err
}

type Repo_configDoc_Results struct{ capnp.Struct }

// Repo_configDoc_Results_TypeID is the unique identifier for the type Repo_configDoc_Results.
const Repo_configDoc_Results_TypeID = 0xa34213f24153536b

func NewRepo_configDoc_Results(s *capnp.Segment) (Repo_configDoc_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Results{st}, err
}

func NewRootRepo_configDoc_Results(s *capnp.Segment) (Repo_configDoc_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Results{st}, err
}

func ReadRootRepo_configDoc_Results(msg *capnp.Message) (Repo_configDoc_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configDoc_Results{root.Struct()}, err
}

func (s Repo_configDoc_Results) String() string {
	str, _ := text.Marshal(0xa34213f24153536b, s.Struct)
	return str
}

func (s Repo_configDoc_Results) Desc() (ConfigEntry, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigEntry{Struct: p.Struct()}, err
}

func (s Repo_configDoc_Results) HasDesc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configDoc_Results) SetDesc(v ConfigEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated ConfigEntry struct, preferring placement in s's segment.
func (s Repo_configDoc_Results) NewDesc() (ConfigEntry, error) {
	ss, err := NewConfigEntry(s.Struct.Segment())
	if err != nil {
		return ConfigEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Repo_configDoc_Results_List is a list of Repo_configDoc_Results.
type Repo_configDoc_Results_List struct{ capnp.List }

// NewRepo_configDoc_Results creates a new list of Repo_configDoc_Results.
func NewRepo_configDoc_Results_List(s *capnp.Segment, sz int32) (Repo_configDoc_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configDoc_Results_List{l}, err
}

func (s Repo_configDoc_Results_List) At(i int) Repo_configDoc_Results {
	return Repo_configDoc_Results{s.List.Struct(i)}
}

func (s Repo_configDoc_Results_List) Set(i int, v Repo_configDoc_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configDoc_Results_List) String() string {
	str, _ := text.MarshalList(0xa34213f24153536b, s.List)
	return str
}

// Repo_configDoc_Results_Promise is a wrapper for a Repo_configDoc_Results promised by a client call.
type Repo_configDoc_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configDoc_Results_Promise) Struct() (Repo_configDoc_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configDoc_Results{s}, err
}

func (p Repo_configDoc_Results_Promise) Desc() ConfigEntry_Promise {
	return ConfigEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo_become_Params struct{ capnp.Struct }

// Repo_become_Params_TypeID is the unique identifier for the type Repo_become_Params.
const Repo_become_Params_TypeID = 0xe75c9c74c2bacb82

func NewRepo_become_Params(s *capnp.Segment) (Repo_become_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_become_Params{st}, err
}

func NewRootRepo_become_Params(s *capnp.Segment) (Repo_become_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_become_Params{st}, err
}

func ReadRootRepo_become_Params(msg *capnp.Message) (Repo_become_Params, error) {
	root, err := msg.RootPtr()
	return Repo_become_Params{root.Struct()}, err
}

func (s Repo_become_Params) String() string {
	str, _ := text.Marshal(0xe75c9c74c2bacb82, s.Struct)
	return str
}

func (s Repo_become_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_become_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_become_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_become_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_become_Params_List is a list of Repo_become_Params.
type Repo_become_Params_List struct{ capnp.List }

// NewRepo_become_Params creates a new list of Repo_become_Params.
func NewRepo_become_Params_List(s *capnp.Segment, sz int32) (Repo_become_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_become_Params_List{l}, err
}

func (s Repo_become_Params_List) At(i int) Repo_become_Params {
	return Repo_become_Params{s.List.Struct(i)}
}

func (s Repo_become_Params_List) Set(i int, v Repo_become_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_become_Params_List) String() string {
	str, _ := text.MarshalList(0xe75c9c74c2bacb82, s.List)
	return str
}

// Repo_become_Params_Promise is a wrapper for a Repo_become_Params promised by a client call.
type Repo_become_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_become_Params_Promise) Struct() (Repo_become_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_become_Params{s}, err
}

type Repo_become_Results struct{ capnp.Struct }

// Repo_become_Results_TypeID is the unique identifier for the type Repo_become_Results.
const Repo_become_Results_TypeID = 0xeadaf2b11fded490

func NewRepo_become_Results(s *capnp.Segment) (Repo_become_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_become_Results{st}, err
}

func NewRootRepo_become_Results(s *capnp.Segment) (Repo_become_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_become_Results{st}, err
}

func ReadRootRepo_become_Results(msg *capnp.Message) (Repo_become_Results, error) {
	root, err := msg.RootPtr()
	return Repo_become_Results{root.Struct()}, err
}

func (s Repo_become_Results) String() string {
	str, _ := text.Marshal(0xeadaf2b11fded490, s.Struct)
	return str
}

// Repo_become_Results_List is a list of Repo_become_Results.
type Repo_become_Results_List struct{ capnp.List }

// NewRepo_become_Results creates a new list of Repo_become_Results.
func NewRepo_become_Results_List(s *capnp.Segment, sz int32) (Repo_become_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_become_Results_List{l}, err
}

func (s Repo_become_Results_List) At(i int) Repo_become_Results {
	return Repo_become_Results{s.List.Struct(i)}
}

func (s Repo_become_Results_List) Set(i int, v Repo_become_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_become_Results_List) String() string {
	str, _ := text.MarshalList(0xeadaf2b11fded490, s.List)
	return str
}

// Repo_become_Results_Promise is a wrapper for a Repo_become_Results promised by a client call.
type Repo_become_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_become_Results_Promise) Struct() (Repo_become_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_become_Results{s}, err
}

type Repo_fstabAdd_Params struct{ capnp.Struct }

// Repo_fstabAdd_Params_TypeID is the unique identifier for the type Repo_fstabAdd_Params.
const Repo_fstabAdd_Params_TypeID = 0xd1afceb8146949d4

func NewRepo_fstabAdd_Params(s *capnp.Segment) (Repo_fstabAdd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Repo_fstabAdd_Params{st}, err
}

func NewRootRepo_fstabAdd_Params(s *capnp.Segment) (Repo_fstabAdd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Repo_fstabAdd_Params{st}, err
}

func ReadRootRepo_fstabAdd_Params(msg *capnp.Message) (Repo_fstabAdd_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabAdd_Params{root.Struct()}, err
}

func (s Repo_fstabAdd_Params) String() string {
	str, _ := text.Marshal(0xd1afceb8146949d4, s.Struct)
	return str
}

func (s Repo_fstabAdd_Params) MountName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_fstabAdd_Params) HasMountName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) MountNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_fstabAdd_Params) SetMountName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_fstabAdd_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_fstabAdd_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_fstabAdd_Params) SetMountPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Repo_fstabAdd_Params) Options() (MountOptions, error) {
	p, err := s.Struct.Ptr(2)
	return MountOptions{Struct: p.Struct()}, err
}

func (s Repo_fstabAdd_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) SetOptions(v MountOptions) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated MountOptions struct, preferring placement in s's segment.
func (s Repo_fstabAdd_Params) NewOptions() (MountOptions, error) {
	ss, err := NewMountOptions(s.Struct.Segment())
	if err != nil {
		return MountOptions{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Repo_fstabAdd_Params_List is a list of Repo_fstabAdd_Params.
type Repo_fstabAdd_Params_List struct{ capnp.List }

// NewRepo_fstabAdd_Params creates a new list of Repo_fstabAdd_Params.
func NewRepo_fstabAdd_Params_List(s *capnp.Segment, sz int32) (Repo_fstabAdd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Repo_fstabAdd_Params_List{l}, err
}

func (s Repo_fstabAdd_Params_List) At(i int) Repo_fstabAdd_Params {
	return Repo_fstabAdd_Params{s.List.Struct(i)}
}

func (s Repo_fstabAdd_Params_List) Set(i int, v Repo_fstabAdd_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabAdd_Params_List) String() string {
	str, _ := text.MarshalList(0xd1afceb8146949d4, s.List)
	return str
}

// Repo_fstabAdd_Params_Promise is a wrapper for a Repo_fstabAdd_Params promised by a client call.
type Repo_fstabAdd_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabAdd_Params_Promise) Struct() (Repo_fstabAdd_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabAdd_Params{s}, err
}

func (p Repo_fstabAdd_Params_Promise) Options() MountOptions_Promise {
	return MountOptions_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Repo_fstabAdd_Results struct{ capnp.Struct }

// Repo_fstabAdd_Results_TypeID is the unique identifier for the type Repo_fstabAdd_Results.
const Repo_fstabAdd_Results_TypeID = 0xbb83332a93ffdcad

func NewRepo_fstabAdd_Results(s *capnp.Segment) (Repo_fstabAdd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabAdd_Results{st}, err
}

func NewRootRepo_fstabAdd_Results(s *capnp.Segment) (Repo_fstabAdd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabAdd_Results{st}, err
}

func ReadRootRepo_fstabAdd_Results(msg *capnp.Message) (Repo_fstabAdd_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabAdd_Results{root.Struct()}, err
}

func (s Repo_fstabAdd_Results) String() string {
	str, _ := text.Marshal(0xbb83332a93ffdcad, s.Struct)
	return str
}

// Repo_fstabAdd_Results_List is a list of Repo_fstabAdd_Results.
type Repo_fstabAdd_Results_List struct{ capnp.List }

// NewRepo_fstabAdd_Results creates a new list of Repo_fstabAdd_Results.
func NewRepo_fstabAdd_Results_List(s *capnp.Segment, sz int32) (Repo_fstabAdd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabAdd_Results_List{l}, err
}

func (s Repo_fstabAdd_Results_List) At(i int) Repo_fstabAdd_Results {
	return Repo_fstabAdd_Results{s.List.Struct(i)}
}

func (s Repo_fstabAdd_Results_List) Set(i int, v Repo_fstabAdd_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabAdd_Results_List) String() string {
	str, _ := text.MarshalList(0xbb83332a93ffdcad, s.List)
	return str
}

// Repo_fstabAdd_Results_Promise is a wrapper for a Repo_fstabAdd_Results promised by a client call.
type Repo_fstabAdd_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabAdd_Results_Promise) Struct() (Repo_fstabAdd_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabAdd_Results{s}, err
}

type Repo_fstabRemove_Params struct{ capnp.Struct }

// Repo_fstabRemove_Params_TypeID is the unique identifier for the type Repo_fstabRemove_Params.
const Repo_fstabRemove_Params_TypeID = 0x86d95afae10f0893

func NewRepo_fstabRemove_Params(s *capnp.Segment) (Repo_fstabRemove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabRemove_Params{st}, err
}

func NewRootRepo_fstabRemove_Params(s *capnp.Segment) (Repo_fstabRemove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabRemove_Params{st}, err
}

func ReadRootRepo_fstabRemove_Params(msg *capnp.Message) (Repo_fstabRemove_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabRemove_Params{root.Struct()}, err
}

func (s Repo_fstabRemove_Params) String() string {
	str, _ := text.Marshal(0x86d95afae10f0893, s.Struct)
	return str
}

func (s Repo_fstabRemove_Params) MountName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_fstabRemove_Params) HasMountName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabRemove_Params) MountNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_fstabRemove_Params) SetMountName(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_fstabRemove_Params_List is a list of Repo_fstabRemove_Params.
type Repo_fstabRemove_Params_List struct{ capnp.List }

// NewRepo_fstabRemove_Params creates a new list of Repo_fstabRemove_Params.
func NewRepo_fstabRemove_Params_List(s *capnp.Segment, sz int32) (Repo_fstabRemove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_fstabRemove_Params_List{l}, err
}

func (s Repo_fstabRemove_Params_List) At(i int) Repo_fstabRemove_Params {
	return Repo_fstabRemove_Params{s.List.Struct(i)}
}

func (s Repo_fstabRemove_Params_List) Set(i int, v Repo_fstabRemove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabRemove_Params_List) String() string {
	str, _ := text.MarshalList(0x86d95afae10f0893, s.List)
	return str
}

// Repo_fstabRemove_Params_Promise is a wrapper for a Repo_fstabRemove_Params promised by a client call.
type Repo_fstabRemove_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabRemove_Params_Promise) Struct() (Repo_fstabRemove_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabRemove_Params{s}, err
}

type Repo_fstabRemove_Results struct{ capnp.Struct }

// Repo_fstabRemove_Results_TypeID is the unique identifier for the type Repo_fstabRemove_Results.
const Repo_fstabRemove_Results_TypeID = 0xc3fcefc580775485

func NewRepo_fstabRemove_Results(s *capnp.Segment) (Repo_fstabRemove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabRemove_Results{st}, err
}

func NewRootRepo_fstabRemove_Results(s *capnp.Segment) (Repo_fstabRemove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabRemove_Results{st}, err
}

func ReadRootRepo_fstabRemove_Results(msg *capnp.Message) (Repo_fstabRemove_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabRemove_Results{root.Struct()}, err
}

func (s Repo_fstabRemove_Results) String() string {
	str, _ := text.Marshal(0xc3fcefc580775485, s.Struct)
	return str
}

// Repo_fstabRemove_Results_List is a list of Repo_fstabRemove_Results.
type Repo_fstabRemove_Results_List struct{ capnp.List }

// NewRepo_fstabRemove_Results creates a new list of Repo_fstabRemove_Results.
func NewRepo_fstabRemove_Results_List(s *capnp.Segment, sz int32) (Repo_fstabRemove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabRemove_Results_List{l}, err
}

func (s Repo_fstabRemove_Results_List) At(i int) Repo_fstabRemove_Results {
	return Repo_fstabRemove_Results{s.List.Struct(i)}
}

func (s Repo_fstabRemove_Results_List) Set(i int, v Repo_fstabRemove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabRemove_Results_List) String() string {
	str, _ := text.MarshalList(0xc3fcefc580775485, s.List)
	return str
}

// Repo_fstabRemove_Results_Promise is a wrapper for a Repo_fstabRemove_Results promised by a client call.
type Repo_fstabRemove_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabRemove_Results_Promise) Struct() (Repo_fstabRemove_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabRemove_Results{s}, err
}

type Repo_fstabApply_Params struct{ capnp.Struct }

// Repo_fstabApply_Params_TypeID is the unique identifier for the type Repo_fstabApply_Params.
const Repo_fstabApply_Params_TypeID = 0xc7e5f661ac57ebb2

func NewRepo_fstabApply_Params(s *capnp.Segment) (Repo_fstabApply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Params{st}, err
}

func NewRootRepo_fstabApply_Params(s *capnp.Segment) (Repo_fstabApply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Params{st}, err
}

func ReadRootRepo_fstabApply_Params(msg *capnp.Message) (Repo_fstabApply_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabApply_Params{root.Struct()}, err
}

func (s Repo_fstabApply_Params) String() string {
	str, _ := text.Marshal(0xc7e5f661ac57ebb2, s.Struct)
	return str
}

// Repo_fstabApply_Params_List is a list of Repo_fstabApply_Params.
type Repo_fstabApply_Params_List struct{ capnp.List }

// NewRepo_fstabApply_Params creates a new list of Repo_fstabApply_Params.
func NewRepo_fstabApply_Params_List(s *capnp.Segment, sz int32) (Repo_fstabApply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabApply_Params_List{l}, err
}

func (s Repo_fstabApply_Params_List) At(i int) Repo_fstabApply_Params {
	return Repo_fstabApply_Params{s.List.Struct(i)}
}

func (s Repo_fstabApply_Params_List) Set(i int, v Repo_fstabApply_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabApply_Params_List) String() string {
	str, _ := text.MarshalList(0xc7e5f661ac57ebb2, s.List)
	return str
}

// Repo_fstabApply_Params_Promise is a wrapper for a Repo_fstabApply_Params promised by a client call.
type Repo_fstabApply_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabApply_Params_Promise) Struct() (Repo_fstabApply_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabApply_Params{s}, err
}

type Repo_fstabApply_Results struct{ capnp.Struct }

// Repo_fstabApply_Results_TypeID is the unique identifier for the type Repo_fstabApply_Results.
const Repo_fstabApply_Results_TypeID = 0xb5bf271ecf3bc074

func NewRepo_fstabApply_Results(s *capnp.Segment) (Repo_fstabApply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Results{st}, err
}

func NewRootRepo_fstabApply_Results(s *capnp.Segment) (Repo_fstabApply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Results{st}, err
}

func ReadRootRepo_fstabApply_Results(msg *capnp.Message) (Repo_fstabApply_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabApply_Results{root.Struct()}, err
}

func (s Repo_fstabApply_Results) String() string {
	str, _ := text.Marshal(0xb5bf271ecf3bc074, s.Struct)
	return str
}

// Repo_fstabApply_Results_List is a list of Repo_fstabApply_Results.
type Repo_fstabApply_Results_List struct{ capnp.List }

// NewRepo_fstabApply_Results creates a new list of Repo_fstabApply_Results.
func NewRepo_fstabApply_Results_List(s *capnp.Segment, sz int32) (Repo_fstabApply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabApply_Results_List{l}, err
}

func (s Repo_fstabApply_Results_List) At(i int) Repo_fstabApply_Results {
	return Repo_fstabApply_Results{s.List.Struct(i)}
}

func (s Repo_fstabApply_Results_List) Set(i int, v Repo_fstabApply_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabApply_Results_List) String() string {
	str, _ := text.MarshalList(0xb5bf271ecf3bc074, s.List)
	return str
}

// Repo_fstabApply_Results_Promise is a wrapper for a Repo_fstabApply_Results promised by a client call.
type Repo_fstabApply_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabApply_Results_Promise) Struct() (Repo_fstabApply_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabApply_Results{s}, err
}

type Repo_fstabList_Params struct{ capnp.Struct }

// Repo_fstabList_Params_TypeID is the unique identifier for the type Repo_fstabList_Params.
const Repo_fstabList_Params_TypeID = 0xd7315a3b3f92aa4a

func NewRepo_fstabList_Params(s *capnp.Segment) (Repo_fstabList_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabList_Params{st}, err
}

func NewRootRepo_fstabList_Params(s *capnp.Segment) (Repo_fstabList_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabList_Params{st}, err
}

func ReadRootRepo_fstabList_Params(msg *capnp.Message) (Repo_fstabList_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabList_Params{root.Struct()}, err
}

func (s Repo_fstabList_Params) String() string {
	str, _ := text.Marshal(0xd7315a3b3f92aa4a, s.Struct)
	return str
}

// Repo_fstabList_Params_List is a list of Repo_fstabList_Params.
type Repo_fstabList_Params_List struct{ capnp.List }

// NewRepo_fstabList_Params creates a new list of Repo_fstabList_Params.
func NewRepo_fstabList_Params_List(s *capnp.Segment, sz int32) (Repo_fstabList_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabList_Params_List{l}, err
}

func (s Repo_fstabList_Params_List) At(i int) Repo_fstabList_Params {
	return Repo_fstabList_Params{s.List.Struct(i)}
}

func (s Repo_fstabList_Params_List) Set(i int, v Repo_fstabList_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabList_Params_List) String() string {
	str, _ := text.MarshalList(0xd7315a3b3f92aa4a, s.List)
	return str
}

// Repo_fstabList_Params_Promise is a wrapper for a Repo_fstabList_Params promised by a client call.
type Repo_fstabList_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabList_Params_Promise) Struct() (Repo_fstabList_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabList_Params{s}, err
}

type Repo_fstabList_Results struct{ capnp.Struct }

// Repo_fstabList_Results_TypeID is the unique identifier for the type Repo_fstabList_Results.
const Repo_fstabList_Results_TypeID = 0xc44d12b3aee49f34

func NewRepo_fstabList_Results(s *capnp.Segment) (Repo_fstabList_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabList_Results{st}, err
}

func NewRootRepo_fstabList_Results(s *capnp.Segment) (Repo_fstabList_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabList_Results{st}, err
}

func ReadRootRepo_fstabList_Results(msg *capnp.Message) (Repo_fstabList_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabList_Results{root.Struct()}, err
}

func (s Repo_fstabList_Results) String() string {
	str, _ := text.Marshal(0xc44d12b3aee49f34, s.Struct)
	return str
}

func (s Repo_fstabList_Results) Mounts() (FsTabEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return FsTabEntry_List{List: p.List()}, err
}

func (s Repo_fstabList_Results) HasMounts() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabList_Results) SetMounts(v FsTabEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMounts sets the mounts field to a newly
// allocated FsTabEntry_List, preferring placement in s's segment.
func (s Repo_fstabList_Results) NewMounts(n int32) (FsTabEntry_List, error) {
	l, err := NewFsTabEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return FsTabEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Repo_fstabList_Results_List is a list of Repo_fstabList_Results.
type Repo_fstabList_Results_List struct{ capnp.List }

// NewRepo_fstabList_Results creates a new list of Repo_fstabList_Results.
func NewRepo_fstabList_Results_List(s *capnp.Segment, sz int32) (Repo_fstabList_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_fstabList_Results_List{l}, err
}

func (s Repo_fstabList_Results_List) At(i int) Repo_fstabList_Results {
	return Repo_fstabList_Results{s.List.Struct(i)}
}

func (s Repo_fstabList_Results_List) Set(i int, v Repo_fstabList_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabList_Results_List) String() string {
	str, _ := text.MarshalList(0xc44d12b3aee49f34, s.List)
	return str
}

// Repo_fstabList_Results_Promise is a wrapper for a Repo_fstabList_Results promised by a client call.
type Repo_fstabList_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabList_Results_Promise) Struct() (Repo_fstabList_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabList_Results{s}, err
}

type Repo_fstabUnmountAll_Params struct{ capnp.Struct }

// Repo_fstabUnmountAll_Params_TypeID is the unique identifier for the type Repo_fstabUnmountAll_Params.
const Repo_fstabUnmountAll_Params_TypeID = 0xbbec523e9fc1abfc

func NewRepo_fstabUnmountAll_Params(s *capnp.Segment) (Repo_fstabUnmountAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Params{st}, err
}

func NewRootRepo_fstabUnmountAll_Params(s *capnp.Segment) (Repo_fstabUnmountAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Params{st}, err
}

func ReadRootRepo_fstabUnmountAll_Params(msg *capnp.Message) (Repo_fstabUnmountAll_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabUnmountAll_Params{root.Struct()}, err
}

func (s Repo_fstabUnmountAll_Params) String() string {
	str, _ := text.Marshal(0xbbec523e9fc1abfc, s.Struct)
	return str
}

// Repo_fstabUnmountAll_Params_List is a list of Repo_fstabUnmountAll_Params.
type Repo_fstabUnmountAll_Params_List struct{ capnp.List }

// NewRepo_fstabUnmountAll_Params creates a new list of Repo_fstabUnmountAll_Params.
func NewRepo_fstabUnmountAll_Params_List(s *capnp.Segment, sz int32) (Repo_fstabUnmountAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabUnmountAll_Params_List{l}, err
}

func (s Repo_fstabUnmountAll_Params_List) At(i int) Repo_fstabUnmountAll_Params {
	return Repo_fstabUnmountAll_Params{s.List.Struct(i)}
}

func (s Repo_fstabUnmountAll_Params_List) Set(i int, v Repo_fstabUnmountAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabUnmountAll_Params_List) String() string {
	str, _ := text.MarshalList(0xbbec523e9fc1abfc, s.List)
	return str
}

// Repo_fstabUnmountAll_Params_Promise is a wrapper for a Repo_fstabUnmountAll_Params promised by a client call.
type Repo_fstabUnmountAll_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabUnmountAll_Params_Promise) Struct() (Repo_fstabUnmountAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabUnmountAll_Params{s}, err
}

type Repo_fstabUnmountAll_Results struct{ capnp.Struct }

// Repo_fstabUnmountAll_Results_TypeID is the unique identifier for the type Repo_fstabUnmountAll_Results.
const Repo_fstabUnmountAll_Results_TypeID = 0x8ae5aae9653b7b02

func NewRepo_fstabUnmountAll_Results(s *capnp.Segment) (Repo_fstabUnmountAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Results{st}, err
}

func NewRootRepo_fstabUnmountAll_Results(s *capnp.Segment) (Repo_fstabUnmountAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Results{st}, err
}

func ReadRootRepo_fstabUnmountAll_Results(msg *capnp.Message) (Repo_fstabUnmountAll_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabUnmountAll_Results{root.Struct()}, err
}

func (s Repo_fstabUnmountAll_Results) String() string {
	str, _ := text.Marshal(0x8ae5aae9653b7b02, s.Struct)
	return str
}

// Repo_fstabUnmountAll_Results_List is a list of Repo_fstabUnmountAll_Results.
type Repo_fstabUnmountAll_Results_List struct{ capnp.List }

// NewRepo_fstabUnmountAll_Results creates a new list of Repo_fstabUnmountAll_Results.
func NewRepo_fstabUnmountAll_Results_List(s *capnp.Segment, sz int32) (Repo_fstabUnmountAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabUnmountAll_Results_List{l}, err
}

func (s Repo_fstabUnmountAll_Results_List) At(i int) Repo_fstabUnmountAll_Results {
	return Repo_fstabUnmountAll_Results{s.List.Struct(i)}
}

func (s Repo_fstabUnmountAll_Results_List) Set(i int, v Repo_fstabUnmountAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabUnmountAll_Results_List) String() string {
	str, _ := text.MarshalList(0x8ae5aae9653b7b02, s.List)
	return str
}

// Repo_fstabUnmountAll_Results_Promise is a wrapper for a Repo_fstabUnmountAll_Results promised by a client call.
type Repo_fstabUnmountAll_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabUnmountAll_Results_Promise) Struct() (Repo_fstabUnmountAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabUnmountAll_Results{s}, err
}

type Repo_version_Params struct{ capnp.Struct }

// Repo_version_Params_TypeID is the unique identifier for the type Repo_version_Params.
const Repo_version_Params_TypeID = 0x98eadc167523156e

func NewRepo_version_Params(s *capnp.Segment) (Repo_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_version_Params{st}, err
}

func NewRootRepo_version_Params(s *capnp.Segment) (Repo_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_version_Params{st}, err
}

func ReadRootRepo_version_Params(msg *capnp.Message) (Repo_version_Params, error) {
	root, err := msg.RootPtr()
	return Repo_version_Params{root.Struct()}, err
}

func (s Repo_version_Params) String() string {
	str, _ := text.Marshal(0x98eadc167523156e, s.Struct)
	return str
}

// Repo_version_Params_List is a list of Repo_version_Params.
type Repo_version_Params_List struct{ capnp.List }

// NewRepo_version_Params creates a new list of Repo_version_Params.
func NewRepo_version_Params_List(s *capnp.Segment, sz int32) (Repo_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_version_Params_List{l}, err
}

func (s Repo_version_Params_List) At(i int) Repo_version_Params {
	return Repo_version_Params{s.List.Struct(i)}
}

func (s Repo_version_Params_List) Set(i int, v Repo_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_version_Params_List) String() string {
	str, _ := text.MarshalList(0x98eadc167523156e, s.List)
	return str
}

// Repo_version_Params_Promise is a wrapper for a Repo_version_Params promised by a client call.
type Repo_version_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_version_Params_Promise) Struct() (Repo_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_version_Params{s}, err
}

type Repo_version_Results struct{ capnp.Struct }

// Repo_version_Results_TypeID is the unique identifier for the type Repo_version_Results.
const Repo_version_Results_TypeID = 0xafe329bc8cad8f74

func NewRepo_version_Results(s *capnp.Segment) (Repo_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_version_Results{st}, err
}

func NewRootRepo_version_Results(s *capnp.Segment) (Repo_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_version_Results{st}, err
}

func ReadRootRepo_version_Results(msg *capnp.Message) (Repo_version_Results, error) {
	root, err := msg.RootPtr()
	return Repo_version_Results{root.Struct()}, err
}

func (s Repo_version_Results) String() string {
	str, _ := text.Marshal(0xafe329bc8cad8f74, s.Struct)
	return str
}

func (s Repo_version_Results) Version() (Version, error) {
	p, err := s.Struct.Ptr(0)
	return Version{Struct: p.Struct()}, err
}

func (s Repo_version_Results) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_version_Results) SetVersion(v Version) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVersion sets the version field to a newly
// allocated Version struct, preferring placement in s's segment.
func (s Repo_version_Results) NewVersion() (Version, error) {
	ss, err := NewVersion(s.Struct.Segment())
	if err != nil {
		return Version{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Repo_version_Results_List is a list of Repo_version_Results.
type Repo_version_Results_List struct{ capnp.List }

// NewRepo_version_Results creates a new list of Repo_version_Results.
func NewRepo_version_Results_List(s *capnp.Segment, sz int32) (Repo_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_version_Results_List{l}, err
}

func (s Repo_version_Results_List) At(i int) Repo_version_Results {
	return Repo_version_Results{s.List.Struct(i)}
}

func (s Repo_version_Results_List) Set(i int, v Repo_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_version_Results_List) String() string {
	str, _ := text.MarshalList(0xafe329bc8cad8f74, s.List)
	return str
}

// Repo_version_Results_Promise is a wrapper for a Repo_version_Results promised by a client call.
type Repo_version_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_version_Results_Promise) Struct() (Repo_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_version_Results{s}, err
}

func (p Repo_version_Results_Promise) Version() Version_Promise {
	return Version_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo_waitForInit_Params struct{ capnp.Struct }

// Repo_waitForInit_Params_TypeID is the unique identifier for the type Repo_waitForInit_Params.
const Repo_waitForInit_Params_TypeID = 0xac8fbc382ae513de

func NewRepo_waitForInit_Params(s *capnp.Segment) (Repo_waitForInit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Params{st}, err
}

func NewRootRepo_waitForInit_Params(s *capnp.Segment) (Repo_waitForInit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Params{st}, err
}

func ReadRootRepo_waitForInit_Params(msg *capnp.Message) (Repo_waitForInit_Params, error) {
	root, err := msg.RootPtr()
	return Repo_waitForInit_Params{root.Struct()}, err
}

func (s Repo_waitForInit_Params) String() string {
	str, _ := text.Marshal(0xac8fbc382ae513de, s.Struct)
	return str
}

// Repo_waitForInit_Params_List is a list of Repo_waitForInit_Params.
type Repo_waitForInit_Params_List struct{ capnp.List }

// NewRepo_waitForInit_Params creates a new list of Repo_waitForInit_Params.
func NewRepo_waitForInit_Params_List(s *capnp.Segment, sz int32) (Repo_waitForInit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_waitForInit_Params_List{l}, err
}

func (s Repo_waitForInit_Params_List) At(i int) Repo_waitForInit_Params {
	return Repo_waitForInit_Params{s.List.Struct(i)}
}

func (s Repo_waitForInit_Params_List) Set(i int, v Repo_waitForInit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_waitForInit_Params_List) String() string {
	str, _ := text.MarshalList(0xac8fbc382ae513de, s.List)
	return str
}

// Repo_waitForInit_Params_Promise is a wrapper for a Repo_waitForInit_Params promised by a client call.
type Repo_waitForInit_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_waitForInit_Params_Promise) Struct() (Repo_waitForInit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_waitForInit_Params{s}, err
}

type Repo_waitForInit_Results struct{ capnp.Struct }

// Repo_waitForInit_Results_TypeID is the unique identifier for the type Repo_waitForInit_Results.
const Repo_waitForInit_Results_TypeID = 0x96fe51446ad697f9

func NewRepo_waitForInit_Results(s *capnp.Segment) (Repo_waitForInit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Results{st}, err
}

func NewRootRepo_waitForInit_Results(s *capnp.Segment) (Repo_waitForInit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Results{st}, err
}

func ReadRootRepo_waitForInit_Results(msg *capnp.Message) (Repo_waitForInit_Results, error) {
	root, err := msg.RootPtr()
	return Repo_waitForInit_Results{root.Struct()}, err
}

func (s Repo_waitForInit_Results) String() string {
	str, _ := text.Marshal(0x96fe51446ad697f9, s.Struct)
	return str
}

// Repo_waitForInit_Results_List is a list of Repo_waitForInit_Results.
type Repo_waitForInit_Results_List struct{ capnp.List }

// NewRepo_waitForInit_Results creates a new list of Repo_waitForInit_Results.
func NewRepo_waitForInit_Results_List(s *capnp.Segment, sz int32) (Repo_waitForInit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_waitForInit_Results_List{l}, err
}

func (s Repo_waitForInit_Results_List) At(i int) Repo_waitForInit_Results {
	return Repo_waitForInit_Results{s.List.Struct(i)}
}

func (s Repo_waitForInit_Results_List) Set(i int, v Repo_waitForInit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_waitForInit_Results_List) String() string {
	str, _ := text.MarshalList(0x96fe51446ad697f9, s.List)
	return str
}

// Repo_waitForInit_Results_Promise is a wrapper for a Repo_waitForInit_Results promised by a client call.
type Repo_waitForInit_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_waitForInit_Results_Promise) Struct() (Repo_waitForInit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_waitForInit_Results{s}, err
}

type Repo_gatewayUserAdd_Params struct{ capnp.Struct }

// Repo_gatewayUserAdd_Params_TypeID is the unique identifier for the type Repo_gatewayUserAdd_Params.
const Repo_gatewayUserAdd_Params_TypeID = 0xcbd45f6552b4ba24

func NewRepo_gatewayUserAdd_Params(s *capnp.Segment) (Repo_gatewayUserAdd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_gatewayUserAdd_Params{st}, err
}

func NewRootRepo_gatewayUserAdd_Params(s *capnp.Segment) (Repo_gatewayUserAdd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_gatewayUserAdd_Params{st}, err
}

func ReadRootRepo_gatewayUserAdd_Params(msg *capnp.Message) (Repo_gatewayUserAdd_Params, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserAdd_Params{root.Struct()}, err
}

func (s Repo_gatewayUserAdd_Params) String() string {
	str, _ := text.Marshal(0xcbd45f6552b4ba24, s.Struct)
	return str
}

func (s Repo_gatewayUserAdd_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_gatewayUserAdd_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserAdd_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_gatewayUserAdd_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_gatewayUserAdd_Params) Password() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_gatewayUserAdd_Params) HasPassword() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserAdd_Params) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_gatewayUserAdd_Params) SetPassword(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Repo_gatewayUserAdd_Params) Folders() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Repo_gatewayUserAdd_Params) HasFolders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserAdd_Params) SetFolders(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Repo_gatewayUserAdd_Params) NewFolders(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Repo_gatewayUserAdd_Params) Rights() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s Repo_gatewayUserAdd_Params) HasRights() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserAdd_Params) SetRights(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRights sets the rights field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Repo_gatewayUserAdd_Params) NewRights(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Repo_gatewayUserAdd_Params_List is a list of Repo_gatewayUserAdd_Params.
type Repo_gatewayUserAdd_Params_List struct{ capnp.List }

// NewRepo_gatewayUserAdd_Params creates a new list of Repo_gatewayUserAdd_Params.
func NewRepo_gatewayUserAdd_Params_List(s *capnp.Segment, sz int32) (Repo_gatewayUserAdd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Repo_gatewayUserAdd_Params_List{l}, err
}

func (s Repo_gatewayUserAdd_Params_List) At(i int) Repo_gatewayUserAdd_Params {
	return Repo_gatewayUserAdd_Params{s.List.Struct(i)}
}

func (s Repo_gatewayUserAdd_Params_List) Set(i int, v Repo_gatewayUserAdd_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserAdd_Params_List) String() string {
	str, _ := text.MarshalList(0xcbd45f6552b4ba24, s.List)
	return str
}

// Repo_gatewayUserAdd_Params_Promise is a wrapper for a Repo_gatewayUserAdd_Params promised by a client call.
type Repo_gatewayUserAdd_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserAdd_Params_Promise) Struct() (Repo_gatewayUserAdd_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserAdd_Params{s}, err
}

type Repo_gatewayUserAdd_Results struct{ capnp.Struct }

// Repo_gatewayUserAdd_Results_TypeID is the unique identifier for the type Repo_gatewayUserAdd_Results.
const Repo_gatewayUserAdd_Results_TypeID = 0xbd8d8f80992c4d78

func NewRepo_gatewayUserAdd_Results(s *capnp.Segment) (Repo_gatewayUserAdd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserAdd_Results{st}, err
}

func NewRootRepo_gatewayUserAdd_Results(s *capnp.Segment) (Repo_gatewayUserAdd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserAdd_Results{st}, err
}

func ReadRootRepo_gatewayUserAdd_Results(msg *capnp.Message) (Repo_gatewayUserAdd_Results, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserAdd_Results{root.Struct()}, err
}

func (s Repo_gatewayUserAdd_Results) String() string {
	str, _ := text.Marshal(0xbd8d8f80992c4d78, s.Struct)
	return str
}

// Repo_gatewayUserAdd_Results_List is a list of Repo_gatewayUserAdd_Results.
type Repo_gatewayUserAdd_Results_List struct{ capnp.List }

// NewRepo_gatewayUserAdd_Results creates a new list of Repo_gatewayUserAdd_Results.
func NewRepo_gatewayUserAdd_Results_List(s *capnp.Segment, sz int32) (Repo_gatewayUserAdd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_gatewayUserAdd_Results_List{l}, err
}

func (s Repo_gatewayUserAdd_Results_List) At(i int) Repo_gatewayUserAdd_Results {
	return Repo_gatewayUserAdd_Results{s.List.Struct(i)}
}

func (s Repo_gatewayUserAdd_Results_List) Set(i int, v Repo_gatewayUserAdd_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserAdd_Results_List) String() string {
	str, _ := text.MarshalList(0xbd8d8f80992c4d78, s.List)
	return str
}

// Repo_gatewayUserAdd_Results_Promise is a wrapper for a Repo_gatewayUserAdd_Results promised by a client call.
type Repo_gatewayUserAdd_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserAdd_Results_Promise) Struct() (Repo_gatewayUserAdd_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserAdd_Results{s}, err
}

type Repo_gatewayUserRm_Params struct{ capnp.Struct }

// Repo_gatewayUserRm_Params_TypeID is the unique identifier for the type Repo_gatewayUserRm_Params.
const Repo_gatewayUserRm_Params_TypeID = 0xbda24ef378533894

func NewRepo_gatewayUserRm_Params(s *capnp.Segment) (Repo_gatewayUserRm_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_gatewayUserRm_Params{st}, err
}

func NewRootRepo_gatewayUserRm_Params(s *capnp.Segment) (Repo_gatewayUserRm_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_gatewayUserRm_Params{st}, err
}

func ReadRootRepo_gatewayUserRm_Params(msg *capnp.Message) (Repo_gatewayUserRm_Params, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserRm_Params{root.Struct()}, err
}

func (s Repo_gatewayUserRm_Params) String() string {
	str, _ := text.Marshal(0xbda24ef378533894, s.Struct)
	return str
}

func (s Repo_gatewayUserRm_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_gatewayUserRm_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserRm_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_gatewayUserRm_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_gatewayUserRm_Params_List is a list of Repo_gatewayUserRm_Params.
type Repo_gatewayUserRm_Params_List struct{ capnp.List }

// NewRepo_gatewayUserRm_Params creates a new list of Repo_gatewayUserRm_Params.
func NewRepo_gatewayUserRm_Params_List(s *capnp.Segment, sz int32) (Repo_gatewayUserRm_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_gatewayUserRm_Params_List{l}, err
}

func (s Repo_gatewayUserRm_Params_List) At(i int) Repo_gatewayUserRm_Params {
	return Repo_gatewayUserRm_Params{s.List.Struct(i)}
}

func (s Repo_gatewayUserRm_Params_List) Set(i int, v Repo_gatewayUserRm_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserRm_Params_List) String() string {
	str, _ := text.MarshalList(0xbda24ef378533894, s.List)
	return str
}

// Repo_gatewayUserRm_Params_Promise is a wrapper for a Repo_gatewayUserRm_Params promised by a client call.
type Repo_gatewayUserRm_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserRm_Params_Promise) Struct() (Repo_gatewayUserRm_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserRm_Params{s}, err
}

type Repo_gatewayUserRm_Results struct{ capnp.Struct }

// Repo_gatewayUserRm_Results_TypeID is the unique identifier for the type Repo_gatewayUserRm_Results.
const Repo_gatewayUserRm_Results_TypeID = 0xea498a2451bae614

func NewRepo_gatewayUserRm_Results(s *capnp.Segment) (Repo_gatewayUserRm_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserRm_Results{st}, err
}

func NewRootRepo_gatewayUserRm_Results(s *capnp.Segment) (Repo_gatewayUserRm_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserRm_Results{st}, err
}

func ReadRootRepo_gatewayUserRm_Results(msg *capnp.Message) (Repo_gatewayUserRm_Results, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserRm_Results{root.Struct()}, err
}

func (s Repo_gatewayUserRm_Results) String() string {
	str, _ := text.Marshal(0xea498a2451bae614, s.Struct)
	return str
}

// Repo_gatewayUserRm_Results_List is a list of Repo_gatewayUserRm_Results.
type Repo_gatewayUserRm_Results_List struct{ capnp.List }

// NewRepo_gatewayUserRm_Results creates a new list of Repo_gatewayUserRm_Results.
func NewRepo_gatewayUserRm_Results_List(s *capnp.Segment, sz int32) (Repo_gatewayUserRm_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_gatewayUserRm_Results_List{l}, err
}

func (s Repo_gatewayUserRm_Results_List) At(i int) Repo_gatewayUserRm_Results {
	return Repo_gatewayUserRm_Results{s.List.Struct(i)}
}

func (s Repo_gatewayUserRm_Results_List) Set(i int, v Repo_gatewayUserRm_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserRm_Results_List) String() string {
	str, _ := text.MarshalList(0xea498a2451bae614, s.List)
	return str
}

// Repo_gatewayUserRm_Results_Promise is a wrapper for a Repo_gatewayUserRm_Results promised by a client call.
type Repo_gatewayUserRm_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserRm_Results_Promise) Struct() (Repo_gatewayUserRm_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserRm_Results{s}, err
}

type Repo_gatewayUserList_Params struct{ capnp.Struct }

// Repo_gatewayUserList_Params_TypeID is the unique identifier for the type Repo_gatewayUserList_Params.
const Repo_gatewayUserList_Params_TypeID = 0x936b942a74db0be0

func NewRepo_gatewayUserList_Params(s *capnp.Segment) (Repo_gatewayUserList_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserList_Params{st}, err
}

func NewRootRepo_gatewayUserList_Params(s *capnp.Segment) (Repo_gatewayUserList_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_gatewayUserList_Params{st}, err
}

func ReadRootRepo_gatewayUserList_Params(msg *capnp.Message) (Repo_gatewayUserList_Params, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserList_Params{root.Struct()}, err
}

func (s Repo_gatewayUserList_Params) String() string {
	str, _ := text.Marshal(0x936b942a74db0be0, s.Struct)
	return str
}

// Repo_gatewayUserList_Params_List is a list of Repo_gatewayUserList_Params.
type Repo_gatewayUserList_Params_List struct{ capnp.List }

// NewRepo_gatewayUserList_Params creates a new list of Repo_gatewayUserList_Params.
func NewRepo_gatewayUserList_Params_List(s *capnp.Segment, sz int32) (Repo_gatewayUserList_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_gatewayUserList_Params_List{l}, err
}

func (s Repo_gatewayUserList_Params_List) At(i int) Repo_gatewayUserList_Params {
	return Repo_gatewayUserList_Params{s.List.Struct(i)}
}

func (s Repo_gatewayUserList_Params_List) Set(i int, v Repo_gatewayUserList_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserList_Params_List) String() string {
	str, _ := text.MarshalList(0x936b942a74db0be0, s.List)
	return str
}

// Repo_gatewayUserList_Params_Promise is a wrapper for a Repo_gatewayUserList_Params promised by a client call.
type Repo_gatewayUserList_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserList_Params_Promise) Struct() (Repo_gatewayUserList_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserList_Params{s}, err
}

type Repo_gatewayUserList_Results struct{ capnp.Struct }

// Repo_gatewayUserList_Results_TypeID is the unique identifier for the type Repo_gatewayUserList_Results.
const Repo_gatewayUserList_Results_TypeID = 0x82f304d5d4e81ee4

func NewRepo_gatewayUserList_Results(s *capnp.Segment) (Repo_gatewayUserList_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_gatewayUserList_Results{st}, err
}

func NewRootRepo_gatewayUserList_Results(s *capnp.Segment) (Repo_gatewayUserList_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_gatewayUserList_Results{st}, err
}

func ReadRootRepo_gatewayUserList_Results(msg *capnp.Message) (Repo_gatewayUserList_Results, error) {
	root, err := msg.RootPtr()
	return Repo_gatewayUserList_Results{root.Struct()}, err
}

func (s Repo_gatewayUserList_Results) String() string {
	str, _ := text.Marshal(0x82f304d5d4e81ee4, s.Struct)
	return str
}

func (s Repo_gatewayUserList_Results) Users() (capnp2.User_List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp2.User_List{List: p.List()}, err
}

func (s Repo_gatewayUserList_Results) HasUsers() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_gatewayUserList_Results) SetUsers(v capnp2.User_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated capnp2.User_List, preferring placement in s's segment.
func (s Repo_gatewayUserList_Results) NewUsers(n int32) (capnp2.User_List, error) {
	l, err := capnp2.NewUser_List(s.Struct.Segment(), n)
	if err != nil {
		return capnp2.User_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Repo_gatewayUserList_Results_List is a list of Repo_gatewayUserList_Results.
type Repo_gatewayUserList_Results_List struct{ capnp.List }

// NewRepo_gatewayUserList_Results creates a new list of Repo_gatewayUserList_Results.
func NewRepo_gatewayUserList_Results_List(s *capnp.Segment, sz int32) (Repo_gatewayUserList_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_gatewayUserList_Results_List{l}, err
}

func (s Repo_gatewayUserList_Results_List) At(i int) Repo_gatewayUserList_Results {
	return Repo_gatewayUserList_Results{s.List.Struct(i)}
}

func (s Repo_gatewayUserList_Results_List) Set(i int, v Repo_gatewayUserList_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_gatewayUserList_Results_List) String() string {
	str, _ := text.MarshalList(0x82f304d5d4e81ee4, s.List)
	return str
}

// Repo_gatewayUserList_Results_Promise is a wrapper for a Repo_gatewayUserList_Results promised by a client call.
type Repo_gatewayUserList_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_gatewayUserList_Results_Promise) Struct() (Repo_gatewayUserList_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_gatewayUserList_Results{s}, err
}

type Net struct{ Client capnp.Client }

// Net_TypeID is the unique identifier for the type Net.
const Net_TypeID = 0xaa133a60be5a7d01

func (c Net) RemoteAddOrUpdate(ctx context.Context, params func(Net_remoteAddOrUpdate_Params) error, opts ...capnp.CallOption) Net_remoteAddOrUpdate_Results_Promise {
	if c.Client == nil {
		return Net_remoteAddOrUpdate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAddOrUpdate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteAddOrUpdate_Params{Struct: s}) }
	}
	return Net_remoteAddOrUpdate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteRm(ctx context.Context, params func(Net_remoteRm_Params) error, opts ...capnp.CallOption) Net_remoteRm_Results_Promise {
	if c.Client == nil {
		return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteRm_Params{Struct: s}) }
	}
	return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteLs(ctx context.Context, params func(Net_remoteLs_Params) error, opts ...capnp.CallOption) Net_remoteLs_Results_Promise {
	if c.Client == nil {
		return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteLs_Params{Struct: s}) }
	}
	return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteUpdate(ctx context.Context, params func(Net_remoteUpdate_Params) error, opts ...capnp.CallOption) Net_remoteUpdate_Results_Promise {
	if c.Client == nil {
		return Net_remoteUpdate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteUpdate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteUpdate_Params{Struct: s}) }
	}
	return Net_remoteUpdate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteSave(ctx context.Context, params func(Net_remoteSave_Params) error, opts ...capnp.CallOption) Net_remoteSave_Results_Promise {
	if c.Client == nil {
		return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteSave_Params{Struct: s}) }
	}
	return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemotePing(ctx context.Context, params func(Net_remotePing_Params) error, opts ...capnp.CallOption) Net_remotePing_Results_Promise {
	if c.Client == nil {
		return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remotePing_Params{Struct: s}) }
	}
	return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteClear(ctx context.Context, params func(Net_remoteClear_Params) error, opts ...capnp.CallOption) Net_remoteClear_Results_Promise {
	if c.Client == nil {
		return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteClear_Params{Struct: s}) }
	}
	return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) NetLocate(ctx context.Context, params func(Net_netLocate_Params) error, opts ...capnp.CallOption) Net_netLocate_Results_Promise {
	if c.Client == nil {
		return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocate_Params{Struct: s}) }
	}
	return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) NetLocateNext(ctx context.Context, params func(Net_netLocateNext_Params) error, opts ...capnp.CallOption) Net_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocateNext_Params{Struct: s}) }
	}
	return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Whoami(ctx context.Context, params func(Net_whoami_Params) error, opts ...capnp.CallOption) Net_whoami_Results_Promise {
	if c.Client == nil {
		return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_whoami_Params{Struct: s}) }
	}
	return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Connect(ctx context.Context, params func(Net_connect_Params) error, opts ...capnp.CallOption) Net_connect_Results_Promise {
	if c.Client == nil {
		return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_connect_Params{Struct: s}) }
	}
	return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Disconnect(ctx context.Context, params func(Net_disconnect_Params) error, opts ...capnp.CallOption) Net_disconnect_Results_Promise {
	if c.Client == nil {
		return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_disconnect_Params{Struct: s}) }
	}
	return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteOnlineList(ctx context.Context, params func(Net_remoteOnlineList_Params) error, opts ...capnp.CallOption) Net_remoteOnlineList_Results_Promise {
	if c.Client == nil {
		return Net_remoteOnlineList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteOnlineList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteOnlineList_Params{Struct: s}) }
	}
	return Net_remoteOnlineList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteByName(ctx context.Context, params func(Net_remoteByName_Params) error, opts ...capnp.CallOption) Net_remoteByName_Results_Promise {
	if c.Client == nil {
		return Net_remoteByName_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteByName",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteByName_Params{Struct: s}) }
	}
	return Net_remoteByName_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Net_Server interface {
	RemoteAddOrUpdate(Net_remoteAddOrUpdate) error

	RemoteRm(Net_remoteRm) error

	RemoteLs(Net_remoteLs) error

	RemoteUpdate(Net_remoteUpdate) error

	RemoteSave(Net_remoteSave) error

	RemotePing(Net_remotePing) error

	RemoteClear(Net_remoteClear) error

	NetLocate(Net_netLocate) error

	NetLocateNext(Net_netLocateNext) error

	Whoami(Net_whoami) error

	Connect(Net_connect) error

	Disconnect(Net_disconnect) error

	RemoteOnlineList(Net_remoteOnlineList) error

	RemoteByName(Net_remoteByName) error
}

func Net_ServerToClient(s Net_Server) Net {
	c, _ := s.(server.Closer)
	return Net{Client: server.New(Net_Methods(nil, s), c)}
}

func Net_Methods(methods []server.Method, s Net_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 14)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAddOrUpdate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteAddOrUpdate{c, opts, Net_remoteAddOrUpdate_Params{Struct: p}, Net_remoteAddOrUpdate_Results{Struct: r}}
			return s.RemoteAddOrUpdate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteRm{c, opts, Net_remoteRm_Params{Struct: p}, Net_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteLs{c, opts, Net_remoteLs_Params{Struct: p}, Net_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteUpdate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteUpdate{c, opts, Net_remoteUpdate_Params{Struct: p}, Net_remoteUpdate_Results{Struct: r}}
			return s.RemoteUpdate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteSave{c, opts, Net_remoteSave_Params{Struct: p}, Net_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remotePing{c, opts, Net_remotePing_Params{Struct: p}, Net_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteClear{c, opts, Net_remoteClear_Params{Struct: p}, Net_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocate{c, opts, Net_netLocate_Params{Struct: p}, Net_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocateNext{c, opts, Net_netLocateNext_Params{Struct: p}, Net_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_whoami{c, opts, Net_whoami_Params{Struct: p}, Net_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_connect{c, opts, Net_connect_Params{Struct: p}, Net_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_disconnect{c, opts, Net_disconnect_Params{Struct: p}, Net_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteOnlineList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteOnlineList{c, opts, Net_remoteOnlineList_Params{Struct: p}, Net_remoteOnlineList_Results{Struct: r}}
			return s.RemoteOnlineList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteByName",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteByName{c, opts, Net_remoteByName_Params{Struct: p}, Net_remoteByName_Results{Struct: r}}
			return s.RemoteByName(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Net_remoteAddOrUpdate holds the arguments for a server call to Net.remoteAddOrUpdate.
type Net_remoteAddOrUpdate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteAddOrUpdate_Params
	Results Net_remoteAddOrUpdate_Results
}

// Net_remoteRm holds the arguments for a server call to Net.remoteRm.
type Net_remoteRm struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteRm_Params
	Results Net_remoteRm_Results
}

// Net_remoteLs holds the arguments for a server call to Net.remoteLs.
type Net_remoteLs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteLs_Params
	Results Net_remoteLs_Results
}

// Net_remoteUpdate holds the arguments for a server call to Net.remoteUpdate.
type Net_remoteUpdate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteUpdate_Params
	Results Net_remoteUpdate_Results
}

// Net_remoteSave holds the arguments for a server call to Net.remoteSave.
type Net_remoteSave struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteSave_Params
	Results Net_remoteSave_Results
}

// Net_remotePing holds the arguments for a server call to Net.remotePing.
type Net_remotePing struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remotePing_Params
	Results Net_remotePing_Results
}

// Net_remoteClear holds the arguments for a server call to Net.remoteClear.
type Net_remoteClear struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteClear_Params
	Results Net_remoteClear_Results
}

// Net_netLocate holds the arguments for a server call to Net.netLocate.
type Net_netLocate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_netLocate_Params
	Results Net_netLocate_Results
}

// Net_netLocateNext holds the arguments for a server call to Net.netLocateNext.
type Net_netLocateNext struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_netLocateNext_Params
	Results Net_netLocateNext_Results
}

// Net_whoami holds the arguments for a server call to Net.whoami.
type Net_whoami struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_whoami_Params
	Results Net_whoami_Results
}

// Net_connect holds the arguments for a server call to Net.connect.
type Net_connect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_connect_Params
	Results Net_connect_Results
}

// Net_disconnect holds the arguments for a server call to Net.disconnect.
type Net_disconnect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_disconnect_Params
	Results Net_disconnect_Results
}

// Net_remoteOnlineList holds the arguments for a server call to Net.remoteOnlineList.
type Net_remoteOnlineList struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteOnlineList_Params
	Results Net_remoteOnlineList_Results
}

// Net_remoteByName holds the arguments for a server call to Net.remoteByName.
type Net_remoteByName struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteByName_Params
	Results Net_remoteByName_Results
}

type Net_remoteAddOrUpdate_Params struct{ capnp.Struct }

// Net_remoteAddOrUpdate_Params_TypeID is the unique identifier for the type Net_remoteAddOrUpdate_Params.
const Net_remoteAddOrUpdate_Params_TypeID = 0xf5c310bd5e2aa138

func NewNet_remoteAddOrUpdate_Params(s *capnp.Segment) (Net_remoteAddOrUpdate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteAddOrUpdate_Params{st}, err
}

func NewRootNet_remoteAddOrUpdate_Params(s *capnp.Segment) (Net_remoteAddOrUpdate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteAddOrUpdate_Params{st}, err
}

func ReadRootNet_remoteAddOrUpdate_Params(msg *capnp.Message) (Net_remoteAddOrUpdate_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteAddOrUpdate_Params{root.Struct()}, err
}

func (s Net_remoteAddOrUpdate_Params) String() string {
	str, _ := text.Marshal(0xf5c310bd5e2aa138, s.Struct)
	return str
}

func (s Net_remoteAddOrUpdate_Params) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s Net_remoteAddOrUpdate_Params) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteAddOrUpdate_Params) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s Net_remoteAddOrUpdate_Params) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_remoteAddOrUpdate_Params_List is a list of Net_remoteAddOrUpdate_Params.
type Net_remoteAddOrUpdate_Params_List struct{ capnp.List }

// NewNet_remoteAddOrUpdate_Params creates a new list of Net_remoteAddOrUpdate_Params.
func NewNet_remoteAddOrUpdate_Params_List(s *capnp.Segment, sz int32) (Net_remoteAddOrUpdate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteAddOrUpdate_Params_List{l}, err
}

func (s Net_remoteAddOrUpdate_Params_List) At(i int) Net_remoteAddOrUpdate_Params {
	return Net_remoteAddOrUpdate_Params{s.List.Struct(i)}
}

func (s Net_remoteAddOrUpdate_Params_List) Set(i int, v Net_remoteAddOrUpdate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteAddOrUpdate_Params_List) String() string {
	str, _ := text.MarshalList(0xf5c310bd5e2aa138, s.List)
	return str
}

// Net_remoteAddOrUpdate_Params_Promise is a wrapper for a Net_remoteAddOrUpdate_Params promised by a client call.
type Net_remoteAddOrUpdate_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteAddOrUpdate_Params_Promise) Struct() (Net_remoteAddOrUpdate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteAddOrUpdate_Params{s}, err
}

func (p Net_remoteAddOrUpdate_Params_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_remoteAddOrUpdate_Results struct{ capnp.Struct }

// Net_remoteAddOrUpdate_Results_TypeID is the unique identifier for the type Net_remoteAddOrUpdate_Results.
const Net_remoteAddOrUpdate_Results_TypeID = 0xfcaa6dc30ba75197

func NewNet_remoteAddOrUpdate_Results(s *capnp.Segment) (Net_remoteAddOrUpdate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteAddOrUpdate_Results{st}, err
}

func NewRootNet_remoteAddOrUpdate_Results(s *capnp.Segment) (Net_remoteAddOrUpdate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteAddOrUpdate_Results{st}, err
}

func ReadRootNet_remoteAddOrUpdate_Results(msg *capnp.Message) (Net_remoteAddOrUpdate_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteAddOrUpdate_Results{root.Struct()}, err
}

func (s Net_remoteAddOrUpdate_Results) String() string {
	str, _ := text.Marshal(0xfcaa6dc30ba75197, s.Struct)
	return str
}

// Net_remoteAddOrUpdate_Results_List is a list of Net_remoteAddOrUpdate_Results.
type Net_remoteAddOrUpdate_Results_List struct{ capnp.List }

// NewNet_remoteAddOrUpdate_Results creates a new list of Net_remoteAddOrUpdate_Results.
func NewNet_remoteAddOrUpdate_Results_List(s *capnp.Segment, sz int32) (Net_remoteAddOrUpdate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteAddOrUpdate_Results_List{l}, err
}

func (s Net_remoteAddOrUpdate_Results_List) At(i int) Net_remoteAddOrUpdate_Results {
	return Net_remoteAddOrUpdate_Results{s.List.Struct(i)}
}

func (s Net_remoteAddOrUpdate_Results_List) Set(i int, v Net_remoteAddOrUpdate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteAddOrUpdate_Results_List) String() string {
	str, _ := text.MarshalList(0xfcaa6dc30ba75197, s.List)
	return str
}

// Net_remoteAddOrUpdate_Results_Promise is a wrapper for a Net_remoteAddOrUpdate_Results promised by a client call.
type Net_remoteAddOrUpdate_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteAddOrUpdate_Results_Promise) Struct() (Net_remoteAddOrUpdate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteAddOrUpdate_Results{s}, err
}

type Net_remoteRm_Params struct{ capnp.Struct }

// Net_remoteRm_Params_TypeID is the unique identifier for the type Net_remoteRm_Params.
const Net_remoteRm_Params_TypeID = 0xf485a561c31c83d2

func NewNet_remoteRm_Params(s *capnp.Segment) (Net_remoteRm_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteRm_Params{st}, err
}

func NewRootNet_remoteRm_Params(s *capnp.Segment) (Net_remoteRm_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteRm_Params{st}, err
}

func ReadRootNet_remoteRm_Params(msg *capnp.Message) (Net_remoteRm_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteRm_Params{root.Struct()}, err
}

func (s Net_remoteRm_Params) String() string {
	str, _ := text.Marshal(0xf485a561c31c83d2, s.Struct)
	return str
}

func (s Net_remoteRm_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_remoteRm_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteRm_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_remoteRm_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Net_remoteRm_Params_List is a list of Net_remoteRm_Params.
type Net_remoteRm_Params_List struct{ capnp.List }

// NewNet_remoteRm_Params creates a new list of Net_remoteRm_Params.
func NewNet_remoteRm_Params_List(s *capnp.Segment, sz int32) (Net_remoteRm_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteRm_Params_List{l}, err
}

func (s Net_remoteRm_Params_List) At(i int) Net_remoteRm_Params {
	return Net_remoteRm_Params{s.List.Struct(i)}
}

func (s Net_remoteRm_Params_List) Set(i int, v Net_remoteRm_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteRm_Params_List) String() string {
	str, _ := text.MarshalList(0xf485a561c31c83d2, s.List)
	return str
}

// Net_remoteRm_Params_Promise is a wrapper for a Net_remoteRm_Params promised by a client call.
type Net_remoteRm_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteRm_Params_Promise) Struct() (Net_remoteRm_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteRm_Params{s}, err
}

type Net_remoteRm_Results struct{ capnp.Struct }

// Net_remoteRm_Results_TypeID is the unique identifier for the type Net_remoteRm_Results.
const Net_remoteRm_Results_TypeID = 0xdb78f249dcc7b9f1

func NewNet_remoteRm_Results(s *capnp.Segment) (Net_remoteRm_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteRm_Results{st}, err
}

func NewRootNet_remoteRm_Results(s *capnp.Segment) (Net_remoteRm_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteRm_Results{st}, err
}

func ReadRootNet_remoteRm_Results(msg *capnp.Message) (Net_remoteRm_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteRm_Results{root.Struct()}, err
}

func (s Net_remoteRm_Results) String() string {
	str, _ := text.Marshal(0xdb78f249dcc7b9f1, s.Struct)
	return str
}

// Net_remoteRm_Results_List is a list of Net_remoteRm_Results.
type Net_remoteRm_Results_List struct{ capnp.List }

// NewNet_remoteRm_Results creates a new list of Net_remoteRm_Results.
func NewNet_remoteRm_Results_List(s *capnp.Segment, sz int32) (Net_remoteRm_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteRm_Results_List{l}, err
}

func (s Net_remoteRm_Results_List) At(i int) Net_remoteRm_Results {
	return Net_remoteRm_Results{s.List.Struct(i)}
}

func (s Net_remoteRm_Results_List) Set(i int, v Net_remoteRm_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteRm_Results_List) String() string {
	str, _ := text.MarshalList(0xdb78f249dcc7b9f1, s.List)
	return str
}

// Net_remoteRm_Results_Promise is a wrapper for a Net_remoteRm_Results promised by a client call.
type Net_remoteRm_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteRm_Results_Promise) Struct() (Net_remoteRm_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteRm_Results{s}, err
}

type Net_remoteLs_Params struct{ capnp.Struct }

// Net_remoteLs_Params_TypeID is the unique identifier for the type Net_remoteLs_Params.
const Net_remoteLs_Params_TypeID = 0xc18496cf650e6886

func NewNet_remoteLs_Params(s *capnp.Segment) (Net_remoteLs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteLs_Params{st}, err
}

func NewRootNet_remoteLs_Params(s *capnp.Segment) (Net_remoteLs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteLs_Params{st}, err
}

func ReadRootNet_remoteLs_Params(msg *capnp.Message) (Net_remoteLs_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteLs_Params{root.Struct()}, err
}

func (s Net_remoteLs_Params) String() string {
	str, _ := text.Marshal(0xc18496cf650e6886, s.Struct)
	return str
}

// Net_remoteLs_Params_List is a list of Net_remoteLs_Params.
type Net_remoteLs_Params_List struct{ capnp.List }

// NewNet_remoteLs_Params creates a new list of Net_remoteLs_Params.
func NewNet_remoteLs_Params_List(s *capnp.Segment, sz int32) (Net_remoteLs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteLs_Params_List{l}, err
}

func (s Net_remoteLs_Params_List) At(i int) Net_remoteLs_Params {
	return Net_remoteLs_Params{s.List.Struct(i)}
}

func (s Net_remoteLs_Params_List) Set(i int, v Net_remoteLs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteLs_Params_List) String() string {
	str, _ := text.MarshalList(0xc18496cf650e6886, s.List)
	return str
}

// Net_remoteLs_Params_Promise is a wrapper for a Net_remoteLs_Params promised by a client call.
type Net_remoteLs_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteLs_Params_Promise) Struct() (Net_remoteLs_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteLs_Params{s}, err
}

type Net_remoteLs_Results struct{ capnp.Struct }

// Net_remoteLs_Results_TypeID is the unique identifier for the type Net_remoteLs_Results.
const Net_remoteLs_Results_TypeID = 0xb2255c049c7bc42f

func NewNet_remoteLs_Results(s *capnp.Segment) (Net_remoteLs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteLs_Results{st}, err
}

func NewRootNet_remoteLs_Results(s *capnp.Segment) (Net_remoteLs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteLs_Results{st}, err
}

func ReadRootNet_remoteLs_Results(msg *capnp.Message) (Net_remoteLs_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteLs_Results{root.Struct()}, err
}

func (s Net_remoteLs_Results) String() string {
	str, _ := text.Marshal(0xb2255c049c7bc42f, s.Struct)
	return str
}

func (s Net_remoteLs_Results) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Net_remoteLs_Results) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteLs_Results) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Net_remoteLs_Results) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_remoteLs_Results_List is a list of Net_remoteLs_Results.
type Net_remoteLs_Results_List struct{ capnp.List }

// NewNet_remoteLs_Results creates a new list of Net_remoteLs_Results.
func NewNet_remoteLs_Results_List(s *capnp.Segment, sz int32) (Net_remoteLs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteLs_Results_List{l}, err
}

func (s Net_remoteLs_Results_List) At(i int) Net_remoteLs_Results {
	return Net_remoteLs_Results{s.List.Struct(i)}
}

func (s Net_remoteLs_Results_List) Set(i int, v Net_remoteLs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteLs_Results_List) String() string {
	str, _ := text.MarshalList(0xb2255c049c7bc42f, s.List)
	return str
}

// Net_remoteLs_Results_Promise is a wrapper for a Net_remoteLs_Results promised by a client call.
type Net_remoteLs_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteLs_Results_Promise) Struct() (Net_remoteLs_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteLs_Results{s}, err
}

type Net_remoteUpdate_Params struct{ capnp.Struct }

// Net_remoteUpdate_Params_TypeID is the unique identifier for the type Net_remoteUpdate_Params.
const Net_remoteUpdate_Params_TypeID = 0xc089763bca3e3f44

func NewNet_remoteUpdate_Params(s *capnp.Segment) (Net_remoteUpdate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteUpdate_Params{st}, err
}

func NewRootNet_remoteUpdate_Params(s *capnp.Segment) (Net_remoteUpdate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteUpdate_Params{st}, err
}

func ReadRootNet_remoteUpdate_Params(msg *capnp.Message) (Net_remoteUpdate_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteUpdate_Params{root.Struct()}, err
}

func (s Net_remoteUpdate_Params) String() string {
	str, _ := text.Marshal(0xc089763bca3e3f44, s.Struct)
	return str
}

func (s Net_remoteUpdate_Params) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s Net_remoteUpdate_Params) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteUpdate_Params) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s Net_remoteUpdate_Params) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_remoteUpdate_Params_List is a list of Net_remoteUpdate_Params.
type Net_remoteUpdate_Params_List struct{ capnp.List }

// NewNet_remoteUpdate_Params creates a new list of Net_remoteUpdate_Params.
func NewNet_remoteUpdate_Params_List(s *capnp.Segment, sz int32) (Net_remoteUpdate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteUpdate_Params_List{l}, err
}

func (s Net_remoteUpdate_Params_List) At(i int) Net_remoteUpdate_Params {
	return Net_remoteUpdate_Params{s.List.Struct(i)}
}

func (s Net_remoteUpdate_Params_List) Set(i int, v Net_remoteUpdate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteUpdate_Params_List) String() string {
	str, _ := text.MarshalList(0xc089763bca3e3f44, s.List)
	return str
}

// Net_remoteUpdate_Params_Promise is a wrapper for a Net_remoteUpdate_Params promised by a client call.
type Net_remoteUpdate_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteUpdate_Params_Promise) Struct() (Net_remoteUpdate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteUpdate_Params{s}, err
}

func (p Net_remoteUpdate_Params_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_remoteUpdate_Results struct{ capnp.Struct }

// Net_remoteUpdate_Results_TypeID is the unique identifier for the type Net_remoteUpdate_Results.
const Net_remoteUpdate_Results_TypeID = 0x99b03ceb2dad70db

func NewNet_remoteUpdate_Results(s *capnp.Segment) (Net_remoteUpdate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteUpdate_Results{st}, err
}

func NewRootNet_remoteUpdate_Results(s *capnp.Segment) (Net_remoteUpdate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteUpdate_Results{st}, err
}

func ReadRootNet_remoteUpdate_Results(msg *capnp.Message) (Net_remoteUpdate_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteUpdate_Results{root.Struct()}, err
}

func (s Net_remoteUpdate_Results) String() string {
	str, _ := text.Marshal(0x99b03ceb2dad70db, s.Struct)
	return str
}

// Net_remoteUpdate_Results_List is a list of Net_remoteUpdate_Results.
type Net_remoteUpdate_Results_List struct{ capnp.List }

// NewNet_remoteUpdate_Results creates a new list of Net_remoteUpdate_Results.
func NewNet_remoteUpdate_Results_List(s *capnp.Segment, sz int32) (Net_remoteUpdate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteUpdate_Results_List{l}, err
}

func (s Net_remoteUpdate_Results_List) At(i int) Net_remoteUpdate_Results {
	return Net_remoteUpdate_Results{s.List.Struct(i)}
}

func (s Net_remoteUpdate_Results_List) Set(i int, v Net_remoteUpdate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteUpdate_Results_List) String() string {
	str, _ := text.MarshalList(0x99b03ceb2dad70db, s.List)
	return str
}

// Net_remoteUpdate_Results_Promise is a wrapper for a Net_remoteUpdate_Results promised by a client call.
type Net_remoteUpdate_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteUpdate_Results_Promise) Struct() (Net_remoteUpdate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteUpdate_Results{s}, err
}

type Net_remoteSave_Params struct{ capnp.Struct }

// Net_remoteSave_Params_TypeID is the unique identifier for the type Net_remoteSave_Params.
const Net_remoteSave_Params_TypeID = 0xb5dc333528e5f7ae

func NewNet_remoteSave_Params(s *capnp.Segment) (Net_remoteSave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteSave_Params{st}, err
}

func NewRootNet_remoteSave_Params(s *capnp.Segment) (Net_remoteSave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteSave_Params{st}, err
}

func ReadRootNet_remoteSave_Params(msg *capnp.Message) (Net_remoteSave_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteSave_Params{root.Struct()}, err
}

func (s Net_remoteSave_Params) String() string {
	str, _ := text.Marshal(0xb5dc333528e5f7ae, s.Struct)
	return str
}

func (s Net_remoteSave_Params) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Net_remoteSave_Params) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteSave_Params) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Net_remoteSave_Params) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_remoteSave_Params_List is a list of Net_remoteSave_Params.
type Net_remoteSave_Params_List struct{ capnp.List }

// NewNet_remoteSave_Params creates a new list of Net_remoteSave_Params.
func NewNet_remoteSave_Params_List(s *capnp.Segment, sz int32) (Net_remoteSave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteSave_Params_List{l}, err
}

func (s Net_remoteSave_Params_List) At(i int) Net_remoteSave_Params {
	return Net_remoteSave_Params{s.List.Struct(i)}
}

func (s Net_remoteSave_Params_List) Set(i int, v Net_remoteSave_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteSave_Params_List) String() string {
	str, _ := text.MarshalList(0xb5dc333528e5f7ae, s.List)
	return str
}

// Net_remoteSave_Params_Promise is a wrapper for a Net_remoteSave_Params promised by a client call.
type Net_remoteSave_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteSave_Params_Promise) Struct() (Net_remoteSave_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteSave_Params{s}, err
}

type Net_remoteSave_Results struct{ capnp.Struct }

// Net_remoteSave_Results_TypeID is the unique identifier for the type Net_remoteSave_Results.
const Net_remoteSave_Results_TypeID = 0xe83f954c9635f05a

func NewNet_remoteSave_Results(s *capnp.Segment) (Net_remoteSave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteSave_Results{st}, err
}

func NewRootNet_remoteSave_Results(s *capnp.Segment) (Net_remoteSave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteSave_Results{st}, err
}

func ReadRootNet_remoteSave_Results(msg *capnp.Message) (Net_remoteSave_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteSave_Results{root.Struct()}, err
}

func (s Net_remoteSave_Results) String() string {
	str, _ := text.Marshal(0xe83f954c9635f05a, s.Struct)
	return str
}

// Net_remoteSave_Results_List is a list of Net_remoteSave_Results.
type Net_remoteSave_Results_List struct{ capnp.List }

// NewNet_remoteSave_Results creates a new list of Net_remoteSave_Results.
func NewNet_remoteSave_Results_List(s *capnp.Segment, sz int32) (Net_remoteSave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteSave_Results_List{l}, err
}

func (s Net_remoteSave_Results_List) At(i int) Net_remoteSave_Results {
	return Net_remoteSave_Results{s.List.Struct(i)}
}

func (s Net_remoteSave_Results_List) Set(i int, v Net_remoteSave_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteSave_Results_List) String() string {
	str, _ := text.MarshalList(0xe83f954c9635f05a, s.List)
	return str
}

// Net_remoteSave_Results_Promise is a wrapper for a Net_remoteSave_Results promised by a client call.
type Net_remoteSave_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteSave_Results_Promise) Struct() (Net_remoteSave_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteSave_Results{s}, err
}

type Net_remotePing_Params struct{ capnp.Struct }

// Net_remotePing_Params_TypeID is the unique identifier for the type Net_remotePing_Params.
const Net_remotePing_Params_TypeID = 0xbee5e0529f9017ff

func NewNet_remotePing_Params(s *capnp.Segment) (Net_remotePing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remotePing_Params{st}, err
}

func NewRootNet_remotePing_Params(s *capnp.Segment) (Net_remotePing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remotePing_Params{st}, err
}

func ReadRootNet_remotePing_Params(msg *capnp.Message) (Net_remotePing_Params, error) {
	root, err := msg.RootPtr()
	return Net_remotePing_Params{root.Struct()}, err
}

func (s Net_remotePing_Params) String() string {
	str, _ := text.Marshal(0xbee5e0529f9017ff, s.Struct)
	return str
}

func (s Net_remotePing_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_remotePing_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remotePing_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_remotePing_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Net_remotePing_Params_List is a list of Net_remotePing_Params.
type Net_remotePing_Params_List struct{ capnp.List }

// NewNet_remotePing_Params creates a new list of Net_remotePing_Params.
func NewNet_remotePing_Params_List(s *capnp.Segment, sz int32) (Net_remotePing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remotePing_Params_List{l}, err
}

func (s Net_remotePing_Params_List) At(i int) Net_remotePing_Params {
	return Net_remotePing_Params{s.List.Struct(i)}
}

func (s Net_remotePing_Params_List) Set(i int, v Net_remotePing_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remotePing_Params_List) String() string {
	str, _ := text.MarshalList(0xbee5e0529f9017ff, s.List)
	return str
}

// Net_remotePing_Params_Promise is a wrapper for a Net_remotePing_Params promised by a client call.
type Net_remotePing_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remotePing_Params_Promise) Struct() (Net_remotePing_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remotePing_Params{s}, err
}

type Net_remotePing_Results struct{ capnp.Struct }

// Net_remotePing_Results_TypeID is the unique identifier for the type Net_remotePing_Results.
const Net_remotePing_Results_TypeID = 0xad37ff6270c35769

func NewNet_remotePing_Results(s *capnp.Segment) (Net_remotePing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_remotePing_Results{st}, err
}

func NewRootNet_remotePing_Results(s *capnp.Segment) (Net_remotePing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_remotePing_Results{st}, err
}

func ReadRootNet_remotePing_Results(msg *capnp.Message) (Net_remotePing_Results, error) {
	root, err := msg.RootPtr()
	return Net_remotePing_Results{root.Struct()}, err
}

func (s Net_remotePing_Results) String() string {
	str, _ := text.Marshal(0xad37ff6270c35769, s.Struct)
	return str
}

func (s Net_remotePing_Results) Roundtrip() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Net_remotePing_Results) SetRoundtrip(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Net_remotePing_Results_List is a list of Net_remotePing_Results.
type Net_remotePing_Results_List struct{ capnp.List }

// NewNet_remotePing_Results creates a new list of Net_remotePing_Results.
func NewNet_remotePing_Results_List(s *capnp.Segment, sz int32) (Net_remotePing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_remotePing_Results_List{l}, err
}

func (s Net_remotePing_Results_List) At(i int) Net_remotePing_Results {
	return Net_remotePing_Results{s.List.Struct(i)}
}

func (s Net_remotePing_Results_List) Set(i int, v Net_remotePing_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remotePing_Results_List) String() string {
	str, _ := text.MarshalList(0xad37ff6270c35769, s.List)
	return str
}

// Net_remotePing_Results_Promise is a wrapper for a Net_remotePing_Results promised by a client call.
type Net_remotePing_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remotePing_Results_Promise) Struct() (Net_remotePing_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remotePing_Results{s}, err
}

type Net_remoteClear_Params struct{ capnp.Struct }

// Net_remoteClear_Params_TypeID is the unique identifier for the type Net_remoteClear_Params.
const Net_remoteClear_Params_TypeID = 0xd35d6ae0fdbd9bc5

func NewNet_remoteClear_Params(s *capnp.Segment) (Net_remoteClear_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Params{st}, err
}

func NewRootNet_remoteClear_Params(s *capnp.Segment) (Net_remoteClear_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Params{st}, err
}

func ReadRootNet_remoteClear_Params(msg *capnp.Message) (Net_remoteClear_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteClear_Params{root.Struct()}, err
}

func (s Net_remoteClear_Params) String() string {
	str, _ := text.Marshal(0xd35d6ae0fdbd9bc5, s.Struct)
	return str
}

// Net_remoteClear_Params_List is a list of Net_remoteClear_Params.
type Net_remoteClear_Params_List struct{ capnp.List }

// NewNet_remoteClear_Params creates a new list of Net_remoteClear_Params.
func NewNet_remoteClear_Params_List(s *capnp.Segment, sz int32) (Net_remoteClear_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteClear_Params_List{l}, err
}

func (s Net_remoteClear_Params_List) At(i int) Net_remoteClear_Params {
	return Net_remoteClear_Params{s.List.Struct(i)}
}

func (s Net_remoteClear_Params_List) Set(i int, v Net_remoteClear_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteClear_Params_List) String() string {
	str, _ := text.MarshalList(0xd35d6ae0fdbd9bc5, s.List)
	return str
}

// Net_remoteClear_Params_Promise is a wrapper for a Net_remoteClear_Params promised by a client call.
type Net_remoteClear_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteClear_Params_Promise) Struct() (Net_remoteClear_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteClear_Params{s}, err
}

type Net_remoteClear_Results struct{ capnp.Struct }

// Net_remoteClear_Results_TypeID is the unique identifier for the type Net_remoteClear_Results.
const Net_remoteClear_Results_TypeID = 0xdc0aec8d179d4ec9

func NewNet_remoteClear_Results(s *capnp.Segment) (Net_remoteClear_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Results{st}, err
}

func NewRootNet_remoteClear_Results(s *capnp.Segment) (Net_remoteClear_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Results{st}, err
}

func ReadRootNet_remoteClear_Results(msg *capnp.Message) (Net_remoteClear_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteClear_Results{root.Struct()}, err
}

func (s Net_remoteClear_Results) String() string {
	str, _ := text.Marshal(0xdc0aec8d179d4ec9, s.Struct)
	return str
}

// Net_remoteClear_Results_List is a list of Net_remoteClear_Results.
type Net_remoteClear_Results_List struct{ capnp.List }

// NewNet_remoteClear_Results creates a new list of Net_remoteClear_Results.
func NewNet_remoteClear_Results_List(s *capnp.Segment, sz int32) (Net_remoteClear_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteClear_Results_List{l}, err
}

func (s Net_remoteClear_Results_List) At(i int) Net_remoteClear_Results {
	return Net_remoteClear_Results{s.List.Struct(i)}
}

func (s Net_remoteClear_Results_List) Set(i int, v Net_remoteClear_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteClear_Results_List) String() string {
	str, _ := text.MarshalList(0xdc0aec8d179d4ec9, s.List)
	return str
}

// Net_remoteClear_Results_Promise is a wrapper for a Net_remoteClear_Results promised by a client call.
type Net_remoteClear_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteClear_Results_Promise) Struct() (Net_remoteClear_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteClear_Results{s}, err
}

type Net_netLocate_Params struct{ capnp.Struct }

// Net_netLocate_Params_TypeID is the unique identifier for the type Net_netLocate_Params.
const Net_netLocate_Params_TypeID = 0xd701f5ae7e7560e9

func NewNet_netLocate_Params(s *capnp.Segment) (Net_netLocate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Net_netLocate_Params{st}, err
}

func NewRootNet_netLocate_Params(s *capnp.Segment) (Net_netLocate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Net_netLocate_Params{st}, err
}

func ReadRootNet_netLocate_Params(msg *capnp.Message) (Net_netLocate_Params, error) {
	root, err := msg.RootPtr()
	return Net_netLocate_Params{root.Struct()}, err
}

func (s Net_netLocate_Params) String() string {
	str, _ := text.Marshal(0xd701f5ae7e7560e9, s.Struct)
	return str
}

func (s Net_netLocate_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_netLocate_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_netLocate_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_netLocate_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Net_netLocate_Params) TimeoutSec() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Net_netLocate_Params) SetTimeoutSec(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Net_netLocate_Params) LocateMask() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Net_netLocate_Params) HasLocateMask() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Net_netLocate_Params) LocateMaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Net_netLocate_Params) SetLocateMask(v string) error {
	return s.Struct.SetText(1, v)
}

// Net_netLocate_Params_List is a list of Net_netLocate_Params.
type Net_netLocate_Params_List struct{ capnp.List }

// NewNet_netLocate_Params creates a new list of Net_netLocate_Params.
func NewNet_netLocate_Params_List(s *capnp.Segment, sz int32) (Net_netLocate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Net_netLocate_Params_List{l}, err
}

func (s Net_netLocate_Params_List) At(i int) Net_netLocate_Params {
	return Net_netLocate_Params{s.List.Struct(i)}
}

func (s Net_netLocate_Params_List) Set(i int, v Net_netLocate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocate_Params_List) String() string {
	str, _ := text.MarshalList(0xd701f5ae7e7560e9, s.List)
	return str
}

// Net_netLocate_Params_Promise is a wrapper for a Net_netLocate_Params promised by a client call.
type Net_netLocate_Params_Promise struct{ *capnp.Pipeline }

func (p Net_netLocate_Params_Promise) Struct() (Net_netLocate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocate_Params{s}, err
}

type Net_netLocate_Results struct{ capnp.Struct }

// Net_netLocate_Results_TypeID is the unique identifier for the type Net_netLocate_Results.
const Net_netLocate_Results_TypeID = 0xd2117353ea065c72

func NewNet_netLocate_Results(s *capnp.Segment) (Net_netLocate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocate_Results{st}, err
}

func NewRootNet_netLocate_Results(s *capnp.Segment) (Net_netLocate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocate_Results{st}, err
}

func ReadRootNet_netLocate_Results(msg *capnp.Message) (Net_netLocate_Results, error) {
	root, err := msg.RootPtr()
	return Net_netLocate_Results{root.Struct()}, err
}

func (s Net_netLocate_Results) String() string {
	str, _ := text.Marshal(0xd2117353ea065c72, s.Struct)
	return str
}

func (s Net_netLocate_Results) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Net_netLocate_Results) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Net_netLocate_Results_List is a list of Net_netLocate_Results.
type Net_netLocate_Results_List struct{ capnp.List }

// NewNet_netLocate_Results creates a new list of Net_netLocate_Results.
func NewNet_netLocate_Results_List(s *capnp.Segment, sz int32) (Net_netLocate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_netLocate_Results_List{l}, err
}

func (s Net_netLocate_Results_List) At(i int) Net_netLocate_Results {
	return Net_netLocate_Results{s.List.Struct(i)}
}

func (s Net_netLocate_Results_List) Set(i int, v Net_netLocate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocate_Results_List) String() string {
	str, _ := text.MarshalList(0xd2117353ea065c72, s.List)
	return str
}

// Net_netLocate_Results_Promise is a wrapper for a Net_netLocate_Results promised by a client call.
type Net_netLocate_Results_Promise struct{ *capnp.Pipeline }

func (p Net_netLocate_Results_Promise) Struct() (Net_netLocate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocate_Results{s}, err
}

type Net_netLocateNext_Params struct{ capnp.Struct }

// Net_netLocateNext_Params_TypeID is the unique identifier for the type Net_netLocateNext_Params.
const Net_netLocateNext_Params_TypeID = 0xc338177a5379031a

func NewNet_netLocateNext_Params(s *capnp.Segment) (Net_netLocateNext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocateNext_Params{st}, err
}

func NewRootNet_netLocateNext_Params(s *capnp.Segment) (Net_netLocateNext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocateNext_Params{st}, err
}

func ReadRootNet_netLocateNext_Params(msg *capnp.Message) (Net_netLocateNext_Params, error) {
	root, err := msg.RootPtr()
	return Net_netLocateNext_Params{root.Struct()}, err
}

func (s Net_netLocateNext_Params) String() string {
	str, _ := text.Marshal(0xc338177a5379031a, s.Struct)
	return str
}

func (s Net_netLocateNext_Params) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Net_netLocateNext_Params) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Net_netLocateNext_Params_List is a list of Net_netLocateNext_Params.
type Net_netLocateNext_Params_List struct{ capnp.List }

// NewNet_netLocateNext_Params creates a new list of Net_netLocateNext_Params.
func NewNet_netLocateNext_Params_List(s *capnp.Segment, sz int32) (Net_netLocateNext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_netLocateNext_Params_List{l}, err
}

func (s Net_netLocateNext_Params_List) At(i int) Net_netLocateNext_Params {
	return Net_netLocateNext_Params{s.List.Struct(i)}
}

func (s Net_netLocateNext_Params_List) Set(i int, v Net_netLocateNext_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocateNext_Params_List) String() string {
	str, _ := text.MarshalList(0xc338177a5379031a, s.List)
	return str
}

// Net_netLocateNext_Params_Promise is a wrapper for a Net_netLocateNext_Params promised by a client call.
type Net_netLocateNext_Params_Promise struct{ *capnp.Pipeline }

func (p Net_netLocateNext_Params_Promise) Struct() (Net_netLocateNext_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocateNext_Params{s}, err
}

type Net_netLocateNext_Results struct{ capnp.Struct }

// Net_netLocateNext_Results_TypeID is the unique identifier for the type Net_netLocateNext_Results.
const Net_netLocateNext_Results_TypeID = 0x9a291d6964350a5b

func NewNet_netLocateNext_Results(s *capnp.Segment) (Net_netLocateNext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_netLocateNext_Results{st}, err
}

func NewRootNet_netLocateNext_Results(s *capnp.Segment) (Net_netLocateNext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_netLocateNext_Results{st}, err
}

func ReadRootNet_netLocateNext_Results(msg *capnp.Message) (Net_netLocateNext_Results, error) {
	root, err := msg.RootPtr()
	return Net_netLocateNext_Results{root.Struct()}, err
}

func (s Net_netLocateNext_Results) String() string {
	str, _ := text.Marshal(0x9a291d6964350a5b, s.Struct)
	return str
}

func (s Net_netLocateNext_Results) Result() (LocateResult, error) {
	p, err := s.Struct.Ptr(0)
	return LocateResult{Struct: p.Struct()}, err
}

func (s Net_netLocateNext_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_netLocateNext_Results) SetResult(v LocateResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated LocateResult struct, preferring placement in s's segment.
func (s Net_netLocateNext_Results) NewResult() (LocateResult, error) {
	ss, err := NewLocateResult(s.Struct.Segment())
	if err != nil {
		return LocateResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_netLocateNext_Results_List is a list of Net_netLocateNext_Results.
type Net_netLocateNext_Results_List struct{ capnp.List }

// NewNet_netLocateNext_Results creates a new list of Net_netLocateNext_Results.
func NewNet_netLocateNext_Results_List(s *capnp.Segment, sz int32) (Net_netLocateNext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_netLocateNext_Results_List{l}, err
}

func (s Net_netLocateNext_Results_List) At(i int) Net_netLocateNext_Results {
	return Net_netLocateNext_Results{s.List.Struct(i)}
}

func (s Net_netLocateNext_Results_List) Set(i int, v Net_netLocateNext_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocateNext_Results_List) String() string {
	str, _ := text.MarshalList(0x9a291d6964350a5b, s.List)
	return str
}

// Net_netLocateNext_Results_Promise is a wrapper for a Net_netLocateNext_Results promised by a client call.
type Net_netLocateNext_Results_Promise struct{ *capnp.Pipeline }

func (p Net_netLocateNext_Results_Promise) Struct() (Net_netLocateNext_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocateNext_Results{s}, err
}

func (p Net_netLocateNext_Results_Promise) Result() LocateResult_Promise {
	return LocateResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_whoami_Params struct{ capnp.Struct }

// Net_whoami_Params_TypeID is the unique identifier for the type Net_whoami_Params.
const Net_whoami_Params_TypeID = 0x86541181da6400f7

func NewNet_whoami_Params(s *capnp.Segment) (Net_whoami_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_whoami_Params{st}, err
}

func NewRootNet_whoami_Params(s *capnp.Segment) (Net_whoami_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_whoami_Params{st}, err
}

func ReadRootNet_whoami_Params(msg *capnp.Message) (Net_whoami_Params, error) {
	root, err := msg.RootPtr()
	return Net_whoami_Params{root.Struct()}, err
}

func (s Net_whoami_Params) String() string {
	str, _ := text.Marshal(0x86541181da6400f7, s.Struct)
	return str
}

// Net_whoami_Params_List is a list of Net_whoami_Params.
type Net_whoami_Params_List struct{ capnp.List }

// NewNet_whoami_Params creates a new list of Net_whoami_Params.
func NewNet_whoami_Params_List(s *capnp.Segment, sz int32) (Net_whoami_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_whoami_Params_List{l}, err
}

func (s Net_whoami_Params_List) At(i int) Net_whoami_Params {
	return Net_whoami_Params{s.List.Struct(i)}
}

func (s Net_whoami_Params_List) Set(i int, v Net_whoami_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_whoami_Params_List) String() string {
	str, _ := text.MarshalList(0x86541181da6400f7, s.List)
	return str
}

// Net_whoami_Params_Promise is a wrapper for a Net_whoami_Params promised by a client call.
type Net_whoami_Params_Promise struct{ *capnp.Pipeline }

func (p Net_whoami_Params_Promise) Struct() (Net_whoami_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_whoami_Params{s}, err
}

type Net_whoami_Results struct{ capnp.Struct }

// Net_whoami_Results_TypeID is the unique identifier for the type Net_whoami_Results.
const Net_whoami_Results_TypeID = 0xd0071dd673841599

func NewNet_whoami_Results(s *capnp.Segment) (Net_whoami_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_whoami_Results{st}, err
}

func NewRootNet_whoami_Results(s *capnp.Segment) (Net_whoami_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_whoami_Results{st}, err
}

func ReadRootNet_whoami_Results(msg *capnp.Message) (Net_whoami_Results, error) {
	root, err := msg.RootPtr()
	return Net_whoami_Results{root.Struct()}, err
}

func (s Net_whoami_Results) String() string {
	str, _ := text.Marshal(0xd0071dd673841599, s.Struct)
	return str
}

func (s Net_whoami_Results) Whoami() (Identity, error) {
	p, err := s.Struct.Ptr(0)
	return Identity{Struct: p.Struct()}, err
}

func (s Net_whoami_Results) HasWhoami() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_whoami_Results) SetWhoami(v Identity) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhoami sets the whoami field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Net_whoami_Results) NewWhoami() (Identity, error) {
	ss, err := NewIdentity(s.Struct.Segment())
	if err != nil {
		return Identity{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_whoami_Results_List is a list of Net_whoami_Results.
type Net_whoami_Results_List struct{ capnp.List }

// NewNet_whoami_Results creates a new list of Net_whoami_Results.
func NewNet_whoami_Results_List(s *capnp.Segment, sz int32) (Net_whoami_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_whoami_Results_List{l}, err
}

func (s Net_whoami_Results_List) At(i int) Net_whoami_Results {
	return Net_whoami_Results{s.List.Struct(i)}
}

func (s Net_whoami_Results_List) Set(i int, v Net_whoami_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_whoami_Results_List) String() string {
	str, _ := text.MarshalList(0xd0071dd673841599, s.List)
	return str
}

// Net_whoami_Results_Promise is a wrapper for a Net_whoami_Results promised by a client call.
type Net_whoami_Results_Promise struct{ *capnp.Pipeline }

func (p Net_whoami_Results_Promise) Struct() (Net_whoami_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_whoami_Results{s}, err
}

func (p Net_whoami_Results_Promise) Whoami() Identity_Promise {
	return Identity_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_connect_Params struct{ capnp.Struct }

// Net_connect_Params_TypeID is the unique identifier for the type Net_connect_Params.
const Net_connect_Params_TypeID = 0xaf631f5cddda9aa3

func NewNet_connect_Params(s *capnp.Segment) (Net_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Params{st}, err
}

func NewRootNet_connect_Params(s *capnp.Segment) (Net_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Params{st}, err
}

func ReadRootNet_connect_Params(msg *capnp.Message) (Net_connect_Params, error) {
	root, err := msg.RootPtr()
	return Net_connect_Params{root.Struct()}, err
}

func (s Net_connect_Params) String() string {
	str, _ := text.Marshal(0xaf631f5cddda9aa3, s.Struct)
	return str
}

// Net_connect_Params_List is a list of Net_connect_Params.
type Net_connect_Params_List struct{ capnp.List }

// NewNet_connect_Params creates a new list of Net_connect_Params.
func NewNet_connect_Params_List(s *capnp.Segment, sz int32) (Net_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_connect_Params_List{l}, err
}

func (s Net_connect_Params_List) At(i int) Net_connect_Params {
	return Net_connect_Params{s.List.Struct(i)}
}

func (s Net_connect_Params_List) Set(i int, v Net_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_connect_Params_List) String() string {
	str, _ := text.MarshalList(0xaf631f5cddda9aa3, s.List)
	return str
}

// Net_connect_Params_Promise is a wrapper for a Net_connect_Params promised by a client call.
type Net_connect_Params_Promise struct{ *capnp.Pipeline }

func (p Net_connect_Params_Promise) Struct() (Net_connect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_connect_Params{s}, err
}

type Net_connect_Results struct{ capnp.Struct }

// Net_connect_Results_TypeID is the unique identifier for the type Net_connect_Results.
const Net_connect_Results_TypeID = 0xcb6e3e65f2dbc914

func NewNet_connect_Results(s *capnp.Segment) (Net_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Results{st}, err
}

func NewRootNet_connect_Results(s *capnp.Segment) (Net_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Results{st}, err
}

func ReadRootNet_connect_Results(msg *capnp.Message) (Net_connect_Results, error) {
	root, err := msg.RootPtr()
	return Net_connect_Results{root.Struct()}, err
}

func (s Net_connect_Results) String() string {
	str, _ := text.Marshal(0xcb6e3e65f2dbc914, s.Struct)
	return str
}

// Net_connect_Results_List is a list of Net_connect_Results.
type Net_connect_Results_List struct{ capnp.List }

// NewNet_connect_Results creates a new list of Net_connect_Results.
func NewNet_connect_Results_List(s *capnp.Segment, sz int32) (Net_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_connect_Results_List{l}, err
}

func (s Net_connect_Results_List) At(i int) Net_connect_Results {
	return Net_connect_Results{s.List.Struct(i)}
}

func (s Net_connect_Results_List) Set(i int, v Net_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xcb6e3e65f2dbc914, s.List)
	return str
}

// Net_connect_Results_Promise is a wrapper for a Net_connect_Results promised by a client call.
type Net_connect_Results_Promise struct{ *capnp.Pipeline }

func (p Net_connect_Results_Promise) Struct() (Net_connect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_connect_Results{s}, err
}

type Net_disconnect_Params struct{ capnp.Struct }

// Net_disconnect_Params_TypeID is the unique identifier for the type Net_disconnect_Params.
const Net_disconnect_Params_TypeID = 0xe19b7cffa7304650

func NewNet_disconnect_Params(s *capnp.Segment) (Net_disconnect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Params{st}, err
}

func NewRootNet_disconnect_Params(s *capnp.Segment) (Net_disconnect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Params{st}, err
}

func ReadRootNet_disconnect_Params(msg *capnp.Message) (Net_disconnect_Params, error) {
	root, err := msg.RootPtr()
	return Net_disconnect_Params{root.Struct()}, err
}

func (s Net_disconnect_Params) String() string {
	str, _ := text.Marshal(0xe19b7cffa7304650, s.Struct)
	return str
}

// Net_disconnect_Params_List is a list of Net_disconnect_Params.
type Net_disconnect_Params_List struct{ capnp.List }

// NewNet_disconnect_Params creates a new list of Net_disconnect_Params.
func NewNet_disconnect_Params_List(s *capnp.Segment, sz int32) (Net_disconnect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_disconnect_Params_List{l}, err
}

func (s Net_disconnect_Params_List) At(i int) Net_disconnect_Params {
	return Net_disconnect_Params{s.List.Struct(i)}
}

func (s Net_disconnect_Params_List) Set(i int, v Net_disconnect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_disconnect_Params_List) String() string {
	str, _ := text.MarshalList(0xe19b7cffa7304650, s.List)
	return str
}

// Net_disconnect_Params_Promise is a wrapper for a Net_disconnect_Params promised by a client call.
type Net_disconnect_Params_Promise struct{ *capnp.Pipeline }

func (p Net_disconnect_Params_Promise) Struct() (Net_disconnect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_disconnect_Params{s}, err
}

type Net_disconnect_Results struct{ capnp.Struct }

// Net_disconnect_Results_TypeID is the unique identifier for the type Net_disconnect_Results.
const Net_disconnect_Results_TypeID = 0xb9095b6d17298884

func NewNet_disconnect_Results(s *capnp.Segment) (Net_disconnect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Results{st}, err
}

func NewRootNet_disconnect_Results(s *capnp.Segment) (Net_disconnect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Results{st}, err
}

func ReadRootNet_disconnect_Results(msg *capnp.Message) (Net_disconnect_Results, error) {
	root, err := msg.RootPtr()
	return Net_disconnect_Results{root.Struct()}, err
}

func (s Net_disconnect_Results) String() string {
	str, _ := text.Marshal(0xb9095b6d17298884, s.Struct)
	return str
}

// Net_disconnect_Results_List is a list of Net_disconnect_Results.
type Net_disconnect_Results_List struct{ capnp.List }

// NewNet_disconnect_Results creates a new list of Net_disconnect_Results.
func NewNet_disconnect_Results_List(s *capnp.Segment, sz int32) (Net_disconnect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_disconnect_Results_List{l}, err
}

func (s Net_disconnect_Results_List) At(i int) Net_disconnect_Results {
	return Net_disconnect_Results{s.List.Struct(i)}
}

func (s Net_disconnect_Results_List) Set(i int, v Net_disconnect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_disconnect_Results_List) String() string {
	str, _ := text.MarshalList(0xb9095b6d17298884, s.List)
	return str
}

// Net_disconnect_Results_Promise is a wrapper for a Net_disconnect_Results promised by a client call.
type Net_disconnect_Results_Promise struct{ *capnp.Pipeline }

func (p Net_disconnect_Results_Promise) Struct() (Net_disconnect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_disconnect_Results{s}, err
}

type Net_remoteOnlineList_Params struct{ capnp.Struct }

// Net_remoteOnlineList_Params_TypeID is the unique identifier for the type Net_remoteOnlineList_Params.
const Net_remoteOnlineList_Params_TypeID = 0xb13597d7a0d68f31

func NewNet_remoteOnlineList_Params(s *capnp.Segment) (Net_remoteOnlineList_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteOnlineList_Params{st}, err
}

func NewRootNet_remoteOnlineList_Params(s *capnp.Segment) (Net_remoteOnlineList_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteOnlineList_Params{st}, err
}

func ReadRootNet_remoteOnlineList_Params(msg *capnp.Message) (Net_remoteOnlineList_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteOnlineList_Params{root.Struct()}, err
}

func (s Net_remoteOnlineList_Params) String() string {
	str, _ := text.Marshal(0xb13597d7a0d68f31, s.Struct)
	return str
}

// Net_remoteOnlineList_Params_List is a list of Net_remoteOnlineList_Params.
type Net_remoteOnlineList_Params_List struct{ capnp.List }

// NewNet_remoteOnlineList_Params creates a new list of Net_remoteOnlineList_Params.
func NewNet_remoteOnlineList_Params_List(s *capnp.Segment, sz int32) (Net_remoteOnlineList_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteOnlineList_Params_List{l}, err
}

func (s Net_remoteOnlineList_Params_List) At(i int) Net_remoteOnlineList_Params {
	return Net_remoteOnlineList_Params{s.List.Struct(i)}
}

func (s Net_remoteOnlineList_Params_List) Set(i int, v Net_remoteOnlineList_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteOnlineList_Params_List) String() string {
	str, _ := text.MarshalList(0xb13597d7a0d68f31, s.List)
	return str
}

// Net_remoteOnlineList_Params_Promise is a wrapper for a Net_remoteOnlineList_Params promised by a client call.
type Net_remoteOnlineList_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteOnlineList_Params_Promise) Struct() (Net_remoteOnlineList_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteOnlineList_Params{s}, err
}

type Net_remoteOnlineList_Results struct{ capnp.Struct }

// Net_remoteOnlineList_Results_TypeID is the unique identifier for the type Net_remoteOnlineList_Results.
const Net_remoteOnlineList_Results_TypeID = 0xb973694cb94aee47

func NewNet_remoteOnlineList_Results(s *capnp.Segment) (Net_remoteOnlineList_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteOnlineList_Results{st}, err
}

func NewRootNet_remoteOnlineList_Results(s *capnp.Segment) (Net_remoteOnlineList_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteOnlineList_Results{st}, err
}

func ReadRootNet_remoteOnlineList_Results(msg *capnp.Message) (Net_remoteOnlineList_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteOnlineList_Results{root.Struct()}, err
}

func (s Net_remoteOnlineList_Results) String() string {
	str, _ := text.Marshal(0xb973694cb94aee47, s.Struct)
	return str
}

func (s Net_remoteOnlineList_Results) Infos() (RemoteStatus_List, error) {
	p, err := s.Struct.Ptr(0)
	return RemoteStatus_List{List: p.List()}, err
}

func (s Net_remoteOnlineList_Results) HasInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteOnlineList_Results) SetInfos(v RemoteStatus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated RemoteStatus_List, preferring placement in s's segment.
func (s Net_remoteOnlineList_Results) NewInfos(n int32) (RemoteStatus_List, error) {
	l, err := NewRemoteStatus_List(s.Struct.Segment(), n)
	if err != nil {
		return RemoteStatus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_remoteOnlineList_Results_List is a list of Net_remoteOnlineList_Results.
type Net_remoteOnlineList_Results_List struct{ capnp.List }

// NewNet_remoteOnlineList_Results creates a new list of Net_remoteOnlineList_Results.
func NewNet_remoteOnlineList_Results_List(s *capnp.Segment, sz int32) (Net_remoteOnlineList_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteOnlineList_Results_List{l}, err
}

func (s Net_remoteOnlineList_Results_List) At(i int) Net_remoteOnlineList_Results {
	return Net_remoteOnlineList_Results{s.List.Struct(i)}
}

func (s Net_remoteOnlineList_Results_List) Set(i int, v Net_remoteOnlineList_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteOnlineList_Results_List) String() string {
	str, _ := text.MarshalList(0xb973694cb94aee47, s.List)
	return str
}

// Net_remoteOnlineList_Results_Promise is a wrapper for a Net_remoteOnlineList_Results promised by a client call.
type Net_remoteOnlineList_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteOnlineList_Results_Promise) Struct() (Net_remoteOnlineList_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteOnlineList_Results{s}, err
}

type Net_remoteByName_Params struct{ capnp.Struct }

// Net_remoteByName_Params_TypeID is the unique identifier for the type Net_remoteByName_Params.
const Net_remoteByName_Params_TypeID = 0x91ac69870ceff408

func NewNet_remoteByName_Params(s *capnp.Segment) (Net_remoteByName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteByName_Params{st}, err
}

func NewRootNet_remoteByName_Params(s *capnp.Segment) (Net_remoteByName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteByName_Params{st}, err
}

func ReadRootNet_remoteByName_Params(msg *capnp.Message) (Net_remoteByName_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteByName_Params{root.Struct()}, err
}

func (s Net_remoteByName_Params) String() string {
	str, _ := text.Marshal(0x91ac69870ceff408, s.Struct)
	return str
}

func (s Net_remoteByName_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_remoteByName_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteByName_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_remoteByName_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Net_remoteByName_Params_List is a list of Net_remoteByName_Params.
type Net_remoteByName_Params_List struct{ capnp.List }

// NewNet_remoteByName_Params creates a new list of Net_remoteByName_Params.
func NewNet_remoteByName_Params_List(s *capnp.Segment, sz int32) (Net_remoteByName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteByName_Params_List{l}, err
}

func (s Net_remoteByName_Params_List) At(i int) Net_remoteByName_Params {
	return Net_remoteByName_Params{s.List.Struct(i)}
}

func (s Net_remoteByName_Params_List) Set(i int, v Net_remoteByName_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteByName_Params_List) String() string {
	str, _ := text.MarshalList(0x91ac69870ceff408, s.List)
	return str
}

// Net_remoteByName_Params_Promise is a wrapper for a Net_remoteByName_Params promised by a client call.
type Net_remoteByName_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteByName_Params_Promise) Struct() (Net_remoteByName_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteByName_Params{s}, err
}

type Net_remoteByName_Results struct{ capnp.Struct }

// Net_remoteByName_Results_TypeID is the unique identifier for the type Net_remoteByName_Results.
const Net_remoteByName_Results_TypeID = 0xac6cc5b649f638a8

func NewNet_remoteByName_Results(s *capnp.Segment) (Net_remoteByName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteByName_Results{st}, err
}

func NewRootNet_remoteByName_Results(s *capnp.Segment) (Net_remoteByName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteByName_Results{st}, err
}

func ReadRootNet_remoteByName_Results(msg *capnp.Message) (Net_remoteByName_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteByName_Results{root.Struct()}, err
}

func (s Net_remoteByName_Results) String() string {
	str, _ := text.Marshal(0xac6cc5b649f638a8, s.Struct)
	return str
}

func (s Net_remoteByName_Results) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s Net_remoteByName_Results) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteByName_Results) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s Net_remoteByName_Results) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_remoteByName_Results_List is a list of Net_remoteByName_Results.
type Net_remoteByName_Results_List struct{ capnp.List }

// NewNet_remoteByName_Results creates a new list of Net_remoteByName_Results.
func NewNet_remoteByName_Results_List(s *capnp.Segment, sz int32) (Net_remoteByName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteByName_Results_List{l}, err
}

func (s Net_remoteByName_Results_List) At(i int) Net_remoteByName_Results {
	return Net_remoteByName_Results{s.List.Struct(i)}
}

func (s Net_remoteByName_Results_List) Set(i int, v Net_remoteByName_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteByName_Results_List) String() string {
	str, _ := text.MarshalList(0xac6cc5b649f638a8, s.List)
	return str
}

// Net_remoteByName_Results_Promise is a wrapper for a Net_remoteByName_Results promised by a client call.
type Net_remoteByName_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteByName_Results_Promise) Struct() (Net_remoteByName_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteByName_Results{s}, err
}

func (p Net_remoteByName_Results_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfc487818328b97ef

func (c API) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Tar(ctx context.Context, params func(FS_tar_Params) error, opts ...capnp.CallOption) FS_tar_Results_Promise {
	if c.Client == nil {
		return FS_tar_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "tar",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_tar_Params{Struct: s}) }
	}
	return FS_tar_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) DeletedNodes(ctx context.Context, params func(FS_deletedNodes_Params) error, opts ...capnp.CallOption) FS_deletedNodes_Results_Promise {
	if c.Client == nil {
		return FS_deletedNodes_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "deletedNodes",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_deletedNodes_Params{Struct: s}) }
	}
	return FS_deletedNodes_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Undelete(ctx context.Context, params func(FS_undelete_Params) error, opts ...capnp.CallOption) FS_undelete_Results_Promise {
	if c.Client == nil {
		return FS_undelete_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "undelete",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_undelete_Params{Struct: s}) }
	}
	return FS_undelete_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) CommitInfo(ctx context.Context, params func(VCS_commitInfo_Params) error, opts ...capnp.CallOption) VCS_commitInfo_Results_Promise {
	if c.Client == nil {
		return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commitInfo_Params{Struct: s}) }
	}
	return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Quit(ctx context.Context, params func(Repo_quit_Params) error, opts ...capnp.CallOption) Repo_quit_Results_Promise {
	if c.Client == nil {
		return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_quit_Params{Struct: s}) }
	}
	return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Repo_ping_Params) error, opts ...capnp.CallOption) Repo_ping_Results_Promise {
	if c.Client == nil {
		return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_ping_Params{Struct: s}) }
	}
	return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Init(ctx context.Context, params func(Repo_init_Params) error, opts ...capnp.CallOption) Repo_init_Results_Promise {
	if c.Client == nil {
		return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_init_Params{Struct: s}) }
	}
	return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mount(ctx context.Context, params func(Repo_mount_Params) error, opts ...capnp.CallOption) Repo_mount_Results_Promise {
	if c.Client == nil {
		return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_mount_Params{Struct: s}) }
	}
	return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unmount(ctx context.Context, params func(Repo_unmount_Params) error, opts ...capnp.CallOption) Repo_unmount_Results_Promise {
	if c.Client == nil {
		return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_unmount_Params{Struct: s}) }
	}
	return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigGet(ctx context.Context, params func(Repo_configGet_Params) error, opts ...capnp.CallOption) Repo_configGet_Results_Promise {
	if c.Client == nil {
		return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configGet_Params{Struct: s}) }
	}
	return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigSet(ctx context.Context, params func(Repo_configSet_Params) error, opts ...capnp.CallOption) Repo_configSet_Results_Promise {
	if c.Client == nil {
		return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configSet_Params{Struct: s}) }
	}
	return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigAll(ctx context.Context, params func(Repo_configAll_Params) error, opts ...capnp.CallOption) Repo_configAll_Results_Promise {
	if c.Client == nil {
		return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configAll_Params{Struct: s}) }
	}
	return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigDoc(ctx context.Context, params func(Repo_configDoc_Params) error, opts ...capnp.CallOption) Repo_configDoc_Results_Promise {
	if c.Client == nil {
		return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configDoc_Params{Struct: s}) }
	}
	return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Become(ctx context.Context, params func(Repo_become_Params) error, opts ...capnp.CallOption) Repo_become_Results_Promise {
	if c.Client == nil {
		return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_become_Params{Struct: s}) }
	}
	return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabAdd(ctx context.Context, params func(Repo_fstabAdd_Params) error, opts ...capnp.CallOption) Repo_fstabAdd_Results_Promise {
	if c.Client == nil {
		return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabAdd_Params{Struct: s}) }
	}
	return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabRemove(ctx context.Context, params func(Repo_fstabRemove_Params) error, opts ...capnp.CallOption) Repo_fstabRemove_Results_Promise {
	if c.Client == nil {
		return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabRemove_Params{Struct: s}) }
	}
	return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabApply(ctx context.Context, params func(Repo_fstabApply_Params) error, opts ...capnp.CallOption) Repo_fstabApply_Results_Promise {
	if c.Client == nil {
		return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabApply_Params{Struct: s}) }
	}
	return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabList(ctx context.Context, params func(Repo_fstabList_Params) error, opts ...capnp.CallOption) Repo_fstabList_Results_Promise {
	if c.Client == nil {
		return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabList_Params{Struct: s}) }
	}
	return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabUnmountAll(ctx context.Context, params func(Repo_fstabUnmountAll_Params) error, opts ...capnp.CallOption) Repo_fstabUnmountAll_Results_Promise {
	if c.Client == nil {
		return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabUnmountAll_Params{Struct: s}) }
	}
	return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Version(ctx context.Context, params func(Repo_version_Params) error, opts ...capnp.CallOption) Repo_version_Results_Promise {
	if c.Client == nil {
		return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_version_Params{Struct: s}) }
	}
	return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) WaitForInit(ctx context.Context, params func(Repo_waitForInit_Params) error, opts ...capnp.CallOption) Repo_waitForInit_Results_Promise {
	if c.Client == nil {
		return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_waitForInit_Params{Struct: s}) }
	}
	return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GatewayUserAdd(ctx context.Context, params func(Repo_gatewayUserAdd_Params) error, opts ...capnp.CallOption) Repo_gatewayUserAdd_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      17,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserAdd_Params{Struct: s}) }
	}
	return Repo_gatewayUserAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GatewayUserRm(ctx context.Context, params func(Repo_gatewayUserRm_Params) error, opts ...capnp.CallOption) Repo_gatewayUserRm_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      18,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserRm_Params{Struct: s}) }
	}
	return Repo_gatewayUserRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GatewayUserList(ctx context.Context, params func(Repo_gatewayUserList_Params) error, opts ...capnp.CallOption) Repo_gatewayUserList_Results_Promise {
	if c.Client == nil {
		return Repo_gatewayUserList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      19,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_gatewayUserList_Params{Struct: s}) }
	}
	return Repo_gatewayUserList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteAddOrUpdate(ctx context.Context, params func(Net_remoteAddOrUpdate_Params) error, opts ...capnp.CallOption) Net_remoteAddOrUpdate_Results_Promise {
	if c.Client == nil {
		return Net_remoteAddOrUpdate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAddOrUpdate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteAddOrUpdate_Params{Struct: s}) }
	}
	return Net_remoteAddOrUpdate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteRm(ctx context.Context, params func(Net_remoteRm_Params) error, opts ...capnp.CallOption) Net_remoteRm_Results_Promise {
	if c.Client == nil {
		return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteRm_Params{Struct: s}) }
	}
	return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteLs(ctx context.Context, params func(Net_remoteLs_Params) error, opts ...capnp.CallOption) Net_remoteLs_Results_Promise {
	if c.Client == nil {
		return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteLs_Params{Struct: s}) }
	}
	return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteUpdate(ctx context.Context, params func(Net_remoteUpdate_Params) error, opts ...capnp.CallOption) Net_remoteUpdate_Results_Promise {
	if c.Client == nil {
		return Net_remoteUpdate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteUpdate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteUpdate_Params{Struct: s}) }
	}
	return Net_remoteUpdate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteSave(ctx context.Context, params func(Net_remoteSave_Params) error, opts ...capnp.CallOption) Net_remoteSave_Results_Promise {
	if c.Client == nil {
		return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteSave_Params{Struct: s}) }
	}
	return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemotePing(ctx context.Context, params func(Net_remotePing_Params) error, opts ...capnp.CallOption) Net_remotePing_Results_Promise {
	if c.Client == nil {
		return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remotePing_Params{Struct: s}) }
	}
	return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteClear(ctx context.Context, params func(Net_remoteClear_Params) error, opts ...capnp.CallOption) Net_remoteClear_Results_Promise {
	if c.Client == nil {
		return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteClear_Params{Struct: s}) }
	}
	return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocate(ctx context.Context, params func(Net_netLocate_Params) error, opts ...capnp.CallOption) Net_netLocate_Results_Promise {
	if c.Client == nil {
		return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocate_Params{Struct: s}) }
	}
	return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocateNext(ctx context.Context, params func(Net_netLocateNext_Params) error, opts ...capnp.CallOption) Net_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocateNext_Params{Struct: s}) }
	}
	return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Whoami(ctx context.Context, params func(Net_whoami_Params) error, opts ...capnp.CallOption) Net_whoami_Results_Promise {
	if c.Client == nil {
		return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_whoami_Params{Struct: s}) }
	}
	return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Connect(ctx context.Context, params func(Net_connect_Params) error, opts ...capnp.CallOption) Net_connect_Results_Promise {
	if c.Client == nil {
		return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_connect_Params{Struct: s}) }
	}
	return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Disconnect(ctx context.Context, params func(Net_disconnect_Params) error, opts ...capnp.CallOption) Net_disconnect_Results_Promise {
	if c.Client == nil {
		return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_disconnect_Params{Struct: s}) }
	}
	return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteOnlineList(ctx context.Context, params func(Net_remoteOnlineList_Params) error, opts ...capnp.CallOption) Net_remoteOnlineList_Results_Promise {
	if c.Client == nil {
		return Net_remoteOnlineList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteOnlineList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteOnlineList_Params{Struct: s}) }
	}
	return Net_remoteOnlineList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteByName(ctx context.Context, params func(Net_remoteByName_Params) error, opts ...capnp.CallOption) Net_remoteByName_Results_Promise {
	if c.Client == nil {
		return Net_remoteByName_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteByName",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteByName_Params{Struct: s}) }
	}
	return Net_remoteByName_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	Tar(FS_tar) error

	DeletedNodes(FS_deletedNodes) error

	Undelete(FS_undelete) error

	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error

	CommitInfo(VCS_commitInfo) error

	Quit(Repo_quit) error

	Ping(Repo_ping) error

	Init(Repo_init) error

	Mount(Repo_mount) error

	Unmount(Repo_unmount) error

	ConfigGet(Repo_configGet) error

	ConfigSet(Repo_configSet) error

	ConfigAll(Repo_configAll) error

	ConfigDoc(Repo_configDoc) error

	Become(Repo_become) error

	FstabAdd(Repo_fstabAdd) error

	FstabRemove(Repo_fstabRemove) error

	FstabApply(Repo_fstabApply) error

	FstabList(Repo_fstabList) error

	FstabUnmountAll(Repo_fstabUnmountAll) error

	Version(Repo_version) error

	WaitForInit(Repo_waitForInit) error

	GatewayUserAdd(Repo_gatewayUserAdd) error

	GatewayUserRm(Repo_gatewayUserRm) error

	GatewayUserList(Repo_gatewayUserList) error

	RemoteAddOrUpdate(Net_remoteAddOrUpdate) error

	RemoteRm(Net_remoteRm) error

	RemoteLs(Net_remoteLs) error

	RemoteUpdate(Net_remoteUpdate) error

	RemoteSave(Net_remoteSave) error

	RemotePing(Net_remotePing) error

	RemoteClear(Net_remoteClear) error

	NetLocate(Net_netLocate) error

	NetLocateNext(Net_netLocateNext) error

	Whoami(Net_whoami) error

	Connect(Net_connect) error

	Disconnect(Net_disconnect) error

	RemoteOnlineList(Net_remoteOnlineList) error

	RemoteByName(Net_remoteByName) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 60)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "tar",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_tar{c, opts, FS_tar_Params{Struct: p}, FS_tar_Results{Struct: r}}
			return s.Tar(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "deletedNodes",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_deletedNodes{c, opts, FS_deletedNodes_Params{Struct: p}, FS_deletedNodes_Results{Struct: r}}
			return s.DeletedNodes(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "undelete",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_undelete{c, opts, FS_undelete_Params{Struct: p}, FS_undelete_Results{Struct: r}}
			return s.Undelete(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commitInfo{c, opts, VCS_commitInfo_Params{Struct: p}, VCS_commitInfo_Results{Struct: r}}
			return s.CommitInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_quit{c, opts, Repo_quit_Params{Struct: p}, Repo_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_ping{c, opts, Repo_ping_Params{Struct: p}, Repo_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_init{c, opts, Repo_init_Params{Struct: p}, Repo_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_mount{c, opts, Repo_mount_Params{Struct: p}, Repo_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_unmount{c, opts, Repo_unmount_Params{Struct: p}, Repo_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configGet{c, opts, Repo_configGet_Params{Struct: p}, Repo_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configSet{c, opts, Repo_configSet_Params{Struct: p}, Repo_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configAll{c, opts, Repo_configAll_Params{Struct: p}, Repo_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configDoc{c, opts, Repo_configDoc_Params{Struct: p}, Repo_configDoc_Results{Struct: r}}
			return s.ConfigDoc(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_become{c, opts, Repo_become_Params{Struct: p}, Repo_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabAdd{c, opts, Repo_fstabAdd_Params{Struct: p}, Repo_fstabAdd_Results{Struct: r}}
			return s.FstabAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabRemove{c, opts, Repo_fstabRemove_Params{Struct: p}, Repo_fstabRemove_Results{Struct: r}}
			return s.FstabRemove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabApply{c, opts, Repo_fstabApply_Params{Struct: p}, Repo_fstabApply_Results{Struct: r}}
			return s.FstabApply(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabList{c, opts, Repo_fstabList_Params{Struct: p}, Repo_fstabList_Results{Struct: r}}
			return s.FstabList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabUnmountAll{c, opts, Repo_fstabUnmountAll_Params{Struct: p}, Repo_fstabUnmountAll_Results{Struct: r}}
			return s.FstabUnmountAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_version{c, opts, Repo_version_Params{Struct: p}, Repo_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_waitForInit{c, opts, Repo_waitForInit_Params{Struct: p}, Repo_waitForInit_Results{Struct: r}}
			return s.WaitForInit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      17,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserAdd{c, opts, Repo_gatewayUserAdd_Params{Struct: p}, Repo_gatewayUserAdd_Results{Struct: r}}
			return s.GatewayUserAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      18,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserRm{c, opts, Repo_gatewayUserRm_Params{Struct: p}, Repo_gatewayUserRm_Results{Struct: r}}
			return s.GatewayUserRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      19,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "gatewayUserList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_gatewayUserList{c, opts, Repo_gatewayUserList_Params{Struct: p}, Repo_gatewayUserList_Results{Struct: r}}
			return s.GatewayUserList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAddOrUpdate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteAddOrUpdate{c, opts, Net_remoteAddOrUpdate_Params{Struct: p}, Net_remoteAddOrUpdate_Results{Struct: r}}
			return s.RemoteAddOrUpdate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteRm{c, opts, Net_remoteRm_Params{Struct: p}, Net_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteLs{c, opts, Net_remoteLs_Params{Struct: p}, Net_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteUpdate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteUpdate{c, opts, Net_remoteUpdate_Params{Struct: p}, Net_remoteUpdate_Results{Struct: r}}
			return s.RemoteUpdate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteSave{c, opts, Net_remoteSave_Params{Struct: p}, Net_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remotePing{c, opts, Net_remotePing_Params{Struct: p}, Net_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteClear{c, opts, Net_remoteClear_Params{Struct: p}, Net_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocate{c, opts, Net_netLocate_Params{Struct: p}, Net_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocateNext{c, opts, Net_netLocateNext_Params{Struct: p}, Net_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_whoami{c, opts, Net_whoami_Params{Struct: p}, Net_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_connect{c, opts, Net_connect_Params{Struct: p}, Net_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_disconnect{c, opts, Net_disconnect_Params{Struct: p}, Net_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteOnlineList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteOnlineList{c, opts, Net_remoteOnlineList_Params{Struct: p}, Net_remoteOnlineList_Results{Struct: r}}
			return s.RemoteOnlineList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteByName",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteByName{c, opts, Net_remoteByName_Params{Struct: p}, Net_remoteByName_Results{Struct: r}}
			return s.RemoteByName(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

const schema_ea883e7d5248d81b = "x\xda\xb4\xbc}|\x14E\x9a8^OwB\xcbk" +
	"\x18;\x88 0C\x04\x84Hb\x12\xe0\x07$`^" +
	"\x08\x91\xe4xI\xcf\x10\xd4,\xbavf*I\xc3\xbc" +
	"\xd1\xdd!\xc4\x95\x0b\xb0 \xe2\x89\x8a\x8a\x08\xca)\xde" +
	"\x8f\x15T\x16\xd1\xe5<tq}\xe3<v\xf5\xbb\xa2" +
	"\xa0\xa2\xe0W\xf6\xe0\x14O\x0eQq\xd5\x85\x9d\xef\xa7" +
	"\xaa\xa7\xbak\x92If\xc2\xd7\xef_\xc9T?U\xf5" +
	"T\xd5\xf3\xfe<U\x05o\x0f.\x13\x0a3?/B" +
	"\xc8W+d\xf6\x8a\xb9~5\xe4\x981w\xeb\x0a\xa4" +
	"x\x00\x10\xca\x90\x10\x9ap\xf3\x90\x06@ \xe3!\xa5" +
	"\x08b'G|q\xf8H\xc6\xb7\xab\x90+\x07\x10\xca" +
	"\x04\x02\xb0f\xc8{\x04`3\x058_\xfdk\xed\xc8" +
	"\xf4~wZ\x00t\x80\x83Cn\x07\x94q\xf1\xaf\x81" +
	"\x8fW\xba\xe6\xdf\xe9\x1a\xc9\xda\xf7\xd2\xf6\xd8\x83\x97e" +
	"\x9d\xf8\xa9\xfe\xe8\x9d\xfc\x90\xdb\x86<M\x86\xdcC\x87" +
	"\xfc\xe1\x0a<\xbe\xe0\x9f\xdf\\\x8b\\\x1e\xd6\xf5\xc8\x10" +
	"\x9dt\xbdk\xfd?\xcd\xd5\xa6T\xdc\xc5}y\xcd\xfa" +
	"\"\xfc\xaa\x04\x9f~\xfa\xd4\xdd\x1c\x1a\xbb\x08\x9a\x191" +
	"\xcf[[\xfe\xbf\xd3\xca\xbb\xf7\"\xd7p\x88]\xf5\xd1" +
	",\xef\xf2\xeb\xef\xfa\xd2\x9e\xd6\x0b\xf2\xde!\x92\xbcw" +
	"\x88[>M'\xbf\xec\xbb\xb3\xfd\xd6j\xcfn@\x14" +
	"o\x0b\xac\xf7P\x8a\xdd\x90\xa1\x04\xe0\xb3\xbe\x9f\x98\xb9" +
	"\x0f-~\x90\x9bi\xea\xd0?\x92\x99\xde\xbdiV\xe3" +
	"n\xbf\xf6\x90\x85\x9d\xd55o\xe8*\xd2u*\xed\xfa" +
	"\xf2=s\xa7\xbf\xf0\x9b{7\xf2\x007\x0f\xad\xa7\xbb" +
	"M\x01\xf41\x0f\x9d9\xf4\xe2\x8e\x8d\xdc\xfa\xd6\x0c\xbd" +
	"\x9b\x8c\xfd\xe3\xa6\x0f\x16U*\x7f\x7f\x98\x9b\xb5e\xe8" +
	"\xf3\xe4\xcb\x0d\x15g\xfe\xfc\x83k\xf6&\xa4\x0c\x07~" +
	"\x81\x14\x06\x0f\xad\x01\xb9m\xa8$\xb7\x0duO\xd89" +
	"\xd4\x0d\x08b\x0ba\xd2\xd0\xd9\xde{6qC\xed\xbf" +
	"\x8an\xe2\x8do/9\xfb`\xdf\x82G\xe2'#\x90" +
	"O;\xaf\xba\x9d\xe0\xb7\xf7\xaaV\x04\xb1\xf0\xa0\xab[" +
	"\xae8\xf6\xe5#\\\xd7A\xc3(~\x9fDw\xe5\xfd" +
	"\xf7\xb4\xe76#\xe7\xb83\x87Q\xfc~\xd1gR@" +
	"\x1b>n\x0b\xbf\xa1\xe7\xafz\x89\x0c\x9a9\x8c,z" +
	"]\x9b\xf4\xca\xc1/\x1e~\x94\xa7\x87\xd1\xc3\xb6\x10\x80" +
	"I\x14\xe01\xa1\xcf\xa6+w<\xf5h|\xdb(Z" +
	"u\xc3\x16\x11\x00u\x18Ak\xa0\xab\xb4\xba\xbdu\xc8" +
	"c\xf1\x11\xe8\xec\x07\x86\xe9\x04\xe0\xd0\xb0\xcf\x11\xc4\x06" +
	"+\xf3>\x1d\xe0~\xe11\x9e\xccw\x0d\x7f\x9e\x00\xec" +
	"\x1fN\xa6\x88y\xd7\xb5\x0d\xfe)\xb0\x95\xc7\xe1\xc4p" +
	"\xba\xf23\x14\xe0\xfb+\xbe\x16*7]\xf8g\xfe\xe8" +
	"\xfa\x8f\xa0G7d\x04\x01\x98r\xfb\xeb\x0f\xbc\xf3\xde" +
	"\x17\x8f\xf3SL\x1dA9i&\x05\xf8\x8f\xb9\x83_" +
	"\xf7\x04\x97o\xe3G\xc0#\x9e$\x00-\x14\xa0\xed\xcc" +
	"\xbd\xfegN\xed\xdc\x86\x94\x91`Cl\xb4 \xb6\x8f" +
	" \xeb\\=\xb1\xfe\xc9\xfc_\x16<I\x8eZ\xe4\x8e" +
	"\xba\x17\xddnw\x11\xc8\x83\xdc\x92<\xc8\xed\x9eP\xed" +
	"~J@\x10[\xec\xf3\x95\x7f#W\xfc\x0b\xbf,W" +
	"\x0e\x1dqd\x0e\x99s\xcd\xb5\xcb\x0f\xf8\xde?\xfb\xff" +
	"s\xc7V\x9e\xd3@\x8e\xed\xa5\xf7.\xff\xe3\xd8\xe9-" +
	"\xdb\xf9\xf5\xe4\xe5\xd0\x1d\x99J\xbb\xbe\xb8}\x0f\x04n" +
	",\xf8\x0d\x7f\xae7\xe7\xd0c\xd3(@\xce\xd2U\xbb" +
	"\xdf\xabZ\xf7\x14\xbf\xe0u9\x94\x936S\x80\x0d\xe7" +
	"n\x7f\xfc\x81w\x1av \xd7pn5\x08&\x1c\xcc" +
	"\xb9\x1c\xe4\xa39\x94\xf1s\xa4Ly\xdc\x18\x09\xa1\xd8" +
	"\x15\xd2\xa6O\x9e\x98\xff\xc0\x0e\x8e\xf8\\c\x9e$\xb8" +
	"N\\0\"6\xfb\x17\xbdw\xf23\xc1\x18z8\xfd" +
	"\xc7\x90\x99B\x87?\x0f\xf7nZ\xbe3\x8e+\xa5\xa0" +
	"\xbc1\xf4p\xa6\x8e!;+^\xde\xcf\x95\xdf\xf0X" +
	"\xc2\x08\x1b\xc7P\x0a\xdaFGX\xb4j\xc15\x07\xe0" +
	"\xe4\xce\x8e\\&R\x194\xc6\x0b\xf2\x911\x92|d" +
	"\x8c{\xc2\xc51\x94\xcb`y\xfd+\xb7\x15\xcbOw" +
	"Z\xdc\x90\xb1}@\x1e7\x96R\xf9\xd8\xb5\xa2\xbc>" +
	"\x97,n\xe4\xfb\xef\x8c^\xfd\xd4#O\xf3\xfc\x9dK" +
	"\x99r\xb76\xfb\xdeS\xb3F<\xc3\xa3\xa6\xe6R\xea" +
	"\x0f\xe5\x12\xd4r#\xdf<z\xe1\xdf\xd7=\xc3\x09\x8d" +
	"\xf5\xe4{FlIh\xd1\xbe\xfb\xbfz\xe3\x19\xfe\xf8" +
	"\xdbr\xe9\xf1\xaf\xa3]wL\xf9\xbe\xfa_\x0f\x04\x9f" +
	"\xe5\xcfpg.\xe5\x8b}\x14\xe0S\xf9T\xee\x94\xdf" +
	"\xdf\xf7,\x87\xd6\xd1\xdc\xa7\xc9\xd8\x8bf\xbc\xbf\xb3\xac" +
	"\xff\xf9g\xf9\xb1\x0fZc\x1f\xa5]\xb5\x1b\xdf\x886" +
	"\xc4&\xef\x8a\x933\xed\xdb\xfbZ\x0a0\xe4Z\x02\xf0" +
	"/[>>\xbe\xd0\xed\xdf\xcd\xd1\xde\xf4kW\x91\xb1" +
	"\xcd\xfbv\xdd\xf3\xfbq\xff\xb9\x9b\x1f{\xdc\xb5\x0f\xd0" +
	"\xe3\xa2]\xdf\xf5\xfd\xfd\x93\xff\x9d\xff\xfd\xee\x04\xda\xbb" +
	"\x96\x1e\x17\xa6\x00\xea\x80\x92?]y\xa1\xe0\xb98\xf5" +
	"\xc6\xf5\xd6\xb5t\xd76\\KN\xfc\xc5%\x9fN," +
	"\xfe\xe8\x17\xcf%p\xdb9\x0b\xe2\"\x85(\xbc\xef\x83" +
	"'>\xdc4i\x0f\x87\x9f:\x9e\x0a\xfa\xeb\xde\xfc\xd5" +
	"c\x19\x0bG?\xcfO_7\x9e\xe2\x87\xc7S\x895" +
	"\xe7\x86\xd7?\xf8\xac\xe1y\xae\xeb\xc6\xf1T\xf9\xd5m" +
	"\x1d{\xf5\xd37\xdd\xf1\xbb\x0e\xda\x88\x82\xac\x1c\x9f\x03" +
	"\xf2\x86\xf1\x92\xbca\xbc[\xde7\x9e\x08.\xf3\xd5\x92" +
	"?\x8f\xb8\xe6\x0f{\xb9\xfd\xdf\x9aG\xf7\xff\xb7\x7f=" +
	"5v\xd2\x84c{y\x1c\xd6\xe7Q\xf6\xdb\x9aGp" +
	"8w\xf1\xbbc\xafM\x8f\xbc\xc8K\xcdw\xf2(\xcd" +
	"\x1f\xcd#\xeb\x9b\xda\xf2\x8fU\x8b\x8f\xbf\xfb\"\x87\xe4" +
	"\xa4|\xba\xff\xab\xef\x1a78\xf4\x8b\xde\xfb\xb8/#" +
	"\xf3)\xa7\xdd\xf0?5\xfbfk\xc6>~VW>" +
	"5\x07F\xe7\x93Yw_3\xfb\xea\xfbO\xf6\x7f\x89" +
	"\xebZ\x97OW\xfe\xc2\xc7\x17\xa7?\xb1\xf3\xd6\x97y" +
	":.\xcf\xa7z@\xa1]w\x1d\x8b=\x98;\xe1\xd7" +
	"/sk]\x99\xbf\x85t\xbd\xf0\xcck\x8f_\xef\xfd" +
	"\x8a\xff\xb2$\x9f\x9e\xc4#o.\xaf(\\8\xe7\xf7" +
	"\x1d\xd9\xd2\x92\xae\xf9^\x90\xdb\xf2%\x84\xe4\x96|\xb2" +
	"\xe2es\xc6o^q\xdf\xfa\xfd<5[\xe3<4" +
	"\xc5\xb7\xec\xdb\xb9O\xee\xe7)\xee\x1d\x0b\xb9\xe3\x14\xb9" +
	"\x7fx<\xfb\x8e\xd6\xea\x9d\xfb\xb9u]\xcc\xa7L\xe6" +
	"+)x\xf8\xab\xb6\x7f\xdd\xcf\xaf\xebt>\xa5\xa3\xf3" +
	"\xb4\xeb\x16\xdf\xe1\x01\xbfzy\xc9+IE\xc7\xa0\xeb" +
	"r@\x1e}\x9d$\x8f\xbe\xce-\xd7]G\xce\xbcz" +
	"\xda\xae\xaf\xfex\xea\xa5W8,g\x16\xd0}\x88\x0d" +
	"\xbe\xffq\xefg\xa7^\xe1w\x7fR\x01=\xf3\x99\x05" +
	"d\xaa\x1bN\xcf\xff\xaf\x0f\xbe\x1d\xf6\x07N\x14\xe0\x02" +
	"*E*K\xaf\xffc\xc9\xd2u\xaf\xf2]\x95\x02*" +
	"\x8cU\xda\xb5\xf5\x99M\xd9\xd7\xf8v\xbd\xca\xeb\xfe\x95" +
	"\xd6\xd8\x1b\x0a\xc8\xe6\xfd\x90\x7f\xf4\xe3O\x1b\x8f\xbf\xca" +
	"\xd3\xd3\x99\x02JO?R\x80;\x9b\x07\xe0??\xbc" +
	"\xfa5\xfe\xe8\x0b\xa9q0Tl\xf3\xdd>x\xca\x1b" +
	"\xbc(\x98YH\xc5L]!UC\xf3[W\x1c8" +
	"{\xe1\x0d^\xfa\x15R\xeba\xe2\xe3'\x7f\xfb\xc2\xe5" +
	"s\xde\xe4\x0f\x06\x17ZZ\x93v}\xfe\xbfo|V" +
	"\xfd\xfe\xd4[\\\xd7\xed\x85\x94Vo=\xf7\xdc\x98g" +
	"\xef\xad;\x98 \xd3\x0b\xe9\xc1l\xa3]\x1b\x9fX\xb4" +
	"\xe5?F\xdcv\xb0\x03/JT\xa4\x17^\x0e\xf2\xa1" +
	"BI>T\xe8\x9ep\xb1\xf0>\"\xd2?\xf45\x97" +
	"\x8e\xd9\xf1\xc2Anw\x7f\x9c@i;\xfb\xe0'\xdf" +
	"\xe0\xeb\xc3\x7f\xe2\x96~j\x02]\xfa\xa8\x97~\xe7\xc5" +
	"\xbf<\xfc'\xde492\xe1u\x82\xc4\xa9\x09\xe4\xb4" +
	"\xbf?\xa3\xac\xbb\xe7\x9b\xef\xde\xe6\x06=>\x91\x12\xd6" +
	"\xe6A\xab\x8d\x0f\x86K\xef\xf2Gvp\"5'\x8f" +
	"L\xa4:\xe9\x7f\xd6~\xf9w\xf9\x8aw;\x12\x165" +
	"\x07\xceO\xcc\x019s\x92$gNrO(\x9c\xf4" +
	"\x16Y\xc0\xe1j-\xfb\xdf\xfe\xd7\xeeCqd(\x01" +
	"\xc2d*\xb7\\\x93w\x13\xfbsa\xaf/}\x86\xeb" +
	"=\xfe\xa0\xf6L\xa6D\xf0\xdad2\xe5\x81G\xf7_" +
	"\xfcl\xd1-\xefs\x0b=1\x99\xeev\xc5\x8c\xfa\xbf" +
	"EGo9\x9c\x94\xca\x0fM.\x02\xf9\xc4dI>" +
	"1\xd9-\xbb\xa6\x90u\x9f\xbe\xad\xe5\x1f\x7f{\x1e>" +
	"d\xf2\x97\xd2\xd3\xb9)\x14\x19\x98J\x90\x99\xfe\xe2\xc8" +
	"\x8d\xf3\x06\xf5\xfb\x90;\xd9mS\x1f s\xd5<\xfd" +
	"@iI}!\xffe\xc3T\xca!\x07\x0e\x1c\xf9\xdb" +
	"\xf7\xa3\xd6~\xc8\x9f\xf9\xca\xa9\x94H\xd7O%\x0b\x98" +
	"q\xe1\xe1\xfa\xfe_?\xf5!OO\xbb\xa6\xdeM-" +
	"A\x0a\xd0_]}24\xeb\xec\x87\xfc\xae\x9f\x98J" +
	"\xd1:G\x01\x1e^?A\xbd\xfa\xf1\x99G\x13D`" +
	"15\x8c\x86\x17S\xc5\xb7e\xc7\x0f\xdf\x1b\xf3\x8f&" +
	"\x13\xf1\xd3\x8b\xbd +\xc5D$\xcd)&\xdb\xf0\xf5" +
	"{+\xb6\xcf\xf8\xcb5\x9f\xf0\x08\x8f.\xa1\x9a\xac\xb0" +
	"\x84\x8a\xf1}o\x1d\xab\xfef\xd9'\xdc\x8e+%t" +
	"\x17\xbe{\xe3\xd9\x99\x19\xff\xb9\xe3\x13\x8er\xcaK\xa8" +
	"\xedvp\xee\xd6\xc1\xeb\xbf\xeas\x8c\xeb\x93WB\xb5" +
	"\xc6\xa9\xb7\x1e\xdd\xb4\xa9q\xed\xb1\x0e\xb8\xd1\xcd\x1f^" +
	"RC&%\xb8\xe5\x95\x10\x86\x1ez\xe4\xe4\xbb\xb7m" +
	"\xdf\xf3\x19\xbfW\xebJ(5l\xa6\xb8=\xaf\x8f\x7f" +
	"\xf3\xdf\xb6~\xf7\x19\xbf\x15\xfbJ\xe8f\x1e\xa4\x00\xaf" +
	"\x7f\xfb\x0f\xd9kO\xce?\xc1\x03\xfcXBI8s" +
	"\x1a\x01\xa8\xad*x*v\xc7\xa3'8LGO\xa3" +
	"'\xb9Kz\xb3}T\xce\xde\x13\xc9vq\xd0\xb4\\" +
	"\x90GO#\x98\x8e\x9cFv\xf1\xc7\xc3w\xfc\xee\x96" +
	"\x9b^\xf8K'c+s\xba\x00\xb2k:\xb5\xd6\xa7" +
	"K\x19\xf2\xe6Rbl\x95\xcc8+V^\xf5\xc3_" +
	"\x18\xedY\xba\xa6\x94 >aC)5\xdf.\xfe{" +
	"\xaf\xdf\x7ft\xdb\xa0\xcf\x13\xc8so\x19=\x98\xd7\xca" +
	"\x08y\xae\xfa\xd3K\xaf\x9b\x8f-\xfc\x9c\xdf\x9d\x9b\xcb" +
	"\xe9\xdap9Y[\xfd\xd7\x93\x1e\x9e\xbd\xb1\xf4\x0bn" +
	"mk\xca)\xaf,\x18\xfb\xb6\xe7\x0f\x93\xc6\x9d\xe6\x0f" +
	"\xbd\xa5\x9cJ\xa6\x95\xb4k\xf6\x7f\xbd\xa4\x8c\xba\xbb\xfa" +
	"K\x8e\xc0\xf7\x94\xbfN\xba\xde\x7f\xf8S\xf7\x9eo>" +
	"\xe6\xbfl+\xa7\x92\xe6\xc0\x07\x9f\xfdmm\xd6\x9e\xaf" +
	":l\x18\xe5\xbf\x0d\xe55 o/\x97\xe4\xed\xe5n" +
	"\xf9H9A\xff\xdb\x87\x84\x9b\x16\x14\x8d\xfa\x96\xa3\x9e" +
	"P\x05U\x15\xef\xfdz\xd8\x1b\xea\xf65\xdf%\x18W" +
	"\x15\xf4T\xb5\x0a\xaa\x0b\x8bw\xcb{\xf2\x0e'\x00\xac" +
	"\xab\xa0[\xb3\x91\x02L\xd9\x96{\xeb\xfe\x81o\x9c\xe7" +
	"\x01\xf6VP+\xe1 \x05\xf8\xfe\xea\xfa\x9b\xa6\xf6\x1e" +
	"\xfdW\x1e\xe0t\x85\xa53)\xc0\xfb\xaf~\xf0\xe5\xfb" +
	"\xa3?\xfekRi2zF\x05\xc8\x93f\x90\x7f\x0b" +
	"g\xd0\xd3\xf2\x9e\xa8x\xf9\xd7\xee\xba\x1f\x92\x91\xf5\xcc" +
	"\xca\"\x90\xeb*%\xb9\xae\xd2-\xaf\xac$\x84\xbd\xf3" +
	"\xfa\xa3\xa5k\xf4\x17\x7f\xe4N\xe6x%\x15\xe4G/" +
	"d\xe5]\xf3\xbb\x8c\x9f\x12dn%]\xda\x91J\x82" +
	"\xd8\xad\xd7\xe4l\xfc\xe9\xce\xca\x9f\xb8\xfd?_I\x8d" +
	"\xa6QUo^~v\xc5o~\xeaD\x83'*\xfb" +
	"\x80|\xae\x92\xea\xcb\xca\xb5\x82\xbc\xa6\x8a\xd0\xe0\xd9M" +
	"\xffTt\xe5\xb2Y\x17:\x81\x87\xaa\xfa\x80\xbc\x9c\xc0" +
	"\xc8mU\x92\xdcVu\x03B\xb1\xfaug/\x0e\xae" +
	"\\|\x81\xb7\x8d\xaa(\xc6\x9b\x94\xa7\xfa\xbe\x11z\xfa" +
	"\x02\xb7\x96P\xd5\xc7\xe4\xcbda\xe3\x91\xe1\xadw^" +
	"L\xb0\x81\xd5**\x0cCU\xadhn\xcc\xc0\xfaR" +
	"\xac_\xe7\xcfP\xa3\xe1\xe8u\xc1\x88_\x0d\xfeR\x8d" +
	"j\xf9~\xf2\xbb\xb8\xca\x97o\xaa\xfa(/6Z\xa4" +
	"\xa0i(\x19b\x06B\x19\x80\x90\xab\x7f.B\xcae" +
	"\"(\xd9\x02dE#\xba\x09\x19H\x80\x0c\x04\xf6\x88" +
	"\xbd\x92\x8e\xe8\xc5\xd1H~\x93j\xe2V\xb5\xad\xce\xc0" +
	"\xfal\xcd0\xe9\xf8A\x13\x12\xc6/\x8a\x8f?J\x00" +
	"w\x8b\x81u\x03\x06 \xa8\x15\x01\x06\xc6rj\xea\xa7" +
	"U\x9d\x1c~'B@\x1aS\xac\x81\xce\xb8\xa4E3" +
	"GyK\xe9<F\x8a\x0es\xb1\x99\xdf\xda\x1cQC" +
	"\xda\xa8\xd2ZUWCN\x87\xcc\xaegh4L\xb5" +
	"\xc1\x8bC\x91\xa5xT\xad\x9aE\xba\xf1\xcb\xf1\"\xa4" +
	"\xf4\x13A\xb9R\x80X(\xd2\x126\xe7\xaa!\x04\x18" +
	"\xfa!\x01\xfa\xa5\\C\x95/\xbf%\x1c\xd5\xc2\xa3\xbc" +
	"\xd8\x9d\xce\x12\xaa|\xf9\x86\xa96\xe1\xce\xf0\xbdR\xac" +
	"\xa0.L\xb1+\x0f\x06\xedSI\xb9\xbf\xa1\x88\x89\xab" +
	"\"\xc1\x00\x06\xbd\x16@\xc9\x00!v\xeb\x83\x8f+\xfb" +
	"?\xb8\xfb\x00R2\x04(\x1f\x05\xd0\x0f\xa1Bh\x80" +
	"X\xb9\xa7\x91@\xea\x19\x1e\xb3Y5=\xaaG\xa7\xdd" +
	"=\x9a\xe1Q\x83\xc1H+\x0ex\xcc\x88G\xf5\xfb%" +
	"l\x18\x08\xf1[X\xecP\\\xa95H\xa7\xdd\xcb\xec" +
	"\xf2@\xadi*\xda\xe6\xaa\xa1\xa4\xe7\xc3\x93sX\x0d" +
	"u>\x98\x1e\x90\xb3E4\x08\xa5@\x8b\x1ej\x00\x07" +
	"\xb1\x89Y\x97.\x19L5\x9b\xd3'\x15\xc2\xb2d@" +
	"\xb1\xeb%&\x1d05\x9a\x16I\xa4^\x1a\xdd\x96V" +
	"U3\xab\"zu\x98\xb0^zt;#\x12n\xd4" +
	"\x9af\x86M\xbd\x0d\xa1\xe4\xb4\xe4\x89\xd3R.\xa1%" +
	"?\x85\x17=\x98\xf4\xf0\x8c\xd5\xc2\xfe`K@\x0b7" +
	"yB\xd8T=ZV\xb812\x0e!%\xdb\xde\x84" +
	"\xe59\x08)\xcbDPV\x0b\xe0\x02\xc8&R\xd1\xb5" +
	"\x924\xde!\x82r\x97\x00.A\xc8\x06\x01!\xd7\x1a" +
	"\xd2\xb8B\x04\xe5\x1e\x01\\\xa2\x98\x0d\"B\xaeu\x15" +
	"\x08)\xabEP\xee\x17\x002\xb2!\x03!\xd7\xfaE" +
	"\x08)\xf7\x88\xa0<\"\x80\xb4\x18\xb7\xb1m\x95\x96\xaa" +
	"A\xfb\xff@\xc4\xcf\xfeo\x0f\xe0F\x950\x16\xdb\xfe" +
	"0\xc6\x01\xc3\x8b\x0d\x94e\xaa\xba\x09\x80\x04\x80\xf4\xa4" +
	"ZT\x0b7\x8d\xaau'\xca\xa8n\xe0)k3\xa1" +
	"\xa6\\f\xef\xca8\"\x9d\xc6\x8a\xa0L\xe4v\xa5\x90" +
	"\xacu\xbc\x08\xca\x14&\xb2jU\x13\x81M6\xed\x91" +
	"\xa8\xa9E\xc2\x06\x0ct\\p\x0400%AQT" +
	"\x96b\xdd\xd0\"\xe1ty\xc5a\xe1\xbah@5\x93" +
	"\x08\xb6\xae\xfb\x85\xb19;\xe2WM<\x17/s\x94" +
	"@W\x92E\xb7\xa4\xde@\xc7\x86O\x7fQ\x169V" +
	"F\xfc\xc9\xd8/\xc7\x99\x84'\x93t%9\x93Y\xa9" +
	"N\xad\x06!\xa5@\x04e\x9a\x001:X\xe2\xa9\xc5" +
	"t\x1c\x8d\xd4\xaaf3B(M\x14\xe8\xd24\xc2\xc5" +
	"qRS\x06\xda8\xa8d\xba\xdbDP\x82\x1c\x0e\x1a" +
	"\xd1\xdd\x01\x11\x94(\xc7O!BN\xcd\"(&\xc7" +
	"OKH\xf7\xa8\x08\xca\x1d\x02\xc4\x1aT\x03w\xc0\xcc" +
	"\x1di\x0d;b\xbe\xbdA\xf5/\xc6\xe1\x80\x8dwT" +
	"5\x8c\xd6\x88\x1eH\xb6\x96.\x85Y\x93\xaa7\xa8M" +
	"xF$\x18\xc4~gM\xdcI\xd5s\xbaZmj" +
	"\xd2\xb1ahH\\\x8a{\xcc\x9a\xc9h\xad\xc8!\x03" +
	"\xb7\x8e\xa3\xc1\x1e\x10\x021\x00.E\xaew9\xa0_" +
	"5/\xcd\xb6\xebrs-=\x11\x98\x1b\x09`\x83\xe0" +
	"*u\xa3f\xf5H\xc4L\xf3\xd8\x16\xcc\xf0\xe5\xfb#" +
	"\xa1\x90fV\x87\x1b#\x0e\xce\x1c3\xd4;\xcc`\xf3" +
	"B1'\xc14c\x81\x1a\xd4\x02^$\xe2Fv\x90" +
	"\xa5\xd6\x980\xd0\x89\xc9v`v1):>Su" +
	"SL\xba7wVA\xccg\xaa\x140\x93\x1a8\x1e" +
	"\xc3T\xcd\xbc\xa0\xb6\x18{\x02\xd8\xf0\xeb\x1a\x95\xa0\x9e" +
	"H\xa3G\x0d\xb7y\xc2\x91\x00F\x94{\xe3\x8b\x92\xcb" +
	"!\x17!\xdf4\x10\xc17\x0b\x1c\x06\x93gB\x0dB" +
	"\xbeJ\xd2^\x0b\x02\x80\xc5b\xf2\x1c\x0a>\x8b4\xcf" +
	"'\xe0\"P.\x93\x15(B\xc87\x9b\xb4\xdfD\xda" +
	"3VP\xcd%\xd7\xd1\xf6Z\xd2\xbe\x90\xb4gff" +
	"C&B\xf2\xcd\xb4}>i\xbf\x8d\xb4\xf7\x12\xb2\xa1" +
	"\x17B\xf2-P\x81\x90\xef&\xd2\x1e \xed\xd2\xcal" +
	"\xe2P\xc8*E\xe76\xd2\x1e$\xed\x97\xad\xca\x86\xcb" +
	"\x10\x925\xa8G\xc8\xd7L\xdaM\xd2\xde[\xcc\x86\xde" +
	"\x08\xc9K\xa0\x01!_\x94\xb4\xdfA\xda\xfbddC" +
	"\x1f\xe2\xebP\xfcM\xd2\xbe\x82\xb4\xf7\xcd\xcc\x86\xbe\x08" +
	"\xc9\xcb)\xfc\x1d\xa4\xfd.\xe8H\xe4\xa6\x8e\xf1,\xd5" +
	"\xa0R\xa3?\x12\xa0?\x82,C\xbb\x1dCo$@" +
	"o\x04n\x8d\xec\xab\xf3\xcb\xa8\xd4tv\xfe\xee\x00\x8e" +
	"\x9a\xcd\x8c\xba\xdbC\x91\xc0|\x8d3\xfd4\xa3V\x0b" +
	"\x871\x15/\x8c\xf55c\xe6\xb2hP\xf3#Qs" +
	"T\xb5?\x126q\xd8\x9c\x85$\xd5h\xb6\xb1 ^" +
	"\x8b=V\\t%\x82\xf4L\xa7\xa4\xe2TBR0" +
	"\xd0I\x06w \xe5\x8c.9+\x18ib\xbc\x9aZ" +
	"f\xe0e\x9aa\x1a)\xd5\xa8\x05\xd6Ib\xa6\xc5\xde" +
	")\x94\xa7\x8e\x97\xa6/\xed\x13\x04\x92\x17\x1bY]\xc9" +
	"c\xe2g\x12J\xe1\xfcL;\xd7\xda\xc1\xcf\x14\xbb:" +
	"-\xa0\x02\xa1V\xcc\xe4\xb2y\xc0\xaa#\xe4%B." +
	"\x12d,H\xe0$\xe0\x81e\x9d\xe5\x9b\xe9\xd79\x82" +
	"\x04\x82\x9d\xcc\x06\xe6\xf3\xcb\xe5\xf4\xeb$A\x02\xd1N" +
	"\xd1\x03\x0bD\xc8\xe3\x84\"$\xc8\xc3\x05\x092\xec\xe8" +
	"&\xb0\xd8\xa9\xec\x12*\x90 g\x0a\x12d\xda\xf1<" +
	"`yA\xf9G\xf0\"A>\x07\x12\xf4\xb2\x13\x00\xc0" +
	"\xf2\xac\xf2)\xfa\xf58H \xd9I\x09`y?\xf9" +
	"\x10\xfdz\x10$\xb8\xccN\xe1\x03K8\xcb\xfb\xe9\xd7" +
	"\xbd Ao;R\x06,x%\xef\x84b$\xc8[" +
	"A\x82>vP\x1aX\xfeG\xde\x005H\x90\xd7\x81" +
	"\x04}\xedb\x11`)\x02*\x10\x04\xb9\x05$\xe8g" +
	"\x07\xff\x81\xe5\xc9\xa8\xd8\x11d\x15$\xe8o\x87\x89\x81" +
	"%\x11\xe4:\x8a\xd5\x1c\x90`\x80\x9dT\x02V:\"" +
	"\x97\xc3*$\xc8SA\x82,\xbb\xd2\x01X.R\xce" +
	"\x03\xb2\x93#A\x82\x81vZ\x14XY\x86<\x88b" +
	"\xd5\x1f$p\xd91\x7f`\xf9&\x19\xe0v$\xb8~" +
	"\x94\xe0r;\xd3\x04,\xc6\xe7:\xa3#\xc1uJ\x02" +
	"\xd9.-\x01Vu\xe3:\xba\x0a\x09\xaeCR\xd6\x92" +
	"\x16\xcd,\x83,bX\x94A\x16\xb1\xc7\xca\xc0M\xed" +
	"\xf22ho\x09\xc7\xff\x8bY\xf2\xe2\x06\x8c\xc0\xf9\xe5" +
	"K\xf8U\x1eD\x10\xb4\x7fUF\x10\xf8\xcb\xa0\xb4\x01" +
	"\xfb#!\\\x061\x1a\x06(\x0f\x10\xa9\xc7~yq" +
	"\x08I\x91\xa5\xce\xd7h\x14\x89\xc16\xf6s\xb6fX" +
	"\xe3\xb3\x08\x02\xc4C\x08\xa8\x0c\xda\xe3\x86~\x19\xc4\x98" +
	"?\x88$\x8a{\x8c\xb9\xcd\xa8\xd4\xc0zy \xc07" +
	"\xb9\x0d\xac{C\\\x0b\xc4\x9dkT\x06\xb5\xd0\x03\xc1" +
	"\xe9\xc3\x8e\x89\x93\x9eA\xf4\xf3YXD\xac\x99\xaa-" +
	"[yk\x85\xc8\xb3Q\"(\x05\x9c\xd9\x9cW\xe1\x98" +
	"0\xbc\x90k7\xd5\xa6\xb9\xc9B\x12].C\x8f\x87" +
	"\xa1:\x9b\xb6\x97\xb8\x12+\xc6C\x8c\x99\x160\x92\x1b" +
	"=WR\xa3\xc7\x05/\xc5\xc2\xd8\xa4\x86\x0e\xb4\x18\xd4" +
	"\xb4\xf1\x94Z\x9e[\xa2#^\x9c\xcc\x11\xafq|\xee" +
	"\xb8Q\xe3Z\xd7\x80\x90r\x97\x08\xcaC\xc4\xa2\x11," +
	"\xbfaC\x91\xe3s\xbb2<\x96#\xbeQGHy" +
	"H\x04\xe5\x09\xea\xc6\x91)a\xa0\x93z\x8d\xab\xc3\xa0" +
	"j\x98>\x8c\xc3\xbc\xcf\xa0GZ\xc2\x01S\xd7\x90\x14" +
	"\x9dc0s\xc0\x8du=\xe2(p\xb5\xc5l\xc6a" +
	"SCn\xe2J\x06:i6\xb1+\xff\xd3\x0adL" +
	"\xa1J\x81E\xc5\x81\x85l\xe5=\xf0\x00\x12\xe4]@" +
	"\x94\x02\x8b\xba\x03K\xf8\xc8\xdb\xa8\x18\xdc\x0cD)\xb0" +
	"\xdc*\xb0\xd2\x03y=\xfd\xba\x06\x88R`\xc9]`" +
	"UXr\x1b,B\x82\xbc\x04\x88R`\x95\x02\xc0\x12" +
	"\x122\xa6B\xf2\x16 J\x81\xe5\x94\x81\xd5k\xc8\x0a" +
	"\xfdZM\x95\x02\xcb\xf7\x01K)\xc9\xd3\xa9\xa0\x9bD" +
	"\x95\x02\xcb\xe1\x01\xcb\x1b\xca\xe3\xa8\x80\x1dI\x95\x02\xcb" +
	"\xfa\x02\xab\x00\x93\x07\x81\x1e\x17\x92\xbdYu\xa0\x93\xe5" +
	"\x94\x81(\x05\xd7y\xa2\x13Xi\x08\xb0\xc4\xaa\xebt" +
	"\x05\x12\\\xc7\x89F`)#`U\x0a\xaeC\xf5H" +
	"p\x1d$\xfa\x80\x95l\x00\xabSp\xed\xbf\x1b\x09\xae" +
	"}D\x1b\xb0\xc2>`E/\xae]\x8b\x90\xe0\xda." +
	"\xc5,r)\x0f@`\x9eN#\x0c@\x84\x9d\xd5\xea" +
	"\x0dY\xa2\xd0\xfa5\xdb\xe0\x7f\xd5EQV@5\x1d" +
	"`\x9fJ<E\xfbg\xad\x86D\"\xaf\xe3?g\x04" +
	"\x91\x84U\xbd\x0cb,(\x81\xe8D\xf6/7\x0dR" +
	"\x94A\xa9\x15\x80.\x83v\x7f$\x1c\xc6~\"/\x03" +
	"\x9aA\x7f \x91\xfe\xb4F\x9c\x17\x86\xa0\x16\xc6T4" +
	":hU\xb4\xa1,\"2\x12\x85e\xaa\xf8xz\x91" +
	"\xa4*_\xbe\x19i\xf17\xa7\x8a\xa2\xf6\xcc\x15\xa5\x02" +
	"\x8b\xd9g\xe9\x8b\xf7\x1bpr\x0f\x96\xf7\xb2\x97\xaa\xc1" +
	"\x16|\xa9\xa1b\x16g\xea:\\\xd4\x85\x9c\xe9a\x80" +
	"4\xbe\x99\xe9\xaf\x9cE\xe8;\xae<\xc7\xb1g%5" +
	"\x18t\xacY\xde/\x18\xd0\x83\x8d\xa8\xa5\x91\x8c$3" +
	"\xf1)\x0d[\x82B\x14\xfa\"\x01\xfar\x13\xf4\xedr" +
	"\x828m\xb3  \xeb\x90:j\x98,aT\xe1\x9c" +
	"\x0a3:`\xa0\x93CN\xdb\x1bj\xc4&!\xee\xce" +
	"\xba\x93\xf7AZ\x9b#=\xa0\xed\xc5\x01MO\x16\xc0" +
	"\xcbu\xac\x00\xdb\x08\xd0\x9d\x98E\"\x0b\xf9u\xac\x9a" +
	"\xb8VEn\x1d\x87\x93\xb8V]\xaf\xc8h\x0b\xfb\x93" +
	"M_\x93$d\xe2\xe5\xc2\x87\xad\x9a\xd9|cs$" +
	"\xc4\xab\xca0\xc6\x81*l\xfa\x114w\xc2\xa0W\x0a" +
	"J\x9a\x17f\xa2\xaa\xe7a\xdf\xd9F\xb7\x87>J\x80" +
	"v\x0b\x90\xf3\xdfx\x96\x1c\xd0\x83\xb3\xef\x94'\x14\xbb" +
	"HV\x84\xa4\x90fvo\x0e\xdd\x1d\xf3i\xe1\xa6 " +
	"\xf6\x04!\xd2d\xe5)\x10\xf0\x01TB\x03\x0bEP" +
	"\x9a9;\x08\xe7pQU\x16@\xd5r\xe3Q\xd5\x15" +
	"\\\x00uy\xaecFe5s\xa1\x05)d4\xb1" +
	"C\xcb2\xd5&{[H\xdb\x00\x04Tk\xa5)\x14" +
	"\x9d\xec`y4\x1alKWL;\x87\xe7S\x97\xe2" +
	"dv\xf5\xcfxzL\x85$\xb1\xb5+R\xd8\xda\xed" +
	"\x86\xee\xaf\xe58\xad=`\x98\xb5\xc9\x94W\xdf\x14\xc1" +
	"\x0b;=\xd6\xad #\xdb\xc2T\xb9?\x89s\xd2\x03" +
	".J\x957\xd7\xc2\x8d\x11nG\xed\x02\xe6\xb4\xf9\xa1" +
	"%L\xfc\x97N\xfc\x90nl\xbd\xbb\xf87\xc1\xafQ" +
	"\xc78\xe0\xe0g\x97\xaf\xa4\xa5\xa18\xaa\x0c\x04\xac\xad" +
	"\x10/-\xd1\xddI\x18%\xdf\x909\x04~\x1e\x0d\xd9" +
	"ZNP\x0aQ\xcagbt\xac\x06\xe6\x85\x83m|" +
	"(Q\x8fD\xcc\xae21\xe9e\x9b\xed\x85\xa7\x9b\x92" +
	"\xe5\xfazCv\"\xb0'i\xf0\xee=\xddN\x92\xa1" +
	"\xbb\xa4\x96\x994\x1e\xc7c@\xe8\xb7C\x1cn`\x1a" +
	"q\xb8\x90D\xcc\x96n\xb3\xc7E\x10\xab\x0e7F<" +
	"\xaaG\x17\xad\x02\x84(\xc6\xba\xa7\x15{BZS\xb3" +
	"\xe9!*\xd3\xed!\x0a\x10\xa1\x94\xd2\xba\xa1\xbbt\xd7" +
	"j\x01 .\xacW>\xe0d\x8f\x13w\xb7Q\x0b7" +
	"a=\xaa#I\x0b\xdb9\x91v\xab\xc8\x81c`\xfb" +
	"\x1eS\x9cAT\xbf\x1fG\xcd\xf2\x160#VZ\x14" +
	"\xd2\x8d\xb8v0$\xe3\xb2\xb9g6a\x8a0m\x8f" +
	"L$\xcb\xa3\xe8AR7!\x19\x9c\xc4\x13\xf9\xb9l" +
	"t'\x8a\xc4\x96\x9b*\x8aS\xc4Eq\xb8<o\x17" +
	"nH\xd7\xa1\xa8H\xb4\xed\xff\xa96K\xc3\xe2\xea\x81" +
	"\x95\x96\x98dOb=\xf3\x07bj\xfe\xc5\xd8d9" +
	"\x99\x9eVW\xa5I%N?[WJ]8r\xa3" +
	"\x04(\xa5\xda\x80\xe35\xbb\xfc\xb0\xa7\xca\x88\x9aHi" +
	"\xa7S\xac\xb2\xaeKq\xa5\x93K\xbfJ\xad\x11\x1a\x93" +
	"\xcb\xbeaq\x93\xf4\xa7X\xa5\xd6\xd8\x88u\x1c\x16\xfc" +
	"\xd8\xd3\x80\xcdV\x8c\xc3\x1e\xb35\xe2\xf1\x97R;\xc6" +
	"@H\x19fc\xb2\x97\x10\xf4s\"(os\x14w" +
	"\x90P\xdc\x9b\"(\x9fq2\xef8i\xfcH\x04\xe5" +
	";\xceB=G\x1a\xbf\x12\xc1w\x19M=ZE3" +
	"r&\x14!\xe4\x05\x11|\xc3\xf8\xcc\xe3\x10(F\xc8" +
	"\x97M\xda\x0bh\xe6\xb1\x97\x95y\xcc\xa3\x19\xc6\xf1," +
	"\x11\xeaV\x03\x01\xdep\xe8\x90\xa8i\xb7\xe2\x9f\xdd\x00" +
	"hM\xe1\x88\xde\x1d@H3\x0c-\xdc\xd4%\x80\xbb" +
	"\xc3\x04v\xf5\xa9\xf5\xb94\x84\xf5\xa6n\xbe\xd3\xd8{" +
	"P\xf3\x9bD\xf7w\x09\x94n\x9c7M\xfb\x8c\xf7\xb8" +
	";[\x0d\xe9[\x1c\xacV-\x95Z\xacI\xa1\x16m" +
	"\x12YY\x1c\xaf\xbfz\xa4\xa3^LR\xe0\xd1Q+" +
	"\xc6\xfd\x99R\x9d\xe8\xed\x8e\xadi\x8a\xd9\x1e84\xf1" +
	"\xc2P\xb6\x7f]I8\x0b\x0c\x06:w\"\xd2\xb2]" +
	"f4\xabR\xb8\x09w\xcf\xbf_\xc6\xe6\x85\xb1\xa7Y" +
	"3L!\xa2\xb7\xc5k\xdf\x1a#\xbaG\xf5d5j" +
	"A\x8c\x90\xe2\xb1\xb1:D\x8e\xe6m\x11\x94\x8f\xb8\xa3" +
	"9BP}W\x04\xe5\x18w4G\x09\xe4\xe18K" +
	"\xb3\xa39\x9e\x1bg\xe9\x93\x0e\xf3\xbaN\x90C<&" +
	"\x82\xf2\x85\xc3\xba\xaeS\xab\x10RN\x8a\xa0|-\x00" +
	"Xl\xeb:Sc\xf1\xbe\xf2\x83\x00.\x09h\xb5\x80" +
	"\xeb|=B\xcaw\"x;\xa6\xf2K\xfd\xcdj\xb8" +
	"\xc9>\xfc\xacf\xac\x06:\x97fd\x85\xf1\xb2$\x15" +
	"\x1b\xed\x94!\xe7;&G\xabj\xd4\xeax\xa9\x06\x91" +
	"\x16#\xd8Vn\xa2\x9e\xa7\xf5{\xe2\x7fP\xa6\x00C" +
	"\xe9g\xef\xfcL/BJ\xa5\x08J-\xb7\xf3sH" +
	"\xe3l\x11\x94\x9b\xb8\x9d\xaf#\xfbY+\x82\xb2\xb0\x8b" +
	"\xe2\xe0\x9f\xb3\xfa.AY\xdbn\xd3\xcf\xa2\xa9\x1d\xdb" +
	"aF\x10[5\xa8\x09J09\xcdW\x07\xb0;l" +
	"jf[\xf7\x16\xfb\xe5\xccbo\x88\x88-\xa6'\xd2" +
	"\xa2{\xfc-\xba\x8e\xc3\xa6\xa7\xc5\xc0\xba\x95q\xc2\x89" +
	"\xd6zC\xda\xc5i\x042(\x82\xb2\xcc\xb1\xd6[\x08" +
	"\xf1\x9aV\xbc%\x16\x9f\xaa\x0eI\\QGbuZ" +
	"r#>\xa6\x19\x96\xc3\xceS[ON(\x09a\x11" +
	"\xb3\xb3L\x04e\xb6\xe3lV\x13\xa6\x9a%\x822\x9f" +
	"\xac\x0a\xacU)\xf5\x0e]%\x98\xe3\xa6\x16\xc2\x91\x16" +
	"\xd3\x87D\xec\xb7\xc3\xb5A:\xdf\x1c\x15\x89\xc6\xe2\x9e" +
	"\x04\x86\xe2\xa9\xe7\xce\xe5\xe2i\x99e\x1d=\x8f\xee\x1d" +
	"\xc6\x14\x15e=\xa8jN@\x9d\xd9\xb9\xdd\x16\xecw" +
	"\xa8\xa3L]\xd1\x12R\x17cbi%\x0d\xd3$\x14" +
	"\xeeh\x8d\x8d0\xd0\xb9\x8b\x98v\xa8:\x1evJ\xe2" +
	"\xc7\xf3\x8e\x18\x17\x09L1\xa6Er\x14]\xa0q\xcd" +
	"T*>\xb7\xbb8e\x94\xd3#<\x83%\xa8\xf8," +
	"5\x10\xb0Y(+\xa4r\xb4\x97\x9c\x9f\xd2-P\xba" +
	"\x94\xe4w*\xb1\xe6\x0d\xa5{)\"^\xad\xd9)\xb8" +
	"\x97\x9e\xe0L3\x8cb\xa9,\xcd\xac\xd5\xc2V\x929" +
	"yj\xc1q\x13\x8b\x1d7\xb1\x83\xe6\xb5\xea {\xc0" +
	":N\xfa\xed\x12J\x9d\xbb\xe6\x19b\xd5D\xf46\xc7" +
	">\xed*\\\x1c\x07\xe4\x82\x9b\xec&lZ\xfe\x1a?" +
	"\xd7\xa5\xdc\xbd\xc8L'\xb4\xdbQ\xb6%\xd7\x7f\x0b\xb0" +
	"\x9eeh\x91p\x07~\xd3\x93\xe9./WC\xcd\xf8" +
	"m\xc9\xedN\x0d\xb5\xcdom\xf5N^ >\xff\x02" +
	"\x8c\xdcVV,q1^\x8c`i\xc7:\xc5\x05\xa8" +
	"\x14'\x02\xc7?x\x91\x98\xa4\xfcN\xec\x82\x09(U" +
	"\x96\xd1\xd2\x07\xf6\x82\x0b\xb0\x07|\xe4sP\x84\x04\xf9" +
	"\x14-}`\x17\xd5\x80\xdd\x8b\x94\x8fB.\x12\xe4w" +
	"h\xe9\x03{\xdc\x03\xd8\x0b+\xf2k\x90\x13\xaf-\x13" +
	"\xed\x87\x1e\x80\xddg\x94w\xd2\x91\xb7\xd2\xd2\x07\xf6\xac" +
	"\x07\xb0\xab\xdb\xf2\x06Zy\xb6\x86\x96>\xb0\x17\x12\x80" +
	"\xbd\xa0A\x8bP\x059DK\x1f\xd8}w`7\xb4" +
	"e\x95~\xad\xa3\xa5\x0f\xec=\x18`\xb7p\xe5j\x8a" +
	"\xd5tZ\xfa\xc0\xae\x9e\x03{\xcaH.\xa4X\x8d\xa6" +
	"\xf5p\xec\x922\xb0\xa7\x03\xe4!t\xe4\xfe\xb4\x1e\x8e" +
	"\xbdU\x03\xec\xc1\x04\xa7z\xac\xaf\xfd\x18\x08\xb0\x9b\xfe" +
	"\xae3EHp\x9d\x90\xa0\x9f}\x95\x18\xd8\xd3-\xc4" +
	"\xd4\xa7\x85\x11\xfd\xed\x97\x87\x80=\xf8\xe4\xda\x9f\x83\x04" +
	"\xd7\x1e\x09\x06\xd8\x0f\xd3\x00{\xb0\xc5\xb5}\x11\x12\\" +
	"[%\xc8\xb2\x9f4\x02\xf62\x91kC\x0d\x12\\\xeb" +
	"$7\xbd\x98P\x06YA\xcd0\xcb@\xf2\xab\xb4\"" +
	"mq@\xd3\xcb\xac\xa0\xdbR\xf25\xfe\x878Ze" +
	" E\xb5p\x19\xb8i\xd4\xa3\x0c\xb2\x88R\xa7E^" +
	"V\xda\x00\x95Z\x89\x832p\xd3\x80`\x19\xab#-" +
	"\x03\xc9\xa4e\x13\xac\x9c\x13eE\x02\xd8(\x83\x18\xbb" +
	"\x9aD\x8b2RW\x86%\xe8e[\xedseI\xf5" +
	"\xdcU \xc6vk\x1a\x9c\xb8\xad\xcdv\xebk\xb8\x12" +
	"$\xc6v\x1b\xbdN\x09\x12\xbb\x1f\xb4\x95\xb4=&\x82" +
	"\xb2\x83\xdd\xc8\x98\xd7\x1aF\"g8\xc6\xf3:\xadH" +
	"\xe2\xcdI\x0a\xea\xc5K\x13\x0a\x95,5\x94\xc0\xb1\xdd" +
	"ed\xbb6\x1dtl`'N\xc7\x19\x97\xb9\x8eq" +
	"io@u\x8e\xe3\xca\xb0\xba\xac9E\x8e\xc5\x99 " +
	"#\xf9\xd25wcD\xf7\xe3\x9e8TV\x19b2" +
	"\x99\x9c*\xb6\x9cV\x122\xfdR\xc0`<h\xd8)" +
	"A\xc1k!\xe2{k\xe9\x94\x0c\xf7K7'\x93V" +
	"\x0a\x91\xdf\xa9\xce\x91\x9c\xe4K\xba\xc1\xe2\xb1j\x13\x87" +
	"R]\xad\xab\x80X\xb9\xc7\xa0i\xeb\x0c\x8ff\xe2\x90" +
	"uW\xb3U5<\x8b\xb5`\x10\x07<\x0dm\x1e\xb3" +
	"\x19{\x9a\xfc\x88Z\xc9\xdd\x13O\x05\xe7\x07\x0b\xa9\xa8" +
	"\xa7=^K\xcf\xf2\xd8\x1d|\xac4k-z\x9cH" +
	"\xf0\x86\x92:\x01\xff\x17\xe90+u\x9a\xc4\x0a\xe5\xeb" +
	"T\xba\xaa\xecL\x95\x03.\x0f\xb0:5\xc7A\xbc\xd4" +
	"\xe4G\xf7\xf7\x02z\xcc\x01|\\&\x8d\x08\x9c1_" +
	"m\xb0\xee{\x12\x9a\xe4\x04qn\xb2\xfa\xd0\\G:" +
	"39\xb4\xa6\x86\x13\xce\xac>t}.W4\x9a\x01" +
	"\x96 \xdeP\xecH\xecD\x1f$\xc1\xc4K\x92\xaaM" +
	"\xb8\xaaT\xaa\xfaM-\xc9e\xb0.\xe3\xf1\xee\xc6Z" +
	"U\xd3\xbb\x8f\xe9}\x13\xf3\xe2(\x91\xc9a\xc1\xa4\xa1" +
	"\xf8\x00\x0d\xd1k\xe1&\x8f\xbbQ\x0bb\x83ny\xf7" +
	"\x89\xa7\x1c.\xf1d\xe8\xfe\xce\x89S)`\x98\xdd\xa4" +
	"SS)\x8b4\xaf\xcf\xdb\x15G\xc9J\xe7z\xe0\xf6" +
	"\xf6Nu\x8f5-Q\xb9`\x86\xcf\x12wc\xa9\x15" +
	"\xca\x1e\xbb\x03\xf6\xfc\x84\\Hm\xb6\xd1\xd4\x0ae\xef" +
	"\xba\x00{\x17\x8b&$,\xabL\xb0_\x90\x03\xf6\x10" +
	"\x94\x0c\xa4\xaf\xeb<1B\xd9\x83\x18\xc0^\xbfr\x9d" +
	".\xb2\xcaU3\xec\x87D\x80=:\xe1:D\xbe\x1d" +
	" \x06({\x1e\x05\xd8C*\xae}\x15Hp\xed\"" +
	"\xe6'{\xa3\x04\xd8\x834\xaem\xc4\xf2\xdaL\x8cO" +
	"\xf6v\x19\xb0\xe7*\x08\xcd\x0b\xae\x95\xc4\xf4dO\xa3" +
	"\x01{\x83\xcc\xd5B\xe6\xd3\x88\xe1\xc9\x9e\xec\x03\xf6\xd4" +
	"\xa0\xeb\x96z$\xb8\xea$)\x18i*c\x9e \xb5" +
	"\xb7\x9a\xa8\xa1f\xfd\xa5\x14Pf\xbb]e\x10cV" +
	"\x145\xbc\xb2\xc8\x81\x97\x81\x9b\xd6O\xd1\xab\x05\xd6e" +
	"\x1e$6F\x12\xcd\xb2\xe4\\R^[MO\xa9V" +
	"\xccT\x06\x02\xf7\x98\x0bB\xce\xa3\x1a\x089\xcf\x05\"" +
	"\xe4\xbc\xae\x97R\xf59\x17X;\x91pO\x04m\xa7" +
	"\x12\x93\xeem\x87$\xb9\xdbd\xf5~5\\\xbd_\xc2" +
	"\x8d\xc8\x90\xba\xac\x12G\xad\xf2\x90xI\xfa\xff\x09\x00" +
	"\x00\xff\xff\x01%\xe9\xfd"

func init() {
	schemas.Register(schema_ea883e7d5248d81b,
		0x809d4e73dc197b11,
		0x82f304d5d4e81ee4,
		0x860c3dd5698349f5,
		0x86541181da6400f7,
		0x86d95afae10f0893,
		0x87c49e302c6516f8,
		0x884238694e8b8d88,
		0x8ae5aae9653b7b02,
		0x8ed051e9369ac720,
		0x91ac69870ceff408,
		0x936b942a74db0be0,
		0x946963af664858d0,
		0x958ea6b33d4e8cbb,
		0x95a8b7d1ed942672,
		0x96fe51446ad697f9,
		0x974c11f8cfed4247,
		0x978c524c1a35015c,
		0x98300b93ef71cc57,
		0x98eadc167523156e,
		0x99b03ceb2dad70db,
		0x9a291d6964350a5b,
		0x9b96e8c9be077989,
		0x9ba7a818970a029c,
		0x9c19777f493f1110,
		0x9cb31f0ede4f5117,
		0x9d64fa17798952ff,
		0x9efc974402f016f6,
		0x9fe8d2cd92c27a38,
		0xa17d6c20c2174ec8,
		0xa1a9e5ab638eed79,
		0xa2305f2ea25a3484,
		0xa34213f24153536b,
		0xa4efd353c57d2b85,
		0xa5753d28ca12d2ba,
		0xa630576401b1a5b7,
		0xa78946d2af827622,
		0xa862cd929f7af191,
		0xa89254a0db970716,
		0xa9095b4cff1e5634,
		0xa97d67096ee7d46d,
		0xa99c622e110c1203,
		0xa9e401c52756826a,
		0xaa133a60be5a7d01,
		0xaa98a78425cdd321,
		0xab1e48e58e4c69af,
		0xab89c6fc9bf26f2a,
		0xabc3ec90b96a6d71,
		0xac6cc5b649f638a8,
		0xac8fbc382ae513de,
		0xacf50d40a9d3436a,
		0xad37ff6270c35769,
		0xaf631f5cddda9aa3,
		0xafe329bc8cad8f74,
		0xaff62edfdbfe53d0,
		0xb030fc18cb3b0e61,
		0xb05bd83a34de71b7,
		0xb13597d7a0d68f31,
		0xb2255c049c7bc42f,
		0xb262e0d6c2474d9c,
		0xb47c58aa23289d55,
		0xb5bf271ecf3bc074,
		0xb5dc333528e5f7ae,
		0xb76f3dc1dcf4fdf1,
		0xb7d0dd6b467e7539,
		0xb9095b6d17298884,
		0xb973694cb94aee47,
		0xba0de490234c27af,
		0xbb5ea9a03dfddab3,
		0xbb83332a93ffdcad,
		0xbbec523e9fc1abfc,
		0xbc4d5c31427dc498,
		0xbd8d8f80992c4d78,
		0xbda24ef378533894,
		0xbda949777c149f4b,
		0xbdb679ec96303b53,
		0xbe71bb7b0ed4539a,
		0xbebae5caecad3c49,
		0xbee5e0529f9017ff,
		0xbf1cf3d6e654e947,
		0xc089763bca3e3f44,
		0xc0ad53271497ab77,
		0xc0dd66dedad92ef8,
		0xc18496cf650e6886,
		0xc338177a5379031a,
		0xc3fcefc580775485,
		0xc44d12b3aee49f34,
		0xc7e5f661ac57ebb2,
		0xc9558eac26b0f15e,
		0xc9601ec89a6aa066,
		0xc9b3a8263f6853d7,
		0xcb6e3e65f2dbc914,
		0xcbd45f6552b4ba24,
		0xccf4f28c8951edf6,
		0xd0071dd673841599,
		0xd01613feea87ee6a,
		0xd1afceb8146949d4,
		0xd2117353ea065c72,
		0xd35d6ae0fdbd9bc5,
		0xd49a2570fb5a4342,
		0xd701f5ae7e7560e9,
		0xd70c154f9521b73d,
		0xd7315a3b3f92aa4a,
		0xd78724f6fbd5c5c5,
		0xd7a7f00d5a96fc43,
		0xd7ef486de484610d,
		0xd9459f2361338d96,
		0xd95473f6f8a89a69,
		0xdb27e243a580d2f0,
		0xdb78f249dcc7b9f1,
		0xdba8e30445acc3f4,
		0xdc0aec8d179d4ec9,
		0xdc876697979bc7e5,
		0xe0b1a560d0e4d51a,
		0xe0f49db8c42c72b2,
		0xe154e487144bf3c2,
		0xe19b7cffa7304650,
		0xe1b522247fc407ad,
		0xe2b3585db47cd4f9,
		0xe2f81b4403ef433b,
		0xe71560d8bc06c6fd,
		0xe75c9c74c2bacb82,
		0xe83f954c9635f05a,
		0xe92935bf20cc2856,
		0xea498a2451bae614,
		0xeadaf2b11fded490,
		0xecb10f87fbe0d6c5,
		0xf3243256580294f3,
		0xf485a561c31c83d2,
		0xf4d42db113af3a4b,
		0xf5c310bd5e2aa138,
		0xf7250939585a23f6,
		0xf7da25d3ead6c0d3,
		0xf8551f83bb42e152,
		0xf9b772853fd93ea9,
		0xfa04b4272d0ffcd9,
		0xfa4486fa9522275e,
		0xfaa680ef12c44624,
		0xfc487818328b97ef,
		0xfc6b4417fdef895a,
		0xfcaa6dc30ba75197,
		0xfd86771dd5950237)
}
