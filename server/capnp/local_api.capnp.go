// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	math "math"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// StatInfo is a stat-like description of any node
type StatInfo struct{ capnp.Struct }

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xa2305f2ea25a3484

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xa2305f2ea25a3484, s.Struct)
	return str
}

func (s StatInfo) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) TreeHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s StatInfo) HasTreeHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetTreeHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s StatInfo) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s StatInfo) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s StatInfo) Inode() uint64 {
	return s.Struct.Uint64(8)
}

func (s StatInfo) SetInode(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s StatInfo) IsDir() bool {
	return s.Struct.Bit(128)
}

func (s StatInfo) SetIsDir(v bool) {
	s.Struct.SetBit(128, v)
}

func (s StatInfo) Depth() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s StatInfo) SetDepth(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s StatInfo) ModTime() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s StatInfo) HasModTime() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s StatInfo) ModTimeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s StatInfo) SetModTime(v string) error {
	return s.Struct.SetText(2, v)
}

func (s StatInfo) IsPinned() bool {
	return s.Struct.Bit(129)
}

func (s StatInfo) SetIsPinned(v bool) {
	s.Struct.SetBit(129, v)
}

func (s StatInfo) IsExplicit() bool {
	return s.Struct.Bit(130)
}

func (s StatInfo) SetIsExplicit(v bool) {
	s.Struct.SetBit(130, v)
}

func (s StatInfo) ContentHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s StatInfo) HasContentHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetContentHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s StatInfo) User() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s StatInfo) HasUser() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s StatInfo) UserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s StatInfo) SetUser(v string) error {
	return s.Struct.SetText(4, v)
}

func (s StatInfo) BackendHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s StatInfo) HasBackendHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetBackendHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xa2305f2ea25a3484, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

// Single log entry
type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xb47c58aa23289d55

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xb47c58aa23289d55, s.Struct)
	return str
}

func (s Commit) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Commit) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Commit) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Commit) Tags() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Commit) HasTags() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Commit) SetTags(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Commit) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Commit) Date() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Commit) HasDate() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Commit) DateBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Commit) SetDate(v string) error {
	return s.Struct.SetText(3, v)
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xb47c58aa23289d55, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

// A config entry (including meta info)
type ConfigEntry struct{ capnp.Struct }

// ConfigEntry_TypeID is the unique identifier for the type ConfigEntry.
const ConfigEntry_TypeID = 0x974c11f8cfed4247

func NewConfigEntry(s *capnp.Segment) (ConfigEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ConfigEntry{st}, err
}

func NewRootConfigEntry(s *capnp.Segment) (ConfigEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ConfigEntry{st}, err
}

func ReadRootConfigEntry(msg *capnp.Message) (ConfigEntry, error) {
	root, err := msg.RootPtr()
	return ConfigEntry{root.Struct()}, err
}

func (s ConfigEntry) String() string {
	str, _ := text.Marshal(0x974c11f8cfed4247, s.Struct)
	return str
}

func (s ConfigEntry) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConfigEntry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConfigEntry) Val() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfigEntry) HasVal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) ValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetVal(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ConfigEntry) Doc() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ConfigEntry) HasDoc() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) DocBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetDoc(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ConfigEntry) Default() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ConfigEntry) HasDefault() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ConfigEntry) DefaultBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ConfigEntry) SetDefault(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ConfigEntry) NeedsRestart() bool {
	return s.Struct.Bit(0)
}

func (s ConfigEntry) SetNeedsRestart(v bool) {
	s.Struct.SetBit(0, v)
}

// ConfigEntry_List is a list of ConfigEntry.
type ConfigEntry_List struct{ capnp.List }

// NewConfigEntry creates a new list of ConfigEntry.
func NewConfigEntry_List(s *capnp.Segment, sz int32) (ConfigEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return ConfigEntry_List{l}, err
}

func (s ConfigEntry_List) At(i int) ConfigEntry { return ConfigEntry{s.List.Struct(i)} }

func (s ConfigEntry_List) Set(i int, v ConfigEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ConfigEntry_List) String() string {
	str, _ := text.MarshalList(0x974c11f8cfed4247, s.List)
	return str
}

// ConfigEntry_Promise is a wrapper for a ConfigEntry promised by a client call.
type ConfigEntry_Promise struct{ *capnp.Pipeline }

func (p ConfigEntry_Promise) Struct() (ConfigEntry, error) {
	s, err := p.Pipeline.Struct()
	return ConfigEntry{s}, err
}

// One History entry for a file
type Change struct{ capnp.Struct }

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0xd01613feea87ee6a

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Change{st}, err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Change{st}, err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.RootPtr()
	return Change{root.Struct()}, err
}

func (s Change) String() string {
	str, _ := text.Marshal(0xd01613feea87ee6a, s.Struct)
	return str
}

func (s Change) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Change) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Change) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Change) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Change) Change() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Change) HasChange() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Change) ChangeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Change) SetChange(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Change) Head() (Commit, error) {
	p, err := s.Struct.Ptr(2)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasHead() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Change) SetHead(v Commit) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewHead() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) Next() (Commit, error) {
	p, err := s.Struct.Ptr(3)
	return Commit{Struct: p.Struct()}, err
}

func (s Change) HasNext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Change) SetNext(v Commit) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewNext sets the next field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Change) NewNext() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Change) MovedTo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Change) HasMovedTo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Change) MovedToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Change) SetMovedTo(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Change) WasPreviouslyAt() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Change) HasWasPreviouslyAt() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Change) WasPreviouslyAtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Change) SetWasPreviouslyAt(v string) error {
	return s.Struct.SetText(5, v)
}

// Change_List is a list of Change.
type Change_List struct{ capnp.List }

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return Change_List{l}, err
}

func (s Change_List) At(i int) Change { return Change{s.List.Struct(i)} }

func (s Change_List) Set(i int, v Change) error { return s.List.SetStruct(i, v.Struct) }

func (s Change_List) String() string {
	str, _ := text.MarshalList(0xd01613feea87ee6a, s.List)
	return str
}

// Change_Promise is a wrapper for a Change promised by a client call.
type Change_Promise struct{ *capnp.Pipeline }

func (p Change_Promise) Struct() (Change, error) {
	s, err := p.Pipeline.Struct()
	return Change{s}, err
}

func (p Change_Promise) Head() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Change_Promise) Next() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

// Represent two differing files
type DiffPair struct{ capnp.Struct }

// DiffPair_TypeID is the unique identifier for the type DiffPair.
const DiffPair_TypeID = 0xf8551f83bb42e152

func NewDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func NewRootDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func ReadRootDiffPair(msg *capnp.Message) (DiffPair, error) {
	root, err := msg.RootPtr()
	return DiffPair{root.Struct()}, err
}

func (s DiffPair) String() string {
	str, _ := text.Marshal(0xf8551f83bb42e152, s.Struct)
	return str
}

func (s DiffPair) Src() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetSrc(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSrc sets the src field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewSrc() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DiffPair) Dst() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasDst() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetDst(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDst sets the dst field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewDst() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DiffPair_List is a list of DiffPair.
type DiffPair_List struct{ capnp.List }

// NewDiffPair creates a new list of DiffPair.
func NewDiffPair_List(s *capnp.Segment, sz int32) (DiffPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DiffPair_List{l}, err
}

func (s DiffPair_List) At(i int) DiffPair { return DiffPair{s.List.Struct(i)} }

func (s DiffPair_List) Set(i int, v DiffPair) error { return s.List.SetStruct(i, v.Struct) }

func (s DiffPair_List) String() string {
	str, _ := text.MarshalList(0xf8551f83bb42e152, s.List)
	return str
}

// DiffPair_Promise is a wrapper for a DiffPair promised by a client call.
type DiffPair_Promise struct{ *capnp.Pipeline }

func (p DiffPair_Promise) Struct() (DiffPair, error) {
	s, err := p.Pipeline.Struct()
	return DiffPair{s}, err
}

func (p DiffPair_Promise) Src() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DiffPair_Promise) Dst() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

// Difference between two commits
type Diff struct{ capnp.Struct }

// Diff_TypeID is the unique identifier for the type Diff.
const Diff_TypeID = 0xc9601ec89a6aa066

func NewDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func NewRootDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Diff{st}, err
}

func ReadRootDiff(msg *capnp.Message) (Diff, error) {
	root, err := msg.RootPtr()
	return Diff{root.Struct()}, err
}

func (s Diff) String() string {
	str, _ := text.Marshal(0xc9601ec89a6aa066, s.Struct)
	return str
}

func (s Diff) Added() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasAdded() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Diff) SetAdded(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAdded sets the added field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewAdded(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Diff) Removed() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasRemoved() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Diff) SetRemoved(v StatInfo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRemoved sets the removed field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewRemoved(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Diff) Ignored() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(2)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasIgnored() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Diff) SetIgnored(v StatInfo_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewIgnored sets the ignored field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewIgnored(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Diff) Missing() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(3)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasMissing() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Diff) SetMissing(v StatInfo_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMissing sets the missing field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewMissing(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Diff) Moved() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(4)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMoved() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Diff) SetMoved(v DiffPair_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMoved sets the moved field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMoved(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Diff) Merged() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(5)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMerged() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Diff) SetMerged(v DiffPair_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewMerged sets the merged field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMerged(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Diff) Conflict() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(6)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasConflict() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Diff) SetConflict(v DiffPair_List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewConflict sets the conflict field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewConflict(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

// Diff_List is a list of Diff.
type Diff_List struct{ capnp.List }

// NewDiff creates a new list of Diff.
func NewDiff_List(s *capnp.Segment, sz int32) (Diff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return Diff_List{l}, err
}

func (s Diff_List) At(i int) Diff { return Diff{s.List.Struct(i)} }

func (s Diff_List) Set(i int, v Diff) error { return s.List.SetStruct(i, v.Struct) }

func (s Diff_List) String() string {
	str, _ := text.MarshalList(0xc9601ec89a6aa066, s.List)
	return str
}

// Diff_Promise is a wrapper for a Diff promised by a client call.
type Diff_Promise struct{ *capnp.Pipeline }

func (p Diff_Promise) Struct() (Diff, error) {
	s, err := p.Pipeline.Struct()
	return Diff{s}, err
}

// A folder that a remote is allowed to access
type RemoteFolder struct{ capnp.Struct }

// RemoteFolder_TypeID is the unique identifier for the type RemoteFolder.
const RemoteFolder_TypeID = 0x8ed051e9369ac720

func NewRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RemoteFolder{st}, err
}

func NewRootRemoteFolder(s *capnp.Segment) (RemoteFolder, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RemoteFolder{st}, err
}

func ReadRootRemoteFolder(msg *capnp.Message) (RemoteFolder, error) {
	root, err := msg.RootPtr()
	return RemoteFolder{root.Struct()}, err
}

func (s RemoteFolder) String() string {
	str, _ := text.Marshal(0x8ed051e9369ac720, s.Struct)
	return str
}

func (s RemoteFolder) Folder() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RemoteFolder) HasFolder() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RemoteFolder) FolderBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RemoteFolder) SetFolder(v string) error {
	return s.Struct.SetText(0, v)
}

// RemoteFolder_List is a list of RemoteFolder.
type RemoteFolder_List struct{ capnp.List }

// NewRemoteFolder creates a new list of RemoteFolder.
func NewRemoteFolder_List(s *capnp.Segment, sz int32) (RemoteFolder_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RemoteFolder_List{l}, err
}

func (s RemoteFolder_List) At(i int) RemoteFolder { return RemoteFolder{s.List.Struct(i)} }

func (s RemoteFolder_List) Set(i int, v RemoteFolder) error { return s.List.SetStruct(i, v.Struct) }

func (s RemoteFolder_List) String() string {
	str, _ := text.MarshalList(0x8ed051e9369ac720, s.List)
	return str
}

// RemoteFolder_Promise is a wrapper for a RemoteFolder promised by a client call.
type RemoteFolder_Promise struct{ *capnp.Pipeline }

func (p RemoteFolder_Promise) Struct() (RemoteFolder, error) {
	s, err := p.Pipeline.Struct()
	return RemoteFolder{s}, err
}

// Info a remote peer we might sync with
type Remote struct{ capnp.Struct }

// Remote_TypeID is the unique identifier for the type Remote.
const Remote_TypeID = 0xbe71bb7b0ed4539a

func NewRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Remote{st}, err
}

func NewRootRemote(s *capnp.Segment) (Remote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Remote{st}, err
}

func ReadRootRemote(msg *capnp.Message) (Remote, error) {
	root, err := msg.RootPtr()
	return Remote{root.Struct()}, err
}

func (s Remote) String() string {
	str, _ := text.Marshal(0xbe71bb7b0ed4539a, s.Struct)
	return str
}

func (s Remote) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Remote) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Remote) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Remote) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Remote) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Remote) HasFingerprint() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Remote) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Remote) SetFingerprint(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Remote) Folders() (RemoteFolder_List, error) {
	p, err := s.Struct.Ptr(2)
	return RemoteFolder_List{List: p.List()}, err
}

func (s Remote) HasFolders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Remote) SetFolders(v RemoteFolder_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated RemoteFolder_List, preferring placement in s's segment.
func (s Remote) NewFolders(n int32) (RemoteFolder_List, error) {
	l, err := NewRemoteFolder_List(s.Struct.Segment(), n)
	if err != nil {
		return RemoteFolder_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Remote_List is a list of Remote.
type Remote_List struct{ capnp.List }

// NewRemote creates a new list of Remote.
func NewRemote_List(s *capnp.Segment, sz int32) (Remote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Remote_List{l}, err
}

func (s Remote_List) At(i int) Remote { return Remote{s.List.Struct(i)} }

func (s Remote_List) Set(i int, v Remote) error { return s.List.SetStruct(i, v.Struct) }

func (s Remote_List) String() string {
	str, _ := text.MarshalList(0xbe71bb7b0ed4539a, s.List)
	return str
}

// Remote_Promise is a wrapper for a Remote promised by a client call.
type Remote_Promise struct{ *capnp.Pipeline }

func (p Remote_Promise) Struct() (Remote, error) {
	s, err := p.Pipeline.Struct()
	return Remote{s}, err
}

type LocateResult struct{ capnp.Struct }

// LocateResult_TypeID is the unique identifier for the type LocateResult.
const LocateResult_TypeID = 0xd95473f6f8a89a69

func NewLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func NewRootLocateResult(s *capnp.Segment) (LocateResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LocateResult{st}, err
}

func ReadRootLocateResult(msg *capnp.Message) (LocateResult, error) {
	root, err := msg.RootPtr()
	return LocateResult{root.Struct()}, err
}

func (s LocateResult) String() string {
	str, _ := text.Marshal(0xd95473f6f8a89a69, s.Struct)
	return str
}

func (s LocateResult) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocateResult) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LocateResult) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocateResult) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocateResult) Addr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LocateResult) HasAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LocateResult) AddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LocateResult) SetAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LocateResult) Mask() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s LocateResult) HasMask() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LocateResult) MaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s LocateResult) SetMask(v string) error {
	return s.Struct.SetText(2, v)
}

func (s LocateResult) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s LocateResult) HasFingerprint() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s LocateResult) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s LocateResult) SetFingerprint(v string) error {
	return s.Struct.SetText(3, v)
}

// LocateResult_List is a list of LocateResult.
type LocateResult_List struct{ capnp.List }

// NewLocateResult creates a new list of LocateResult.
func NewLocateResult_List(s *capnp.Segment, sz int32) (LocateResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return LocateResult_List{l}, err
}

func (s LocateResult_List) At(i int) LocateResult { return LocateResult{s.List.Struct(i)} }

func (s LocateResult_List) Set(i int, v LocateResult) error { return s.List.SetStruct(i, v.Struct) }

func (s LocateResult_List) String() string {
	str, _ := text.MarshalList(0xd95473f6f8a89a69, s.List)
	return str
}

// LocateResult_Promise is a wrapper for a LocateResult promised by a client call.
type LocateResult_Promise struct{ *capnp.Pipeline }

func (p LocateResult_Promise) Struct() (LocateResult, error) {
	s, err := p.Pipeline.Struct()
	return LocateResult{s}, err
}

// Info about our current user state
type Identity struct{ capnp.Struct }

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xd49a2570fb5a4342

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Identity{st}, err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.RootPtr()
	return Identity{root.Struct()}, err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xd49a2570fb5a4342, s.Struct)
	return str
}

func (s Identity) CurrentUser() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Identity) HasCurrentUser() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Identity) CurrentUserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetCurrentUser(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Identity) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Identity) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Identity) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Identity) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Identity) HasFingerprint() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Identity) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetFingerprint(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Identity) IsOnline() bool {
	return s.Struct.Bit(0)
}

func (s Identity) SetIsOnline(v bool) {
	s.Struct.SetBit(0, v)
}

// Identity_List is a list of Identity.
type Identity_List struct{ capnp.List }

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Identity_List{l}, err
}

func (s Identity_List) At(i int) Identity { return Identity{s.List.Struct(i)} }

func (s Identity_List) Set(i int, v Identity) error { return s.List.SetStruct(i, v.Struct) }

func (s Identity_List) String() string {
	str, _ := text.MarshalList(0xd49a2570fb5a4342, s.List)
	return str
}

// Identity_Promise is a wrapper for a Identity promised by a client call.
type Identity_Promise struct{ *capnp.Pipeline }

func (p Identity_Promise) Struct() (Identity, error) {
	s, err := p.Pipeline.Struct()
	return Identity{s}, err
}

type MountOptions struct{ capnp.Struct }

// MountOptions_TypeID is the unique identifier for the type MountOptions.
const MountOptions_TypeID = 0xbc4d5c31427dc498

func NewMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MountOptions{st}, err
}

func NewRootMountOptions(s *capnp.Segment) (MountOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MountOptions{st}, err
}

func ReadRootMountOptions(msg *capnp.Message) (MountOptions, error) {
	root, err := msg.RootPtr()
	return MountOptions{root.Struct()}, err
}

func (s MountOptions) String() string {
	str, _ := text.Marshal(0xbc4d5c31427dc498, s.Struct)
	return str
}

func (s MountOptions) ReadOnly() bool {
	return s.Struct.Bit(0)
}

func (s MountOptions) SetReadOnly(v bool) {
	s.Struct.SetBit(0, v)
}

func (s MountOptions) RootPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MountOptions) HasRootPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MountOptions) RootPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MountOptions) SetRootPath(v string) error {
	return s.Struct.SetText(0, v)
}

// MountOptions_List is a list of MountOptions.
type MountOptions_List struct{ capnp.List }

// NewMountOptions creates a new list of MountOptions.
func NewMountOptions_List(s *capnp.Segment, sz int32) (MountOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MountOptions_List{l}, err
}

func (s MountOptions_List) At(i int) MountOptions { return MountOptions{s.List.Struct(i)} }

func (s MountOptions_List) Set(i int, v MountOptions) error { return s.List.SetStruct(i, v.Struct) }

func (s MountOptions_List) String() string {
	str, _ := text.MarshalList(0xbc4d5c31427dc498, s.List)
	return str
}

// MountOptions_Promise is a wrapper for a MountOptions promised by a client call.
type MountOptions_Promise struct{ *capnp.Pipeline }

func (p MountOptions_Promise) Struct() (MountOptions, error) {
	s, err := p.Pipeline.Struct()
	return MountOptions{s}, err
}

// net status of a peer
type PeerStatus struct{ capnp.Struct }

// PeerStatus_TypeID is the unique identifier for the type PeerStatus.
const PeerStatus_TypeID = 0x8167eafcc8695b1c

func NewPeerStatus(s *capnp.Segment) (PeerStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return PeerStatus{st}, err
}

func NewRootPeerStatus(s *capnp.Segment) (PeerStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return PeerStatus{st}, err
}

func ReadRootPeerStatus(msg *capnp.Message) (PeerStatus, error) {
	root, err := msg.RootPtr()
	return PeerStatus{root.Struct()}, err
}

func (s PeerStatus) String() string {
	str, _ := text.Marshal(0x8167eafcc8695b1c, s.Struct)
	return str
}

func (s PeerStatus) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PeerStatus) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PeerStatus) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PeerStatus) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PeerStatus) Fingerprint() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PeerStatus) HasFingerprint() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PeerStatus) FingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PeerStatus) SetFingerprint(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PeerStatus) LastSeen() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PeerStatus) HasLastSeen() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PeerStatus) LastSeenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PeerStatus) SetLastSeen(v string) error {
	return s.Struct.SetText(2, v)
}

func (s PeerStatus) RoundtripMs() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PeerStatus) SetRoundtripMs(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s PeerStatus) Error() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PeerStatus) HasError() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s PeerStatus) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PeerStatus) SetError(v string) error {
	return s.Struct.SetText(3, v)
}

// PeerStatus_List is a list of PeerStatus.
type PeerStatus_List struct{ capnp.List }

// NewPeerStatus creates a new list of PeerStatus.
func NewPeerStatus_List(s *capnp.Segment, sz int32) (PeerStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return PeerStatus_List{l}, err
}

func (s PeerStatus_List) At(i int) PeerStatus { return PeerStatus{s.List.Struct(i)} }

func (s PeerStatus_List) Set(i int, v PeerStatus) error { return s.List.SetStruct(i, v.Struct) }

func (s PeerStatus_List) String() string {
	str, _ := text.MarshalList(0x8167eafcc8695b1c, s.List)
	return str
}

// PeerStatus_Promise is a wrapper for a PeerStatus promised by a client call.
type PeerStatus_Promise struct{ *capnp.Pipeline }

func (p PeerStatus_Promise) Struct() (PeerStatus, error) {
	s, err := p.Pipeline.Struct()
	return PeerStatus{s}, err
}

// A single item that was killed by the gc
type GarbageItem struct{ capnp.Struct }

// GarbageItem_TypeID is the unique identifier for the type GarbageItem.
const GarbageItem_TypeID = 0xecb10f87fbe0d6c5

func NewGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func NewRootGarbageItem(s *capnp.Segment) (GarbageItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GarbageItem{st}, err
}

func ReadRootGarbageItem(msg *capnp.Message) (GarbageItem, error) {
	root, err := msg.RootPtr()
	return GarbageItem{root.Struct()}, err
}

func (s GarbageItem) String() string {
	str, _ := text.Marshal(0xecb10f87fbe0d6c5, s.Struct)
	return str
}

func (s GarbageItem) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GarbageItem) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GarbageItem) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GarbageItem) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GarbageItem) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s GarbageItem) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GarbageItem) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s GarbageItem) Owner() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GarbageItem) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GarbageItem) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GarbageItem) SetOwner(v string) error {
	return s.Struct.SetText(2, v)
}

// GarbageItem_List is a list of GarbageItem.
type GarbageItem_List struct{ capnp.List }

// NewGarbageItem creates a new list of GarbageItem.
func NewGarbageItem_List(s *capnp.Segment, sz int32) (GarbageItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return GarbageItem_List{l}, err
}

func (s GarbageItem_List) At(i int) GarbageItem { return GarbageItem{s.List.Struct(i)} }

func (s GarbageItem_List) Set(i int, v GarbageItem) error { return s.List.SetStruct(i, v.Struct) }

func (s GarbageItem_List) String() string {
	str, _ := text.MarshalList(0xecb10f87fbe0d6c5, s.List)
	return str
}

// GarbageItem_Promise is a wrapper for a GarbageItem promised by a client call.
type GarbageItem_Promise struct{ *capnp.Pipeline }

func (p GarbageItem_Promise) Struct() (GarbageItem, error) {
	s, err := p.Pipeline.Struct()
	return GarbageItem{s}, err
}

type Version struct{ capnp.Struct }

// Version_TypeID is the unique identifier for the type Version.
const Version_TypeID = 0xe1b522247fc407ad

func NewVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func NewRootVersion(s *capnp.Segment) (Version, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Version{st}, err
}

func ReadRootVersion(msg *capnp.Message) (Version, error) {
	root, err := msg.RootPtr()
	return Version{root.Struct()}, err
}

func (s Version) String() string {
	str, _ := text.Marshal(0xe1b522247fc407ad, s.Struct)
	return str
}

func (s Version) ServerVersion() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Version) HasServerVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Version) ServerVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Version) SetServerVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Version) ServerRev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Version) HasServerRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Version) ServerRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Version) SetServerRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Version) BackendVersion() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Version) HasBackendVersion() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Version) BackendVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Version) SetBackendVersion(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Version) BackendRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Version) HasBackendRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Version) BackendRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Version) SetBackendRev(v string) error {
	return s.Struct.SetText(3, v)
}

// Version_List is a list of Version.
type Version_List struct{ capnp.List }

// NewVersion creates a new list of Version.
func NewVersion_List(s *capnp.Segment, sz int32) (Version_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Version_List{l}, err
}

func (s Version_List) At(i int) Version { return Version{s.List.Struct(i)} }

func (s Version_List) Set(i int, v Version) error { return s.List.SetStruct(i, v.Struct) }

func (s Version_List) String() string {
	str, _ := text.MarshalList(0xe1b522247fc407ad, s.List)
	return str
}

// Version_Promise is a wrapper for a Version promised by a client call.
type Version_Promise struct{ *capnp.Pipeline }

func (p Version_Promise) Struct() (Version, error) {
	s, err := p.Pipeline.Struct()
	return Version{s}, err
}

type ExplicitPin struct{ capnp.Struct }

// ExplicitPin_TypeID is the unique identifier for the type ExplicitPin.
const ExplicitPin_TypeID = 0xdc876697979bc7e5

func NewExplicitPin(s *capnp.Segment) (ExplicitPin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExplicitPin{st}, err
}

func NewRootExplicitPin(s *capnp.Segment) (ExplicitPin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExplicitPin{st}, err
}

func ReadRootExplicitPin(msg *capnp.Message) (ExplicitPin, error) {
	root, err := msg.RootPtr()
	return ExplicitPin{root.Struct()}, err
}

func (s ExplicitPin) String() string {
	str, _ := text.Marshal(0xdc876697979bc7e5, s.Struct)
	return str
}

func (s ExplicitPin) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ExplicitPin) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ExplicitPin) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ExplicitPin) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ExplicitPin) Commit() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ExplicitPin) HasCommit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ExplicitPin) CommitBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ExplicitPin) SetCommit(v string) error {
	return s.Struct.SetText(1, v)
}

// ExplicitPin_List is a list of ExplicitPin.
type ExplicitPin_List struct{ capnp.List }

// NewExplicitPin creates a new list of ExplicitPin.
func NewExplicitPin_List(s *capnp.Segment, sz int32) (ExplicitPin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ExplicitPin_List{l}, err
}

func (s ExplicitPin_List) At(i int) ExplicitPin { return ExplicitPin{s.List.Struct(i)} }

func (s ExplicitPin_List) Set(i int, v ExplicitPin) error { return s.List.SetStruct(i, v.Struct) }

func (s ExplicitPin_List) String() string {
	str, _ := text.MarshalList(0xdc876697979bc7e5, s.List)
	return str
}

// ExplicitPin_Promise is a wrapper for a ExplicitPin promised by a client call.
type ExplicitPin_Promise struct{ *capnp.Pipeline }

func (p ExplicitPin_Promise) Struct() (ExplicitPin, error) {
	s, err := p.Pipeline.Struct()
	return ExplicitPin{s}, err
}

type FsTabEntry struct{ capnp.Struct }

// FsTabEntry_TypeID is the unique identifier for the type FsTabEntry.
const FsTabEntry_TypeID = 0xf7da25d3ead6c0d3

func NewFsTabEntry(s *capnp.Segment) (FsTabEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FsTabEntry{st}, err
}

func NewRootFsTabEntry(s *capnp.Segment) (FsTabEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FsTabEntry{st}, err
}

func ReadRootFsTabEntry(msg *capnp.Message) (FsTabEntry, error) {
	root, err := msg.RootPtr()
	return FsTabEntry{root.Struct()}, err
}

func (s FsTabEntry) String() string {
	str, _ := text.Marshal(0xf7da25d3ead6c0d3, s.Struct)
	return str
}

func (s FsTabEntry) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FsTabEntry) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FsTabEntry) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FsTabEntry) HasPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FsTabEntry) ReadOnly() bool {
	return s.Struct.Bit(0)
}

func (s FsTabEntry) SetReadOnly(v bool) {
	s.Struct.SetBit(0, v)
}

func (s FsTabEntry) Root() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s FsTabEntry) HasRoot() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FsTabEntry) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s FsTabEntry) SetRoot(v string) error {
	return s.Struct.SetText(2, v)
}

func (s FsTabEntry) Active() bool {
	return s.Struct.Bit(1)
}

func (s FsTabEntry) SetActive(v bool) {
	s.Struct.SetBit(1, v)
}

// FsTabEntry_List is a list of FsTabEntry.
type FsTabEntry_List struct{ capnp.List }

// NewFsTabEntry creates a new list of FsTabEntry.
func NewFsTabEntry_List(s *capnp.Segment, sz int32) (FsTabEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return FsTabEntry_List{l}, err
}

func (s FsTabEntry_List) At(i int) FsTabEntry { return FsTabEntry{s.List.Struct(i)} }

func (s FsTabEntry_List) Set(i int, v FsTabEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s FsTabEntry_List) String() string {
	str, _ := text.MarshalList(0xf7da25d3ead6c0d3, s.List)
	return str
}

// FsTabEntry_Promise is a wrapper for a FsTabEntry promised by a client call.
type FsTabEntry_Promise struct{ *capnp.Pipeline }

func (p FsTabEntry_Promise) Struct() (FsTabEntry, error) {
	s, err := p.Pipeline.Struct()
	return FsTabEntry{s}, err
}

type FS struct{ Client capnp.Client }

// FS_TypeID is the unique identifier for the type FS.
const FS_TypeID = 0xe2b3585db47cd4f9

func (c FS) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) ListExplicitPins(ctx context.Context, params func(FS_listExplicitPins_Params) error, opts ...capnp.CallOption) FS_listExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_listExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "listExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_listExplicitPins_Params{Struct: s}) }
	}
	return FS_listExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) ClearExplicitPins(ctx context.Context, params func(FS_clearExplicitPins_Params) error, opts ...capnp.CallOption) FS_clearExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_clearExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "clearExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_clearExplicitPins_Params{Struct: s}) }
	}
	return FS_clearExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) SetExplicitPins(ctx context.Context, params func(FS_setExplicitPins_Params) error, opts ...capnp.CallOption) FS_setExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_setExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "setExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_setExplicitPins_Params{Struct: s}) }
	}
	return FS_setExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type FS_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	ListExplicitPins(FS_listExplicitPins) error

	ClearExplicitPins(FS_clearExplicitPins) error

	SetExplicitPins(FS_setExplicitPins) error
}

func FS_ServerToClient(s FS_Server) FS {
	c, _ := s.(server.Closer)
	return FS{Client: server.New(FS_Methods(nil, s), c)}
}

func FS_Methods(methods []server.Method, s FS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 16)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "listExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_listExplicitPins{c, opts, FS_listExplicitPins_Params{Struct: p}, FS_listExplicitPins_Results{Struct: r}}
			return s.ListExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "clearExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_clearExplicitPins{c, opts, FS_clearExplicitPins_Params{Struct: p}, FS_clearExplicitPins_Results{Struct: r}}
			return s.ClearExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "setExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_setExplicitPins{c, opts, FS_setExplicitPins_Params{Struct: p}, FS_setExplicitPins_Results{Struct: r}}
			return s.SetExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// FS_stage holds the arguments for a server call to FS.stage.
type FS_stage struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stage_Params
	Results FS_stage_Results
}

// FS_list holds the arguments for a server call to FS.list.
type FS_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_list_Params
	Results FS_list_Results
}

// FS_cat holds the arguments for a server call to FS.cat.
type FS_cat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_cat_Params
	Results FS_cat_Results
}

// FS_mkdir holds the arguments for a server call to FS.mkdir.
type FS_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_mkdir_Params
	Results FS_mkdir_Results
}

// FS_remove holds the arguments for a server call to FS.remove.
type FS_remove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_remove_Params
	Results FS_remove_Results
}

// FS_move holds the arguments for a server call to FS.move.
type FS_move struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_move_Params
	Results FS_move_Results
}

// FS_copy holds the arguments for a server call to FS.copy.
type FS_copy struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_copy_Params
	Results FS_copy_Results
}

// FS_pin holds the arguments for a server call to FS.pin.
type FS_pin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_pin_Params
	Results FS_pin_Results
}

// FS_unpin holds the arguments for a server call to FS.unpin.
type FS_unpin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_unpin_Params
	Results FS_unpin_Results
}

// FS_stat holds the arguments for a server call to FS.stat.
type FS_stat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stat_Params
	Results FS_stat_Results
}

// FS_garbageCollect holds the arguments for a server call to FS.garbageCollect.
type FS_garbageCollect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_garbageCollect_Params
	Results FS_garbageCollect_Results
}

// FS_touch holds the arguments for a server call to FS.touch.
type FS_touch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_touch_Params
	Results FS_touch_Results
}

// FS_exists holds the arguments for a server call to FS.exists.
type FS_exists struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_exists_Params
	Results FS_exists_Results
}

// FS_listExplicitPins holds the arguments for a server call to FS.listExplicitPins.
type FS_listExplicitPins struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_listExplicitPins_Params
	Results FS_listExplicitPins_Results
}

// FS_clearExplicitPins holds the arguments for a server call to FS.clearExplicitPins.
type FS_clearExplicitPins struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_clearExplicitPins_Params
	Results FS_clearExplicitPins_Results
}

// FS_setExplicitPins holds the arguments for a server call to FS.setExplicitPins.
type FS_setExplicitPins struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_setExplicitPins_Params
	Results FS_setExplicitPins_Results
}

type FS_stage_Params struct{ capnp.Struct }

// FS_stage_Params_TypeID is the unique identifier for the type FS_stage_Params.
const FS_stage_Params_TypeID = 0x9ba7a818970a029c

func NewFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func NewRootFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func ReadRootFS_stage_Params(msg *capnp.Message) (FS_stage_Params, error) {
	root, err := msg.RootPtr()
	return FS_stage_Params{root.Struct()}, err
}

func (s FS_stage_Params) String() string {
	str, _ := text.Marshal(0x9ba7a818970a029c, s.Struct)
	return str
}

func (s FS_stage_Params) LocalPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stage_Params) HasLocalPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) LocalPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetLocalPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_stage_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_stage_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_stage_Params_List is a list of FS_stage_Params.
type FS_stage_Params_List struct{ capnp.List }

// NewFS_stage_Params creates a new list of FS_stage_Params.
func NewFS_stage_Params_List(s *capnp.Segment, sz int32) (FS_stage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_stage_Params_List{l}, err
}

func (s FS_stage_Params_List) At(i int) FS_stage_Params { return FS_stage_Params{s.List.Struct(i)} }

func (s FS_stage_Params_List) Set(i int, v FS_stage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Params_List) String() string {
	str, _ := text.MarshalList(0x9ba7a818970a029c, s.List)
	return str
}

// FS_stage_Params_Promise is a wrapper for a FS_stage_Params promised by a client call.
type FS_stage_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Params_Promise) Struct() (FS_stage_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Params{s}, err
}

type FS_stage_Results struct{ capnp.Struct }

// FS_stage_Results_TypeID is the unique identifier for the type FS_stage_Results.
const FS_stage_Results_TypeID = 0x884238694e8b8d88

func NewFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func NewRootFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func ReadRootFS_stage_Results(msg *capnp.Message) (FS_stage_Results, error) {
	root, err := msg.RootPtr()
	return FS_stage_Results{root.Struct()}, err
}

func (s FS_stage_Results) String() string {
	str, _ := text.Marshal(0x884238694e8b8d88, s.Struct)
	return str
}

// FS_stage_Results_List is a list of FS_stage_Results.
type FS_stage_Results_List struct{ capnp.List }

// NewFS_stage_Results creates a new list of FS_stage_Results.
func NewFS_stage_Results_List(s *capnp.Segment, sz int32) (FS_stage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_stage_Results_List{l}, err
}

func (s FS_stage_Results_List) At(i int) FS_stage_Results { return FS_stage_Results{s.List.Struct(i)} }

func (s FS_stage_Results_List) Set(i int, v FS_stage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Results_List) String() string {
	str, _ := text.MarshalList(0x884238694e8b8d88, s.List)
	return str
}

// FS_stage_Results_Promise is a wrapper for a FS_stage_Results promised by a client call.
type FS_stage_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Results_Promise) Struct() (FS_stage_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Results{s}, err
}

type FS_list_Params struct{ capnp.Struct }

// FS_list_Params_TypeID is the unique identifier for the type FS_list_Params.
const FS_list_Params_TypeID = 0xfd86771dd5950237

func NewFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func NewRootFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func ReadRootFS_list_Params(msg *capnp.Message) (FS_list_Params, error) {
	root, err := msg.RootPtr()
	return FS_list_Params{root.Struct()}, err
}

func (s FS_list_Params) String() string {
	str, _ := text.Marshal(0xfd86771dd5950237, s.Struct)
	return str
}

func (s FS_list_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_list_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_list_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_list_Params) MaxDepth() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_list_Params) SetMaxDepth(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_list_Params_List is a list of FS_list_Params.
type FS_list_Params_List struct{ capnp.List }

// NewFS_list_Params creates a new list of FS_list_Params.
func NewFS_list_Params_List(s *capnp.Segment, sz int32) (FS_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_list_Params_List{l}, err
}

func (s FS_list_Params_List) At(i int) FS_list_Params { return FS_list_Params{s.List.Struct(i)} }

func (s FS_list_Params_List) Set(i int, v FS_list_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_list_Params_List) String() string {
	str, _ := text.MarshalList(0xfd86771dd5950237, s.List)
	return str
}

// FS_list_Params_Promise is a wrapper for a FS_list_Params promised by a client call.
type FS_list_Params_Promise struct{ *capnp.Pipeline }

func (p FS_list_Params_Promise) Struct() (FS_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Params{s}, err
}

type FS_list_Results struct{ capnp.Struct }

// FS_list_Results_TypeID is the unique identifier for the type FS_list_Results.
const FS_list_Results_TypeID = 0xe92935bf20cc2856

func NewFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func NewRootFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func ReadRootFS_list_Results(msg *capnp.Message) (FS_list_Results, error) {
	root, err := msg.RootPtr()
	return FS_list_Results{root.Struct()}, err
}

func (s FS_list_Results) String() string {
	str, _ := text.Marshal(0xe92935bf20cc2856, s.Struct)
	return str
}

func (s FS_list_Results) Entries() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_list_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Results) SetEntries(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_list_Results) NewEntries(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_list_Results_List is a list of FS_list_Results.
type FS_list_Results_List struct{ capnp.List }

// NewFS_list_Results creates a new list of FS_list_Results.
func NewFS_list_Results_List(s *capnp.Segment, sz int32) (FS_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_list_Results_List{l}, err
}

func (s FS_list_Results_List) At(i int) FS_list_Results { return FS_list_Results{s.List.Struct(i)} }

func (s FS_list_Results_List) Set(i int, v FS_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_list_Results_List) String() string {
	str, _ := text.MarshalList(0xe92935bf20cc2856, s.List)
	return str
}

// FS_list_Results_Promise is a wrapper for a FS_list_Results promised by a client call.
type FS_list_Results_Promise struct{ *capnp.Pipeline }

func (p FS_list_Results_Promise) Struct() (FS_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Results{s}, err
}

type FS_cat_Params struct{ capnp.Struct }

// FS_cat_Params_TypeID is the unique identifier for the type FS_cat_Params.
const FS_cat_Params_TypeID = 0xa9095b4cff1e5634

func NewFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func NewRootFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func ReadRootFS_cat_Params(msg *capnp.Message) (FS_cat_Params, error) {
	root, err := msg.RootPtr()
	return FS_cat_Params{root.Struct()}, err
}

func (s FS_cat_Params) String() string {
	str, _ := text.Marshal(0xa9095b4cff1e5634, s.Struct)
	return str
}

func (s FS_cat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Params_List is a list of FS_cat_Params.
type FS_cat_Params_List struct{ capnp.List }

// NewFS_cat_Params creates a new list of FS_cat_Params.
func NewFS_cat_Params_List(s *capnp.Segment, sz int32) (FS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Params_List{l}, err
}

func (s FS_cat_Params_List) At(i int) FS_cat_Params { return FS_cat_Params{s.List.Struct(i)} }

func (s FS_cat_Params_List) Set(i int, v FS_cat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Params_List) String() string {
	str, _ := text.MarshalList(0xa9095b4cff1e5634, s.List)
	return str
}

// FS_cat_Params_Promise is a wrapper for a FS_cat_Params promised by a client call.
type FS_cat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Params_Promise) Struct() (FS_cat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Params{s}, err
}

type FS_cat_Results struct{ capnp.Struct }

// FS_cat_Results_TypeID is the unique identifier for the type FS_cat_Results.
const FS_cat_Results_TypeID = 0x9fe8d2cd92c27a38

func NewFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func NewRootFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func ReadRootFS_cat_Results(msg *capnp.Message) (FS_cat_Results, error) {
	root, err := msg.RootPtr()
	return FS_cat_Results{root.Struct()}, err
}

func (s FS_cat_Results) String() string {
	str, _ := text.Marshal(0x9fe8d2cd92c27a38, s.Struct)
	return str
}

func (s FS_cat_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_cat_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_cat_Results_List is a list of FS_cat_Results.
type FS_cat_Results_List struct{ capnp.List }

// NewFS_cat_Results creates a new list of FS_cat_Results.
func NewFS_cat_Results_List(s *capnp.Segment, sz int32) (FS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_cat_Results_List{l}, err
}

func (s FS_cat_Results_List) At(i int) FS_cat_Results { return FS_cat_Results{s.List.Struct(i)} }

func (s FS_cat_Results_List) Set(i int, v FS_cat_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Results_List) String() string {
	str, _ := text.MarshalList(0x9fe8d2cd92c27a38, s.List)
	return str
}

// FS_cat_Results_Promise is a wrapper for a FS_cat_Results promised by a client call.
type FS_cat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Results_Promise) Struct() (FS_cat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Results{s}, err
}

type FS_mkdir_Params struct{ capnp.Struct }

// FS_mkdir_Params_TypeID is the unique identifier for the type FS_mkdir_Params.
const FS_mkdir_Params_TypeID = 0xb030fc18cb3b0e61

func NewFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func NewRootFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func ReadRootFS_mkdir_Params(msg *capnp.Message) (FS_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Params{root.Struct()}, err
}

func (s FS_mkdir_Params) String() string {
	str, _ := text.Marshal(0xb030fc18cb3b0e61, s.Struct)
	return str
}

func (s FS_mkdir_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_mkdir_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_mkdir_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_mkdir_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_mkdir_Params) CreateParents() bool {
	return s.Struct.Bit(0)
}

func (s FS_mkdir_Params) SetCreateParents(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_mkdir_Params_List is a list of FS_mkdir_Params.
type FS_mkdir_Params_List struct{ capnp.List }

// NewFS_mkdir_Params creates a new list of FS_mkdir_Params.
func NewFS_mkdir_Params_List(s *capnp.Segment, sz int32) (FS_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_mkdir_Params_List{l}, err
}

func (s FS_mkdir_Params_List) At(i int) FS_mkdir_Params { return FS_mkdir_Params{s.List.Struct(i)} }

func (s FS_mkdir_Params_List) Set(i int, v FS_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xb030fc18cb3b0e61, s.List)
	return str
}

// FS_mkdir_Params_Promise is a wrapper for a FS_mkdir_Params promised by a client call.
type FS_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Params_Promise) Struct() (FS_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Params{s}, err
}

type FS_mkdir_Results struct{ capnp.Struct }

// FS_mkdir_Results_TypeID is the unique identifier for the type FS_mkdir_Results.
const FS_mkdir_Results_TypeID = 0xf3243256580294f3

func NewFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func NewRootFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func ReadRootFS_mkdir_Results(msg *capnp.Message) (FS_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Results{root.Struct()}, err
}

func (s FS_mkdir_Results) String() string {
	str, _ := text.Marshal(0xf3243256580294f3, s.Struct)
	return str
}

// FS_mkdir_Results_List is a list of FS_mkdir_Results.
type FS_mkdir_Results_List struct{ capnp.List }

// NewFS_mkdir_Results creates a new list of FS_mkdir_Results.
func NewFS_mkdir_Results_List(s *capnp.Segment, sz int32) (FS_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_mkdir_Results_List{l}, err
}

func (s FS_mkdir_Results_List) At(i int) FS_mkdir_Results { return FS_mkdir_Results{s.List.Struct(i)} }

func (s FS_mkdir_Results_List) Set(i int, v FS_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xf3243256580294f3, s.List)
	return str
}

// FS_mkdir_Results_Promise is a wrapper for a FS_mkdir_Results promised by a client call.
type FS_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Results_Promise) Struct() (FS_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Results{s}, err
}

type FS_remove_Params struct{ capnp.Struct }

// FS_remove_Params_TypeID is the unique identifier for the type FS_remove_Params.
const FS_remove_Params_TypeID = 0xa99c622e110c1203

func NewFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func NewRootFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func ReadRootFS_remove_Params(msg *capnp.Message) (FS_remove_Params, error) {
	root, err := msg.RootPtr()
	return FS_remove_Params{root.Struct()}, err
}

func (s FS_remove_Params) String() string {
	str, _ := text.Marshal(0xa99c622e110c1203, s.Struct)
	return str
}

func (s FS_remove_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_remove_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_remove_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_remove_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_remove_Params_List is a list of FS_remove_Params.
type FS_remove_Params_List struct{ capnp.List }

// NewFS_remove_Params creates a new list of FS_remove_Params.
func NewFS_remove_Params_List(s *capnp.Segment, sz int32) (FS_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_remove_Params_List{l}, err
}

func (s FS_remove_Params_List) At(i int) FS_remove_Params { return FS_remove_Params{s.List.Struct(i)} }

func (s FS_remove_Params_List) Set(i int, v FS_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xa99c622e110c1203, s.List)
	return str
}

// FS_remove_Params_Promise is a wrapper for a FS_remove_Params promised by a client call.
type FS_remove_Params_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Params_Promise) Struct() (FS_remove_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Params{s}, err
}

type FS_remove_Results struct{ capnp.Struct }

// FS_remove_Results_TypeID is the unique identifier for the type FS_remove_Results.
const FS_remove_Results_TypeID = 0xc9b3a8263f6853d7

func NewFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func NewRootFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func ReadRootFS_remove_Results(msg *capnp.Message) (FS_remove_Results, error) {
	root, err := msg.RootPtr()
	return FS_remove_Results{root.Struct()}, err
}

func (s FS_remove_Results) String() string {
	str, _ := text.Marshal(0xc9b3a8263f6853d7, s.Struct)
	return str
}

// FS_remove_Results_List is a list of FS_remove_Results.
type FS_remove_Results_List struct{ capnp.List }

// NewFS_remove_Results creates a new list of FS_remove_Results.
func NewFS_remove_Results_List(s *capnp.Segment, sz int32) (FS_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_remove_Results_List{l}, err
}

func (s FS_remove_Results_List) At(i int) FS_remove_Results {
	return FS_remove_Results{s.List.Struct(i)}
}

func (s FS_remove_Results_List) Set(i int, v FS_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xc9b3a8263f6853d7, s.List)
	return str
}

// FS_remove_Results_Promise is a wrapper for a FS_remove_Results promised by a client call.
type FS_remove_Results_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Results_Promise) Struct() (FS_remove_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Results{s}, err
}

type FS_move_Params struct{ capnp.Struct }

// FS_move_Params_TypeID is the unique identifier for the type FS_move_Params.
const FS_move_Params_TypeID = 0xb76f3dc1dcf4fdf1

func NewFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func NewRootFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func ReadRootFS_move_Params(msg *capnp.Message) (FS_move_Params, error) {
	root, err := msg.RootPtr()
	return FS_move_Params{root.Struct()}, err
}

func (s FS_move_Params) String() string {
	str, _ := text.Marshal(0xb76f3dc1dcf4fdf1, s.Struct)
	return str
}

func (s FS_move_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_move_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_move_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_move_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_move_Params_List is a list of FS_move_Params.
type FS_move_Params_List struct{ capnp.List }

// NewFS_move_Params creates a new list of FS_move_Params.
func NewFS_move_Params_List(s *capnp.Segment, sz int32) (FS_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_move_Params_List{l}, err
}

func (s FS_move_Params_List) At(i int) FS_move_Params { return FS_move_Params{s.List.Struct(i)} }

func (s FS_move_Params_List) Set(i int, v FS_move_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_move_Params_List) String() string {
	str, _ := text.MarshalList(0xb76f3dc1dcf4fdf1, s.List)
	return str
}

// FS_move_Params_Promise is a wrapper for a FS_move_Params promised by a client call.
type FS_move_Params_Promise struct{ *capnp.Pipeline }

func (p FS_move_Params_Promise) Struct() (FS_move_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Params{s}, err
}

type FS_move_Results struct{ capnp.Struct }

// FS_move_Results_TypeID is the unique identifier for the type FS_move_Results.
const FS_move_Results_TypeID = 0xab89c6fc9bf26f2a

func NewFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func NewRootFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func ReadRootFS_move_Results(msg *capnp.Message) (FS_move_Results, error) {
	root, err := msg.RootPtr()
	return FS_move_Results{root.Struct()}, err
}

func (s FS_move_Results) String() string {
	str, _ := text.Marshal(0xab89c6fc9bf26f2a, s.Struct)
	return str
}

// FS_move_Results_List is a list of FS_move_Results.
type FS_move_Results_List struct{ capnp.List }

// NewFS_move_Results creates a new list of FS_move_Results.
func NewFS_move_Results_List(s *capnp.Segment, sz int32) (FS_move_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_move_Results_List{l}, err
}

func (s FS_move_Results_List) At(i int) FS_move_Results { return FS_move_Results{s.List.Struct(i)} }

func (s FS_move_Results_List) Set(i int, v FS_move_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_move_Results_List) String() string {
	str, _ := text.MarshalList(0xab89c6fc9bf26f2a, s.List)
	return str
}

// FS_move_Results_Promise is a wrapper for a FS_move_Results promised by a client call.
type FS_move_Results_Promise struct{ *capnp.Pipeline }

func (p FS_move_Results_Promise) Struct() (FS_move_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Results{s}, err
}

type FS_copy_Params struct{ capnp.Struct }

// FS_copy_Params_TypeID is the unique identifier for the type FS_copy_Params.
const FS_copy_Params_TypeID = 0xc0dd66dedad92ef8

func NewFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func NewRootFS_copy_Params(s *capnp.Segment) (FS_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_copy_Params{st}, err
}

func ReadRootFS_copy_Params(msg *capnp.Message) (FS_copy_Params, error) {
	root, err := msg.RootPtr()
	return FS_copy_Params{root.Struct()}, err
}

func (s FS_copy_Params) String() string {
	str, _ := text.Marshal(0xc0dd66dedad92ef8, s.Struct)
	return str
}

func (s FS_copy_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_copy_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_copy_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_copy_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_copy_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_copy_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_copy_Params_List is a list of FS_copy_Params.
type FS_copy_Params_List struct{ capnp.List }

// NewFS_copy_Params creates a new list of FS_copy_Params.
func NewFS_copy_Params_List(s *capnp.Segment, sz int32) (FS_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_copy_Params_List{l}, err
}

func (s FS_copy_Params_List) At(i int) FS_copy_Params { return FS_copy_Params{s.List.Struct(i)} }

func (s FS_copy_Params_List) Set(i int, v FS_copy_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_copy_Params_List) String() string {
	str, _ := text.MarshalList(0xc0dd66dedad92ef8, s.List)
	return str
}

// FS_copy_Params_Promise is a wrapper for a FS_copy_Params promised by a client call.
type FS_copy_Params_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Params_Promise) Struct() (FS_copy_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Params{s}, err
}

type FS_copy_Results struct{ capnp.Struct }

// FS_copy_Results_TypeID is the unique identifier for the type FS_copy_Results.
const FS_copy_Results_TypeID = 0xccf4f28c8951edf6

func NewFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func NewRootFS_copy_Results(s *capnp.Segment) (FS_copy_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_copy_Results{st}, err
}

func ReadRootFS_copy_Results(msg *capnp.Message) (FS_copy_Results, error) {
	root, err := msg.RootPtr()
	return FS_copy_Results{root.Struct()}, err
}

func (s FS_copy_Results) String() string {
	str, _ := text.Marshal(0xccf4f28c8951edf6, s.Struct)
	return str
}

// FS_copy_Results_List is a list of FS_copy_Results.
type FS_copy_Results_List struct{ capnp.List }

// NewFS_copy_Results creates a new list of FS_copy_Results.
func NewFS_copy_Results_List(s *capnp.Segment, sz int32) (FS_copy_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_copy_Results_List{l}, err
}

func (s FS_copy_Results_List) At(i int) FS_copy_Results { return FS_copy_Results{s.List.Struct(i)} }

func (s FS_copy_Results_List) Set(i int, v FS_copy_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_copy_Results_List) String() string {
	str, _ := text.MarshalList(0xccf4f28c8951edf6, s.List)
	return str
}

// FS_copy_Results_Promise is a wrapper for a FS_copy_Results promised by a client call.
type FS_copy_Results_Promise struct{ *capnp.Pipeline }

func (p FS_copy_Results_Promise) Struct() (FS_copy_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_copy_Results{s}, err
}

type FS_pin_Params struct{ capnp.Struct }

// FS_pin_Params_TypeID is the unique identifier for the type FS_pin_Params.
const FS_pin_Params_TypeID = 0x9efc974402f016f6

func NewFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func NewRootFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func ReadRootFS_pin_Params(msg *capnp.Message) (FS_pin_Params, error) {
	root, err := msg.RootPtr()
	return FS_pin_Params{root.Struct()}, err
}

func (s FS_pin_Params) String() string {
	str, _ := text.Marshal(0x9efc974402f016f6, s.Struct)
	return str
}

func (s FS_pin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_pin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_pin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_pin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_pin_Params_List is a list of FS_pin_Params.
type FS_pin_Params_List struct{ capnp.List }

// NewFS_pin_Params creates a new list of FS_pin_Params.
func NewFS_pin_Params_List(s *capnp.Segment, sz int32) (FS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_pin_Params_List{l}, err
}

func (s FS_pin_Params_List) At(i int) FS_pin_Params { return FS_pin_Params{s.List.Struct(i)} }

func (s FS_pin_Params_List) Set(i int, v FS_pin_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Params_List) String() string {
	str, _ := text.MarshalList(0x9efc974402f016f6, s.List)
	return str
}

// FS_pin_Params_Promise is a wrapper for a FS_pin_Params promised by a client call.
type FS_pin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Params_Promise) Struct() (FS_pin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Params{s}, err
}

type FS_pin_Results struct{ capnp.Struct }

// FS_pin_Results_TypeID is the unique identifier for the type FS_pin_Results.
const FS_pin_Results_TypeID = 0xdba8e30445acc3f4

func NewFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func NewRootFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func ReadRootFS_pin_Results(msg *capnp.Message) (FS_pin_Results, error) {
	root, err := msg.RootPtr()
	return FS_pin_Results{root.Struct()}, err
}

func (s FS_pin_Results) String() string {
	str, _ := text.Marshal(0xdba8e30445acc3f4, s.Struct)
	return str
}

// FS_pin_Results_List is a list of FS_pin_Results.
type FS_pin_Results_List struct{ capnp.List }

// NewFS_pin_Results creates a new list of FS_pin_Results.
func NewFS_pin_Results_List(s *capnp.Segment, sz int32) (FS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_pin_Results_List{l}, err
}

func (s FS_pin_Results_List) At(i int) FS_pin_Results { return FS_pin_Results{s.List.Struct(i)} }

func (s FS_pin_Results_List) Set(i int, v FS_pin_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Results_List) String() string {
	str, _ := text.MarshalList(0xdba8e30445acc3f4, s.List)
	return str
}

// FS_pin_Results_Promise is a wrapper for a FS_pin_Results promised by a client call.
type FS_pin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Results_Promise) Struct() (FS_pin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Results{s}, err
}

type FS_unpin_Params struct{ capnp.Struct }

// FS_unpin_Params_TypeID is the unique identifier for the type FS_unpin_Params.
const FS_unpin_Params_TypeID = 0xc9558eac26b0f15e

func NewFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func NewRootFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func ReadRootFS_unpin_Params(msg *capnp.Message) (FS_unpin_Params, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Params{root.Struct()}, err
}

func (s FS_unpin_Params) String() string {
	str, _ := text.Marshal(0xc9558eac26b0f15e, s.Struct)
	return str
}

func (s FS_unpin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_unpin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_unpin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_unpin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_unpin_Params_List is a list of FS_unpin_Params.
type FS_unpin_Params_List struct{ capnp.List }

// NewFS_unpin_Params creates a new list of FS_unpin_Params.
func NewFS_unpin_Params_List(s *capnp.Segment, sz int32) (FS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_unpin_Params_List{l}, err
}

func (s FS_unpin_Params_List) At(i int) FS_unpin_Params { return FS_unpin_Params{s.List.Struct(i)} }

func (s FS_unpin_Params_List) Set(i int, v FS_unpin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Params_List) String() string {
	str, _ := text.MarshalList(0xc9558eac26b0f15e, s.List)
	return str
}

// FS_unpin_Params_Promise is a wrapper for a FS_unpin_Params promised by a client call.
type FS_unpin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Params_Promise) Struct() (FS_unpin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Params{s}, err
}

type FS_unpin_Results struct{ capnp.Struct }

// FS_unpin_Results_TypeID is the unique identifier for the type FS_unpin_Results.
const FS_unpin_Results_TypeID = 0x87c49e302c6516f8

func NewFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func NewRootFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func ReadRootFS_unpin_Results(msg *capnp.Message) (FS_unpin_Results, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Results{root.Struct()}, err
}

func (s FS_unpin_Results) String() string {
	str, _ := text.Marshal(0x87c49e302c6516f8, s.Struct)
	return str
}

// FS_unpin_Results_List is a list of FS_unpin_Results.
type FS_unpin_Results_List struct{ capnp.List }

// NewFS_unpin_Results creates a new list of FS_unpin_Results.
func NewFS_unpin_Results_List(s *capnp.Segment, sz int32) (FS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_unpin_Results_List{l}, err
}

func (s FS_unpin_Results_List) At(i int) FS_unpin_Results { return FS_unpin_Results{s.List.Struct(i)} }

func (s FS_unpin_Results_List) Set(i int, v FS_unpin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Results_List) String() string {
	str, _ := text.MarshalList(0x87c49e302c6516f8, s.List)
	return str
}

// FS_unpin_Results_Promise is a wrapper for a FS_unpin_Results promised by a client call.
type FS_unpin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Results_Promise) Struct() (FS_unpin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Results{s}, err
}

type FS_stat_Params struct{ capnp.Struct }

// FS_stat_Params_TypeID is the unique identifier for the type FS_stat_Params.
const FS_stat_Params_TypeID = 0xd78724f6fbd5c5c5

func NewFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func NewRootFS_stat_Params(s *capnp.Segment) (FS_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Params{st}, err
}

func ReadRootFS_stat_Params(msg *capnp.Message) (FS_stat_Params, error) {
	root, err := msg.RootPtr()
	return FS_stat_Params{root.Struct()}, err
}

func (s FS_stat_Params) String() string {
	str, _ := text.Marshal(0xd78724f6fbd5c5c5, s.Struct)
	return str
}

func (s FS_stat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_stat_Params_List is a list of FS_stat_Params.
type FS_stat_Params_List struct{ capnp.List }

// NewFS_stat_Params creates a new list of FS_stat_Params.
func NewFS_stat_Params_List(s *capnp.Segment, sz int32) (FS_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Params_List{l}, err
}

func (s FS_stat_Params_List) At(i int) FS_stat_Params { return FS_stat_Params{s.List.Struct(i)} }

func (s FS_stat_Params_List) Set(i int, v FS_stat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_stat_Params_List) String() string {
	str, _ := text.MarshalList(0xd78724f6fbd5c5c5, s.List)
	return str
}

// FS_stat_Params_Promise is a wrapper for a FS_stat_Params promised by a client call.
type FS_stat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Params_Promise) Struct() (FS_stat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Params{s}, err
}

type FS_stat_Results struct{ capnp.Struct }

// FS_stat_Results_TypeID is the unique identifier for the type FS_stat_Results.
const FS_stat_Results_TypeID = 0xbdb679ec96303b53

func NewFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func NewRootFS_stat_Results(s *capnp.Segment) (FS_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_stat_Results{st}, err
}

func ReadRootFS_stat_Results(msg *capnp.Message) (FS_stat_Results, error) {
	root, err := msg.RootPtr()
	return FS_stat_Results{root.Struct()}, err
}

func (s FS_stat_Results) String() string {
	str, _ := text.Marshal(0xbdb679ec96303b53, s.Struct)
	return str
}

func (s FS_stat_Results) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s FS_stat_Results) HasInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stat_Results) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s FS_stat_Results) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FS_stat_Results_List is a list of FS_stat_Results.
type FS_stat_Results_List struct{ capnp.List }

// NewFS_stat_Results creates a new list of FS_stat_Results.
func NewFS_stat_Results_List(s *capnp.Segment, sz int32) (FS_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_stat_Results_List{l}, err
}

func (s FS_stat_Results_List) At(i int) FS_stat_Results { return FS_stat_Results{s.List.Struct(i)} }

func (s FS_stat_Results_List) Set(i int, v FS_stat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stat_Results_List) String() string {
	str, _ := text.MarshalList(0xbdb679ec96303b53, s.List)
	return str
}

// FS_stat_Results_Promise is a wrapper for a FS_stat_Results promised by a client call.
type FS_stat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stat_Results_Promise) Struct() (FS_stat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stat_Results{s}, err
}

func (p FS_stat_Results_Promise) Info() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FS_garbageCollect_Params struct{ capnp.Struct }

// FS_garbageCollect_Params_TypeID is the unique identifier for the type FS_garbageCollect_Params.
const FS_garbageCollect_Params_TypeID = 0x9cb31f0ede4f5117

func NewFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func NewRootFS_garbageCollect_Params(s *capnp.Segment) (FS_garbageCollect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_garbageCollect_Params{st}, err
}

func ReadRootFS_garbageCollect_Params(msg *capnp.Message) (FS_garbageCollect_Params, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Params{root.Struct()}, err
}

func (s FS_garbageCollect_Params) String() string {
	str, _ := text.Marshal(0x9cb31f0ede4f5117, s.Struct)
	return str
}

func (s FS_garbageCollect_Params) Aggressive() bool {
	return s.Struct.Bit(0)
}

func (s FS_garbageCollect_Params) SetAggressive(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_garbageCollect_Params_List is a list of FS_garbageCollect_Params.
type FS_garbageCollect_Params_List struct{ capnp.List }

// NewFS_garbageCollect_Params creates a new list of FS_garbageCollect_Params.
func NewFS_garbageCollect_Params_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_garbageCollect_Params_List{l}, err
}

func (s FS_garbageCollect_Params_List) At(i int) FS_garbageCollect_Params {
	return FS_garbageCollect_Params{s.List.Struct(i)}
}

func (s FS_garbageCollect_Params_List) Set(i int, v FS_garbageCollect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Params_List) String() string {
	str, _ := text.MarshalList(0x9cb31f0ede4f5117, s.List)
	return str
}

// FS_garbageCollect_Params_Promise is a wrapper for a FS_garbageCollect_Params promised by a client call.
type FS_garbageCollect_Params_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Params_Promise) Struct() (FS_garbageCollect_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Params{s}, err
}

type FS_garbageCollect_Results struct{ capnp.Struct }

// FS_garbageCollect_Results_TypeID is the unique identifier for the type FS_garbageCollect_Results.
const FS_garbageCollect_Results_TypeID = 0xbb5ea9a03dfddab3

func NewFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func NewRootFS_garbageCollect_Results(s *capnp.Segment) (FS_garbageCollect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_garbageCollect_Results{st}, err
}

func ReadRootFS_garbageCollect_Results(msg *capnp.Message) (FS_garbageCollect_Results, error) {
	root, err := msg.RootPtr()
	return FS_garbageCollect_Results{root.Struct()}, err
}

func (s FS_garbageCollect_Results) String() string {
	str, _ := text.Marshal(0xbb5ea9a03dfddab3, s.Struct)
	return str
}

func (s FS_garbageCollect_Results) Freed() (GarbageItem_List, error) {
	p, err := s.Struct.Ptr(0)
	return GarbageItem_List{List: p.List()}, err
}

func (s FS_garbageCollect_Results) HasFreed() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_garbageCollect_Results) SetFreed(v GarbageItem_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFreed sets the freed field to a newly
// allocated GarbageItem_List, preferring placement in s's segment.
func (s FS_garbageCollect_Results) NewFreed(n int32) (GarbageItem_List, error) {
	l, err := NewGarbageItem_List(s.Struct.Segment(), n)
	if err != nil {
		return GarbageItem_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_garbageCollect_Results_List is a list of FS_garbageCollect_Results.
type FS_garbageCollect_Results_List struct{ capnp.List }

// NewFS_garbageCollect_Results creates a new list of FS_garbageCollect_Results.
func NewFS_garbageCollect_Results_List(s *capnp.Segment, sz int32) (FS_garbageCollect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_garbageCollect_Results_List{l}, err
}

func (s FS_garbageCollect_Results_List) At(i int) FS_garbageCollect_Results {
	return FS_garbageCollect_Results{s.List.Struct(i)}
}

func (s FS_garbageCollect_Results_List) Set(i int, v FS_garbageCollect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_garbageCollect_Results_List) String() string {
	str, _ := text.MarshalList(0xbb5ea9a03dfddab3, s.List)
	return str
}

// FS_garbageCollect_Results_Promise is a wrapper for a FS_garbageCollect_Results promised by a client call.
type FS_garbageCollect_Results_Promise struct{ *capnp.Pipeline }

func (p FS_garbageCollect_Results_Promise) Struct() (FS_garbageCollect_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_garbageCollect_Results{s}, err
}

type FS_touch_Params struct{ capnp.Struct }

// FS_touch_Params_TypeID is the unique identifier for the type FS_touch_Params.
const FS_touch_Params_TypeID = 0xab1e48e58e4c69af

func NewFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func NewRootFS_touch_Params(s *capnp.Segment) (FS_touch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_touch_Params{st}, err
}

func ReadRootFS_touch_Params(msg *capnp.Message) (FS_touch_Params, error) {
	root, err := msg.RootPtr()
	return FS_touch_Params{root.Struct()}, err
}

func (s FS_touch_Params) String() string {
	str, _ := text.Marshal(0xab1e48e58e4c69af, s.Struct)
	return str
}

func (s FS_touch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_touch_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_touch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_touch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_touch_Params_List is a list of FS_touch_Params.
type FS_touch_Params_List struct{ capnp.List }

// NewFS_touch_Params creates a new list of FS_touch_Params.
func NewFS_touch_Params_List(s *capnp.Segment, sz int32) (FS_touch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_touch_Params_List{l}, err
}

func (s FS_touch_Params_List) At(i int) FS_touch_Params { return FS_touch_Params{s.List.Struct(i)} }

func (s FS_touch_Params_List) Set(i int, v FS_touch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Params_List) String() string {
	str, _ := text.MarshalList(0xab1e48e58e4c69af, s.List)
	return str
}

// FS_touch_Params_Promise is a wrapper for a FS_touch_Params promised by a client call.
type FS_touch_Params_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Params_Promise) Struct() (FS_touch_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Params{s}, err
}

type FS_touch_Results struct{ capnp.Struct }

// FS_touch_Results_TypeID is the unique identifier for the type FS_touch_Results.
const FS_touch_Results_TypeID = 0xbf1cf3d6e654e947

func NewFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func NewRootFS_touch_Results(s *capnp.Segment) (FS_touch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_touch_Results{st}, err
}

func ReadRootFS_touch_Results(msg *capnp.Message) (FS_touch_Results, error) {
	root, err := msg.RootPtr()
	return FS_touch_Results{root.Struct()}, err
}

func (s FS_touch_Results) String() string {
	str, _ := text.Marshal(0xbf1cf3d6e654e947, s.Struct)
	return str
}

// FS_touch_Results_List is a list of FS_touch_Results.
type FS_touch_Results_List struct{ capnp.List }

// NewFS_touch_Results creates a new list of FS_touch_Results.
func NewFS_touch_Results_List(s *capnp.Segment, sz int32) (FS_touch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_touch_Results_List{l}, err
}

func (s FS_touch_Results_List) At(i int) FS_touch_Results { return FS_touch_Results{s.List.Struct(i)} }

func (s FS_touch_Results_List) Set(i int, v FS_touch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_touch_Results_List) String() string {
	str, _ := text.MarshalList(0xbf1cf3d6e654e947, s.List)
	return str
}

// FS_touch_Results_Promise is a wrapper for a FS_touch_Results promised by a client call.
type FS_touch_Results_Promise struct{ *capnp.Pipeline }

func (p FS_touch_Results_Promise) Struct() (FS_touch_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_touch_Results{s}, err
}

type FS_exists_Params struct{ capnp.Struct }

// FS_exists_Params_TypeID is the unique identifier for the type FS_exists_Params.
const FS_exists_Params_TypeID = 0xdb27e243a580d2f0

func NewFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func NewRootFS_exists_Params(s *capnp.Segment) (FS_exists_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_exists_Params{st}, err
}

func ReadRootFS_exists_Params(msg *capnp.Message) (FS_exists_Params, error) {
	root, err := msg.RootPtr()
	return FS_exists_Params{root.Struct()}, err
}

func (s FS_exists_Params) String() string {
	str, _ := text.Marshal(0xdb27e243a580d2f0, s.Struct)
	return str
}

func (s FS_exists_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_exists_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_exists_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_exists_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_exists_Params_List is a list of FS_exists_Params.
type FS_exists_Params_List struct{ capnp.List }

// NewFS_exists_Params creates a new list of FS_exists_Params.
func NewFS_exists_Params_List(s *capnp.Segment, sz int32) (FS_exists_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_exists_Params_List{l}, err
}

func (s FS_exists_Params_List) At(i int) FS_exists_Params { return FS_exists_Params{s.List.Struct(i)} }

func (s FS_exists_Params_List) Set(i int, v FS_exists_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Params_List) String() string {
	str, _ := text.MarshalList(0xdb27e243a580d2f0, s.List)
	return str
}

// FS_exists_Params_Promise is a wrapper for a FS_exists_Params promised by a client call.
type FS_exists_Params_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Params_Promise) Struct() (FS_exists_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Params{s}, err
}

type FS_exists_Results struct{ capnp.Struct }

// FS_exists_Results_TypeID is the unique identifier for the type FS_exists_Results.
const FS_exists_Results_TypeID = 0xa5753d28ca12d2ba

func NewFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func NewRootFS_exists_Results(s *capnp.Segment) (FS_exists_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_exists_Results{st}, err
}

func ReadRootFS_exists_Results(msg *capnp.Message) (FS_exists_Results, error) {
	root, err := msg.RootPtr()
	return FS_exists_Results{root.Struct()}, err
}

func (s FS_exists_Results) String() string {
	str, _ := text.Marshal(0xa5753d28ca12d2ba, s.Struct)
	return str
}

func (s FS_exists_Results) Exists() bool {
	return s.Struct.Bit(0)
}

func (s FS_exists_Results) SetExists(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_exists_Results_List is a list of FS_exists_Results.
type FS_exists_Results_List struct{ capnp.List }

// NewFS_exists_Results creates a new list of FS_exists_Results.
func NewFS_exists_Results_List(s *capnp.Segment, sz int32) (FS_exists_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_exists_Results_List{l}, err
}

func (s FS_exists_Results_List) At(i int) FS_exists_Results {
	return FS_exists_Results{s.List.Struct(i)}
}

func (s FS_exists_Results_List) Set(i int, v FS_exists_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_exists_Results_List) String() string {
	str, _ := text.MarshalList(0xa5753d28ca12d2ba, s.List)
	return str
}

// FS_exists_Results_Promise is a wrapper for a FS_exists_Results promised by a client call.
type FS_exists_Results_Promise struct{ *capnp.Pipeline }

func (p FS_exists_Results_Promise) Struct() (FS_exists_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_exists_Results{s}, err
}

type FS_listExplicitPins_Params struct{ capnp.Struct }

// FS_listExplicitPins_Params_TypeID is the unique identifier for the type FS_listExplicitPins_Params.
const FS_listExplicitPins_Params_TypeID = 0x958ea6b33d4e8cbb

func NewFS_listExplicitPins_Params(s *capnp.Segment) (FS_listExplicitPins_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_listExplicitPins_Params{st}, err
}

func NewRootFS_listExplicitPins_Params(s *capnp.Segment) (FS_listExplicitPins_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_listExplicitPins_Params{st}, err
}

func ReadRootFS_listExplicitPins_Params(msg *capnp.Message) (FS_listExplicitPins_Params, error) {
	root, err := msg.RootPtr()
	return FS_listExplicitPins_Params{root.Struct()}, err
}

func (s FS_listExplicitPins_Params) String() string {
	str, _ := text.Marshal(0x958ea6b33d4e8cbb, s.Struct)
	return str
}

func (s FS_listExplicitPins_Params) Prefix() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_listExplicitPins_Params) HasPrefix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_listExplicitPins_Params) PrefixBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_listExplicitPins_Params) SetPrefix(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_listExplicitPins_Params) From() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_listExplicitPins_Params) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_listExplicitPins_Params) FromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_listExplicitPins_Params) SetFrom(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FS_listExplicitPins_Params) To() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s FS_listExplicitPins_Params) HasTo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FS_listExplicitPins_Params) ToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s FS_listExplicitPins_Params) SetTo(v string) error {
	return s.Struct.SetText(2, v)
}

// FS_listExplicitPins_Params_List is a list of FS_listExplicitPins_Params.
type FS_listExplicitPins_Params_List struct{ capnp.List }

// NewFS_listExplicitPins_Params creates a new list of FS_listExplicitPins_Params.
func NewFS_listExplicitPins_Params_List(s *capnp.Segment, sz int32) (FS_listExplicitPins_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return FS_listExplicitPins_Params_List{l}, err
}

func (s FS_listExplicitPins_Params_List) At(i int) FS_listExplicitPins_Params {
	return FS_listExplicitPins_Params{s.List.Struct(i)}
}

func (s FS_listExplicitPins_Params_List) Set(i int, v FS_listExplicitPins_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_listExplicitPins_Params_List) String() string {
	str, _ := text.MarshalList(0x958ea6b33d4e8cbb, s.List)
	return str
}

// FS_listExplicitPins_Params_Promise is a wrapper for a FS_listExplicitPins_Params promised by a client call.
type FS_listExplicitPins_Params_Promise struct{ *capnp.Pipeline }

func (p FS_listExplicitPins_Params_Promise) Struct() (FS_listExplicitPins_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_listExplicitPins_Params{s}, err
}

type FS_listExplicitPins_Results struct{ capnp.Struct }

// FS_listExplicitPins_Results_TypeID is the unique identifier for the type FS_listExplicitPins_Results.
const FS_listExplicitPins_Results_TypeID = 0x809d4e73dc197b11

func NewFS_listExplicitPins_Results(s *capnp.Segment) (FS_listExplicitPins_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_listExplicitPins_Results{st}, err
}

func NewRootFS_listExplicitPins_Results(s *capnp.Segment) (FS_listExplicitPins_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_listExplicitPins_Results{st}, err
}

func ReadRootFS_listExplicitPins_Results(msg *capnp.Message) (FS_listExplicitPins_Results, error) {
	root, err := msg.RootPtr()
	return FS_listExplicitPins_Results{root.Struct()}, err
}

func (s FS_listExplicitPins_Results) String() string {
	str, _ := text.Marshal(0x809d4e73dc197b11, s.Struct)
	return str
}

func (s FS_listExplicitPins_Results) Pins() (ExplicitPin_List, error) {
	p, err := s.Struct.Ptr(0)
	return ExplicitPin_List{List: p.List()}, err
}

func (s FS_listExplicitPins_Results) HasPins() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_listExplicitPins_Results) SetPins(v ExplicitPin_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPins sets the pins field to a newly
// allocated ExplicitPin_List, preferring placement in s's segment.
func (s FS_listExplicitPins_Results) NewPins(n int32) (ExplicitPin_List, error) {
	l, err := NewExplicitPin_List(s.Struct.Segment(), n)
	if err != nil {
		return ExplicitPin_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_listExplicitPins_Results_List is a list of FS_listExplicitPins_Results.
type FS_listExplicitPins_Results_List struct{ capnp.List }

// NewFS_listExplicitPins_Results creates a new list of FS_listExplicitPins_Results.
func NewFS_listExplicitPins_Results_List(s *capnp.Segment, sz int32) (FS_listExplicitPins_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_listExplicitPins_Results_List{l}, err
}

func (s FS_listExplicitPins_Results_List) At(i int) FS_listExplicitPins_Results {
	return FS_listExplicitPins_Results{s.List.Struct(i)}
}

func (s FS_listExplicitPins_Results_List) Set(i int, v FS_listExplicitPins_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_listExplicitPins_Results_List) String() string {
	str, _ := text.MarshalList(0x809d4e73dc197b11, s.List)
	return str
}

// FS_listExplicitPins_Results_Promise is a wrapper for a FS_listExplicitPins_Results promised by a client call.
type FS_listExplicitPins_Results_Promise struct{ *capnp.Pipeline }

func (p FS_listExplicitPins_Results_Promise) Struct() (FS_listExplicitPins_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_listExplicitPins_Results{s}, err
}

type FS_clearExplicitPins_Params struct{ capnp.Struct }

// FS_clearExplicitPins_Params_TypeID is the unique identifier for the type FS_clearExplicitPins_Params.
const FS_clearExplicitPins_Params_TypeID = 0xa17d6c20c2174ec8

func NewFS_clearExplicitPins_Params(s *capnp.Segment) (FS_clearExplicitPins_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_clearExplicitPins_Params{st}, err
}

func NewRootFS_clearExplicitPins_Params(s *capnp.Segment) (FS_clearExplicitPins_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_clearExplicitPins_Params{st}, err
}

func ReadRootFS_clearExplicitPins_Params(msg *capnp.Message) (FS_clearExplicitPins_Params, error) {
	root, err := msg.RootPtr()
	return FS_clearExplicitPins_Params{root.Struct()}, err
}

func (s FS_clearExplicitPins_Params) String() string {
	str, _ := text.Marshal(0xa17d6c20c2174ec8, s.Struct)
	return str
}

func (s FS_clearExplicitPins_Params) Prefix() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_clearExplicitPins_Params) HasPrefix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_clearExplicitPins_Params) PrefixBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_clearExplicitPins_Params) SetPrefix(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_clearExplicitPins_Params) From() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_clearExplicitPins_Params) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_clearExplicitPins_Params) FromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_clearExplicitPins_Params) SetFrom(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FS_clearExplicitPins_Params) To() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s FS_clearExplicitPins_Params) HasTo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FS_clearExplicitPins_Params) ToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s FS_clearExplicitPins_Params) SetTo(v string) error {
	return s.Struct.SetText(2, v)
}

// FS_clearExplicitPins_Params_List is a list of FS_clearExplicitPins_Params.
type FS_clearExplicitPins_Params_List struct{ capnp.List }

// NewFS_clearExplicitPins_Params creates a new list of FS_clearExplicitPins_Params.
func NewFS_clearExplicitPins_Params_List(s *capnp.Segment, sz int32) (FS_clearExplicitPins_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return FS_clearExplicitPins_Params_List{l}, err
}

func (s FS_clearExplicitPins_Params_List) At(i int) FS_clearExplicitPins_Params {
	return FS_clearExplicitPins_Params{s.List.Struct(i)}
}

func (s FS_clearExplicitPins_Params_List) Set(i int, v FS_clearExplicitPins_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_clearExplicitPins_Params_List) String() string {
	str, _ := text.MarshalList(0xa17d6c20c2174ec8, s.List)
	return str
}

// FS_clearExplicitPins_Params_Promise is a wrapper for a FS_clearExplicitPins_Params promised by a client call.
type FS_clearExplicitPins_Params_Promise struct{ *capnp.Pipeline }

func (p FS_clearExplicitPins_Params_Promise) Struct() (FS_clearExplicitPins_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_clearExplicitPins_Params{s}, err
}

type FS_clearExplicitPins_Results struct{ capnp.Struct }

// FS_clearExplicitPins_Results_TypeID is the unique identifier for the type FS_clearExplicitPins_Results.
const FS_clearExplicitPins_Results_TypeID = 0xa78946d2af827622

func NewFS_clearExplicitPins_Results(s *capnp.Segment) (FS_clearExplicitPins_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_clearExplicitPins_Results{st}, err
}

func NewRootFS_clearExplicitPins_Results(s *capnp.Segment) (FS_clearExplicitPins_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_clearExplicitPins_Results{st}, err
}

func ReadRootFS_clearExplicitPins_Results(msg *capnp.Message) (FS_clearExplicitPins_Results, error) {
	root, err := msg.RootPtr()
	return FS_clearExplicitPins_Results{root.Struct()}, err
}

func (s FS_clearExplicitPins_Results) String() string {
	str, _ := text.Marshal(0xa78946d2af827622, s.Struct)
	return str
}

func (s FS_clearExplicitPins_Results) Count() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_clearExplicitPins_Results) SetCount(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_clearExplicitPins_Results_List is a list of FS_clearExplicitPins_Results.
type FS_clearExplicitPins_Results_List struct{ capnp.List }

// NewFS_clearExplicitPins_Results creates a new list of FS_clearExplicitPins_Results.
func NewFS_clearExplicitPins_Results_List(s *capnp.Segment, sz int32) (FS_clearExplicitPins_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_clearExplicitPins_Results_List{l}, err
}

func (s FS_clearExplicitPins_Results_List) At(i int) FS_clearExplicitPins_Results {
	return FS_clearExplicitPins_Results{s.List.Struct(i)}
}

func (s FS_clearExplicitPins_Results_List) Set(i int, v FS_clearExplicitPins_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_clearExplicitPins_Results_List) String() string {
	str, _ := text.MarshalList(0xa78946d2af827622, s.List)
	return str
}

// FS_clearExplicitPins_Results_Promise is a wrapper for a FS_clearExplicitPins_Results promised by a client call.
type FS_clearExplicitPins_Results_Promise struct{ *capnp.Pipeline }

func (p FS_clearExplicitPins_Results_Promise) Struct() (FS_clearExplicitPins_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_clearExplicitPins_Results{s}, err
}

type FS_setExplicitPins_Params struct{ capnp.Struct }

// FS_setExplicitPins_Params_TypeID is the unique identifier for the type FS_setExplicitPins_Params.
const FS_setExplicitPins_Params_TypeID = 0x946963af664858d0

func NewFS_setExplicitPins_Params(s *capnp.Segment) (FS_setExplicitPins_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_setExplicitPins_Params{st}, err
}

func NewRootFS_setExplicitPins_Params(s *capnp.Segment) (FS_setExplicitPins_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return FS_setExplicitPins_Params{st}, err
}

func ReadRootFS_setExplicitPins_Params(msg *capnp.Message) (FS_setExplicitPins_Params, error) {
	root, err := msg.RootPtr()
	return FS_setExplicitPins_Params{root.Struct()}, err
}

func (s FS_setExplicitPins_Params) String() string {
	str, _ := text.Marshal(0x946963af664858d0, s.Struct)
	return str
}

func (s FS_setExplicitPins_Params) Prefix() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_setExplicitPins_Params) HasPrefix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_setExplicitPins_Params) PrefixBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_setExplicitPins_Params) SetPrefix(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_setExplicitPins_Params) From() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_setExplicitPins_Params) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_setExplicitPins_Params) FromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_setExplicitPins_Params) SetFrom(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FS_setExplicitPins_Params) To() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s FS_setExplicitPins_Params) HasTo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FS_setExplicitPins_Params) ToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s FS_setExplicitPins_Params) SetTo(v string) error {
	return s.Struct.SetText(2, v)
}

// FS_setExplicitPins_Params_List is a list of FS_setExplicitPins_Params.
type FS_setExplicitPins_Params_List struct{ capnp.List }

// NewFS_setExplicitPins_Params creates a new list of FS_setExplicitPins_Params.
func NewFS_setExplicitPins_Params_List(s *capnp.Segment, sz int32) (FS_setExplicitPins_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return FS_setExplicitPins_Params_List{l}, err
}

func (s FS_setExplicitPins_Params_List) At(i int) FS_setExplicitPins_Params {
	return FS_setExplicitPins_Params{s.List.Struct(i)}
}

func (s FS_setExplicitPins_Params_List) Set(i int, v FS_setExplicitPins_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_setExplicitPins_Params_List) String() string {
	str, _ := text.MarshalList(0x946963af664858d0, s.List)
	return str
}

// FS_setExplicitPins_Params_Promise is a wrapper for a FS_setExplicitPins_Params promised by a client call.
type FS_setExplicitPins_Params_Promise struct{ *capnp.Pipeline }

func (p FS_setExplicitPins_Params_Promise) Struct() (FS_setExplicitPins_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_setExplicitPins_Params{s}, err
}

type FS_setExplicitPins_Results struct{ capnp.Struct }

// FS_setExplicitPins_Results_TypeID is the unique identifier for the type FS_setExplicitPins_Results.
const FS_setExplicitPins_Results_TypeID = 0x95a8b7d1ed942672

func NewFS_setExplicitPins_Results(s *capnp.Segment) (FS_setExplicitPins_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_setExplicitPins_Results{st}, err
}

func NewRootFS_setExplicitPins_Results(s *capnp.Segment) (FS_setExplicitPins_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_setExplicitPins_Results{st}, err
}

func ReadRootFS_setExplicitPins_Results(msg *capnp.Message) (FS_setExplicitPins_Results, error) {
	root, err := msg.RootPtr()
	return FS_setExplicitPins_Results{root.Struct()}, err
}

func (s FS_setExplicitPins_Results) String() string {
	str, _ := text.Marshal(0x95a8b7d1ed942672, s.Struct)
	return str
}

func (s FS_setExplicitPins_Results) Count() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_setExplicitPins_Results) SetCount(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_setExplicitPins_Results_List is a list of FS_setExplicitPins_Results.
type FS_setExplicitPins_Results_List struct{ capnp.List }

// NewFS_setExplicitPins_Results creates a new list of FS_setExplicitPins_Results.
func NewFS_setExplicitPins_Results_List(s *capnp.Segment, sz int32) (FS_setExplicitPins_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_setExplicitPins_Results_List{l}, err
}

func (s FS_setExplicitPins_Results_List) At(i int) FS_setExplicitPins_Results {
	return FS_setExplicitPins_Results{s.List.Struct(i)}
}

func (s FS_setExplicitPins_Results_List) Set(i int, v FS_setExplicitPins_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_setExplicitPins_Results_List) String() string {
	str, _ := text.MarshalList(0x95a8b7d1ed942672, s.List)
	return str
}

// FS_setExplicitPins_Results_Promise is a wrapper for a FS_setExplicitPins_Results promised by a client call.
type FS_setExplicitPins_Results_Promise struct{ *capnp.Pipeline }

func (p FS_setExplicitPins_Results_Promise) Struct() (FS_setExplicitPins_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_setExplicitPins_Results{s}, err
}

type VCS struct{ Client capnp.Client }

// VCS_TypeID is the unique identifier for the type VCS.
const VCS_TypeID = 0xfaa680ef12c44624

func (c VCS) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) CommitInfo(ctx context.Context, params func(VCS_commitInfo_Params) error, opts ...capnp.CallOption) VCS_commitInfo_Results_Promise {
	if c.Client == nil {
		return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commitInfo_Params{Struct: s}) }
	}
	return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type VCS_Server interface {
	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error

	CommitInfo(VCS_commitInfo) error
}

func VCS_ServerToClient(s VCS_Server) VCS {
	c, _ := s.(server.Closer)
	return VCS{Client: server.New(VCS_Methods(nil, s), c)}
}

func VCS_Methods(methods []server.Method, s VCS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 10)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commitInfo{c, opts, VCS_commitInfo_Params{Struct: p}, VCS_commitInfo_Results{Struct: r}}
			return s.CommitInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 1},
	})

	return methods
}

// VCS_log holds the arguments for a server call to VCS.log.
type VCS_log struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_log_Params
	Results VCS_log_Results
}

// VCS_commit holds the arguments for a server call to VCS.commit.
type VCS_commit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commit_Params
	Results VCS_commit_Results
}

// VCS_tag holds the arguments for a server call to VCS.tag.
type VCS_tag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_tag_Params
	Results VCS_tag_Results
}

// VCS_untag holds the arguments for a server call to VCS.untag.
type VCS_untag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_untag_Params
	Results VCS_untag_Results
}

// VCS_reset holds the arguments for a server call to VCS.reset.
type VCS_reset struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_reset_Params
	Results VCS_reset_Results
}

// VCS_history holds the arguments for a server call to VCS.history.
type VCS_history struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_history_Params
	Results VCS_history_Results
}

// VCS_makeDiff holds the arguments for a server call to VCS.makeDiff.
type VCS_makeDiff struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_makeDiff_Params
	Results VCS_makeDiff_Results
}

// VCS_sync holds the arguments for a server call to VCS.sync.
type VCS_sync struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_sync_Params
	Results VCS_sync_Results
}

// VCS_fetch holds the arguments for a server call to VCS.fetch.
type VCS_fetch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_fetch_Params
	Results VCS_fetch_Results
}

// VCS_commitInfo holds the arguments for a server call to VCS.commitInfo.
type VCS_commitInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commitInfo_Params
	Results VCS_commitInfo_Results
}

type VCS_log_Params struct{ capnp.Struct }

// VCS_log_Params_TypeID is the unique identifier for the type VCS_log_Params.
const VCS_log_Params_TypeID = 0xa4efd353c57d2b85

func NewVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func NewRootVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func ReadRootVCS_log_Params(msg *capnp.Message) (VCS_log_Params, error) {
	root, err := msg.RootPtr()
	return VCS_log_Params{root.Struct()}, err
}

func (s VCS_log_Params) String() string {
	str, _ := text.Marshal(0xa4efd353c57d2b85, s.Struct)
	return str
}

// VCS_log_Params_List is a list of VCS_log_Params.
type VCS_log_Params_List struct{ capnp.List }

// NewVCS_log_Params creates a new list of VCS_log_Params.
func NewVCS_log_Params_List(s *capnp.Segment, sz int32) (VCS_log_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_log_Params_List{l}, err
}

func (s VCS_log_Params_List) At(i int) VCS_log_Params { return VCS_log_Params{s.List.Struct(i)} }

func (s VCS_log_Params_List) Set(i int, v VCS_log_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_log_Params_List) String() string {
	str, _ := text.MarshalList(0xa4efd353c57d2b85, s.List)
	return str
}

// VCS_log_Params_Promise is a wrapper for a VCS_log_Params promised by a client call.
type VCS_log_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Params_Promise) Struct() (VCS_log_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Params{s}, err
}

type VCS_log_Results struct{ capnp.Struct }

// VCS_log_Results_TypeID is the unique identifier for the type VCS_log_Results.
const VCS_log_Results_TypeID = 0xf7250939585a23f6

func NewVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func NewRootVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func ReadRootVCS_log_Results(msg *capnp.Message) (VCS_log_Results, error) {
	root, err := msg.RootPtr()
	return VCS_log_Results{root.Struct()}, err
}

func (s VCS_log_Results) String() string {
	str, _ := text.Marshal(0xf7250939585a23f6, s.Struct)
	return str
}

func (s VCS_log_Results) Entries() (Commit_List, error) {
	p, err := s.Struct.Ptr(0)
	return Commit_List{List: p.List()}, err
}

func (s VCS_log_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_log_Results) SetEntries(v Commit_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Commit_List, preferring placement in s's segment.
func (s VCS_log_Results) NewEntries(n int32) (Commit_List, error) {
	l, err := NewCommit_List(s.Struct.Segment(), n)
	if err != nil {
		return Commit_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_log_Results_List is a list of VCS_log_Results.
type VCS_log_Results_List struct{ capnp.List }

// NewVCS_log_Results creates a new list of VCS_log_Results.
func NewVCS_log_Results_List(s *capnp.Segment, sz int32) (VCS_log_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_log_Results_List{l}, err
}

func (s VCS_log_Results_List) At(i int) VCS_log_Results { return VCS_log_Results{s.List.Struct(i)} }

func (s VCS_log_Results_List) Set(i int, v VCS_log_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_log_Results_List) String() string {
	str, _ := text.MarshalList(0xf7250939585a23f6, s.List)
	return str
}

// VCS_log_Results_Promise is a wrapper for a VCS_log_Results promised by a client call.
type VCS_log_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Results_Promise) Struct() (VCS_log_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Results{s}, err
}

type VCS_commit_Params struct{ capnp.Struct }

// VCS_commit_Params_TypeID is the unique identifier for the type VCS_commit_Params.
const VCS_commit_Params_TypeID = 0xd9459f2361338d96

func NewVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func NewRootVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func ReadRootVCS_commit_Params(msg *capnp.Message) (VCS_commit_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Params{root.Struct()}, err
}

func (s VCS_commit_Params) String() string {
	str, _ := text.Marshal(0xd9459f2361338d96, s.Struct)
	return str
}

func (s VCS_commit_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commit_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commit_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commit_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commit_Params_List is a list of VCS_commit_Params.
type VCS_commit_Params_List struct{ capnp.List }

// NewVCS_commit_Params creates a new list of VCS_commit_Params.
func NewVCS_commit_Params_List(s *capnp.Segment, sz int32) (VCS_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commit_Params_List{l}, err
}

func (s VCS_commit_Params_List) At(i int) VCS_commit_Params {
	return VCS_commit_Params{s.List.Struct(i)}
}

func (s VCS_commit_Params_List) Set(i int, v VCS_commit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Params_List) String() string {
	str, _ := text.MarshalList(0xd9459f2361338d96, s.List)
	return str
}

// VCS_commit_Params_Promise is a wrapper for a VCS_commit_Params promised by a client call.
type VCS_commit_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Params_Promise) Struct() (VCS_commit_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Params{s}, err
}

type VCS_commit_Results struct{ capnp.Struct }

// VCS_commit_Results_TypeID is the unique identifier for the type VCS_commit_Results.
const VCS_commit_Results_TypeID = 0xb7d0dd6b467e7539

func NewVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func NewRootVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func ReadRootVCS_commit_Results(msg *capnp.Message) (VCS_commit_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Results{root.Struct()}, err
}

func (s VCS_commit_Results) String() string {
	str, _ := text.Marshal(0xb7d0dd6b467e7539, s.Struct)
	return str
}

// VCS_commit_Results_List is a list of VCS_commit_Results.
type VCS_commit_Results_List struct{ capnp.List }

// NewVCS_commit_Results creates a new list of VCS_commit_Results.
func NewVCS_commit_Results_List(s *capnp.Segment, sz int32) (VCS_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_commit_Results_List{l}, err
}

func (s VCS_commit_Results_List) At(i int) VCS_commit_Results {
	return VCS_commit_Results{s.List.Struct(i)}
}

func (s VCS_commit_Results_List) Set(i int, v VCS_commit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Results_List) String() string {
	str, _ := text.MarshalList(0xb7d0dd6b467e7539, s.List)
	return str
}

// VCS_commit_Results_Promise is a wrapper for a VCS_commit_Results promised by a client call.
type VCS_commit_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Results_Promise) Struct() (VCS_commit_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Results{s}, err
}

type VCS_tag_Params struct{ capnp.Struct }

// VCS_tag_Params_TypeID is the unique identifier for the type VCS_tag_Params.
const VCS_tag_Params_TypeID = 0xa97d67096ee7d46d

func NewVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func NewRootVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func ReadRootVCS_tag_Params(msg *capnp.Message) (VCS_tag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Params{root.Struct()}, err
}

func (s VCS_tag_Params) String() string {
	str, _ := text.Marshal(0xa97d67096ee7d46d, s.Struct)
	return str
}

func (s VCS_tag_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_tag_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_tag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_tag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetTagName(v string) error {
	return s.Struct.SetText(1, v)
}

// VCS_tag_Params_List is a list of VCS_tag_Params.
type VCS_tag_Params_List struct{ capnp.List }

// NewVCS_tag_Params creates a new list of VCS_tag_Params.
func NewVCS_tag_Params_List(s *capnp.Segment, sz int32) (VCS_tag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VCS_tag_Params_List{l}, err
}

func (s VCS_tag_Params_List) At(i int) VCS_tag_Params { return VCS_tag_Params{s.List.Struct(i)} }

func (s VCS_tag_Params_List) Set(i int, v VCS_tag_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_tag_Params_List) String() string {
	str, _ := text.MarshalList(0xa97d67096ee7d46d, s.List)
	return str
}

// VCS_tag_Params_Promise is a wrapper for a VCS_tag_Params promised by a client call.
type VCS_tag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Params_Promise) Struct() (VCS_tag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Params{s}, err
}

type VCS_tag_Results struct{ capnp.Struct }

// VCS_tag_Results_TypeID is the unique identifier for the type VCS_tag_Results.
const VCS_tag_Results_TypeID = 0xbda949777c149f4b

func NewVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func NewRootVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func ReadRootVCS_tag_Results(msg *capnp.Message) (VCS_tag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Results{root.Struct()}, err
}

func (s VCS_tag_Results) String() string {
	str, _ := text.Marshal(0xbda949777c149f4b, s.Struct)
	return str
}

// VCS_tag_Results_List is a list of VCS_tag_Results.
type VCS_tag_Results_List struct{ capnp.List }

// NewVCS_tag_Results creates a new list of VCS_tag_Results.
func NewVCS_tag_Results_List(s *capnp.Segment, sz int32) (VCS_tag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_tag_Results_List{l}, err
}

func (s VCS_tag_Results_List) At(i int) VCS_tag_Results { return VCS_tag_Results{s.List.Struct(i)} }

func (s VCS_tag_Results_List) Set(i int, v VCS_tag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_tag_Results_List) String() string {
	str, _ := text.MarshalList(0xbda949777c149f4b, s.List)
	return str
}

// VCS_tag_Results_Promise is a wrapper for a VCS_tag_Results promised by a client call.
type VCS_tag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Results_Promise) Struct() (VCS_tag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Results{s}, err
}

type VCS_untag_Params struct{ capnp.Struct }

// VCS_untag_Params_TypeID is the unique identifier for the type VCS_untag_Params.
const VCS_untag_Params_TypeID = 0xf4d42db113af3a4b

func NewVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func NewRootVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func ReadRootVCS_untag_Params(msg *capnp.Message) (VCS_untag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Params{root.Struct()}, err
}

func (s VCS_untag_Params) String() string {
	str, _ := text.Marshal(0xf4d42db113af3a4b, s.Struct)
	return str
}

func (s VCS_untag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_untag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_untag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_untag_Params) SetTagName(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_untag_Params_List is a list of VCS_untag_Params.
type VCS_untag_Params_List struct{ capnp.List }

// NewVCS_untag_Params creates a new list of VCS_untag_Params.
func NewVCS_untag_Params_List(s *capnp.Segment, sz int32) (VCS_untag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_untag_Params_List{l}, err
}

func (s VCS_untag_Params_List) At(i int) VCS_untag_Params { return VCS_untag_Params{s.List.Struct(i)} }

func (s VCS_untag_Params_List) Set(i int, v VCS_untag_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Params_List) String() string {
	str, _ := text.MarshalList(0xf4d42db113af3a4b, s.List)
	return str
}

// VCS_untag_Params_Promise is a wrapper for a VCS_untag_Params promised by a client call.
type VCS_untag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Params_Promise) Struct() (VCS_untag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Params{s}, err
}

type VCS_untag_Results struct{ capnp.Struct }

// VCS_untag_Results_TypeID is the unique identifier for the type VCS_untag_Results.
const VCS_untag_Results_TypeID = 0xba0de490234c27af

func NewVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func NewRootVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func ReadRootVCS_untag_Results(msg *capnp.Message) (VCS_untag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Results{root.Struct()}, err
}

func (s VCS_untag_Results) String() string {
	str, _ := text.Marshal(0xba0de490234c27af, s.Struct)
	return str
}

// VCS_untag_Results_List is a list of VCS_untag_Results.
type VCS_untag_Results_List struct{ capnp.List }

// NewVCS_untag_Results creates a new list of VCS_untag_Results.
func NewVCS_untag_Results_List(s *capnp.Segment, sz int32) (VCS_untag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_untag_Results_List{l}, err
}

func (s VCS_untag_Results_List) At(i int) VCS_untag_Results {
	return VCS_untag_Results{s.List.Struct(i)}
}

func (s VCS_untag_Results_List) Set(i int, v VCS_untag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Results_List) String() string {
	str, _ := text.MarshalList(0xba0de490234c27af, s.List)
	return str
}

// VCS_untag_Results_Promise is a wrapper for a VCS_untag_Results promised by a client call.
type VCS_untag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Results_Promise) Struct() (VCS_untag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Results{s}, err
}

type VCS_reset_Params struct{ capnp.Struct }

// VCS_reset_Params_TypeID is the unique identifier for the type VCS_reset_Params.
const VCS_reset_Params_TypeID = 0xe71560d8bc06c6fd

func NewVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func NewRootVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func ReadRootVCS_reset_Params(msg *capnp.Message) (VCS_reset_Params, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Params{root.Struct()}, err
}

func (s VCS_reset_Params) String() string {
	str, _ := text.Marshal(0xe71560d8bc06c6fd, s.Struct)
	return str
}

func (s VCS_reset_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_reset_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_reset_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_reset_Params) HasRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetRev(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_reset_Params) Force() bool {
	return s.Struct.Bit(0)
}

func (s VCS_reset_Params) SetForce(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_reset_Params_List is a list of VCS_reset_Params.
type VCS_reset_Params_List struct{ capnp.List }

// NewVCS_reset_Params creates a new list of VCS_reset_Params.
func NewVCS_reset_Params_List(s *capnp.Segment, sz int32) (VCS_reset_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return VCS_reset_Params_List{l}, err
}

func (s VCS_reset_Params_List) At(i int) VCS_reset_Params { return VCS_reset_Params{s.List.Struct(i)} }

func (s VCS_reset_Params_List) Set(i int, v VCS_reset_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Params_List) String() string {
	str, _ := text.MarshalList(0xe71560d8bc06c6fd, s.List)
	return str
}

// VCS_reset_Params_Promise is a wrapper for a VCS_reset_Params promised by a client call.
type VCS_reset_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Params_Promise) Struct() (VCS_reset_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Params{s}, err
}

type VCS_reset_Results struct{ capnp.Struct }

// VCS_reset_Results_TypeID is the unique identifier for the type VCS_reset_Results.
const VCS_reset_Results_TypeID = 0xf9b772853fd93ea9

func NewVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func NewRootVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func ReadRootVCS_reset_Results(msg *capnp.Message) (VCS_reset_Results, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Results{root.Struct()}, err
}

func (s VCS_reset_Results) String() string {
	str, _ := text.Marshal(0xf9b772853fd93ea9, s.Struct)
	return str
}

// VCS_reset_Results_List is a list of VCS_reset_Results.
type VCS_reset_Results_List struct{ capnp.List }

// NewVCS_reset_Results creates a new list of VCS_reset_Results.
func NewVCS_reset_Results_List(s *capnp.Segment, sz int32) (VCS_reset_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_reset_Results_List{l}, err
}

func (s VCS_reset_Results_List) At(i int) VCS_reset_Results {
	return VCS_reset_Results{s.List.Struct(i)}
}

func (s VCS_reset_Results_List) Set(i int, v VCS_reset_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Results_List) String() string {
	str, _ := text.MarshalList(0xf9b772853fd93ea9, s.List)
	return str
}

// VCS_reset_Results_Promise is a wrapper for a VCS_reset_Results promised by a client call.
type VCS_reset_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Results_Promise) Struct() (VCS_reset_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Results{s}, err
}

type VCS_history_Params struct{ capnp.Struct }

// VCS_history_Params_TypeID is the unique identifier for the type VCS_history_Params.
const VCS_history_Params_TypeID = 0xe154e487144bf3c2

func NewVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func NewRootVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func ReadRootVCS_history_Params(msg *capnp.Message) (VCS_history_Params, error) {
	root, err := msg.RootPtr()
	return VCS_history_Params{root.Struct()}, err
}

func (s VCS_history_Params) String() string {
	str, _ := text.Marshal(0xe154e487144bf3c2, s.Struct)
	return str
}

func (s VCS_history_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_history_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_history_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_history_Params_List is a list of VCS_history_Params.
type VCS_history_Params_List struct{ capnp.List }

// NewVCS_history_Params creates a new list of VCS_history_Params.
func NewVCS_history_Params_List(s *capnp.Segment, sz int32) (VCS_history_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Params_List{l}, err
}

func (s VCS_history_Params_List) At(i int) VCS_history_Params {
	return VCS_history_Params{s.List.Struct(i)}
}

func (s VCS_history_Params_List) Set(i int, v VCS_history_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Params_List) String() string {
	str, _ := text.MarshalList(0xe154e487144bf3c2, s.List)
	return str
}

// VCS_history_Params_Promise is a wrapper for a VCS_history_Params promised by a client call.
type VCS_history_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Params_Promise) Struct() (VCS_history_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Params{s}, err
}

type VCS_history_Results struct{ capnp.Struct }

// VCS_history_Results_TypeID is the unique identifier for the type VCS_history_Results.
const VCS_history_Results_TypeID = 0xe0f49db8c42c72b2

func NewVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func NewRootVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func ReadRootVCS_history_Results(msg *capnp.Message) (VCS_history_Results, error) {
	root, err := msg.RootPtr()
	return VCS_history_Results{root.Struct()}, err
}

func (s VCS_history_Results) String() string {
	str, _ := text.Marshal(0xe0f49db8c42c72b2, s.Struct)
	return str
}

func (s VCS_history_Results) History() (Change_List, error) {
	p, err := s.Struct.Ptr(0)
	return Change_List{List: p.List()}, err
}

func (s VCS_history_Results) HasHistory() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Results) SetHistory(v Change_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHistory sets the history field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s VCS_history_Results) NewHistory(n int32) (Change_List, error) {
	l, err := NewChange_List(s.Struct.Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_history_Results_List is a list of VCS_history_Results.
type VCS_history_Results_List struct{ capnp.List }

// NewVCS_history_Results creates a new list of VCS_history_Results.
func NewVCS_history_Results_List(s *capnp.Segment, sz int32) (VCS_history_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Results_List{l}, err
}

func (s VCS_history_Results_List) At(i int) VCS_history_Results {
	return VCS_history_Results{s.List.Struct(i)}
}

func (s VCS_history_Results_List) Set(i int, v VCS_history_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Results_List) String() string {
	str, _ := text.MarshalList(0xe0f49db8c42c72b2, s.List)
	return str
}

// VCS_history_Results_Promise is a wrapper for a VCS_history_Results promised by a client call.
type VCS_history_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Results_Promise) Struct() (VCS_history_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Results{s}, err
}

type VCS_makeDiff_Params struct{ capnp.Struct }

// VCS_makeDiff_Params_TypeID is the unique identifier for the type VCS_makeDiff_Params.
const VCS_makeDiff_Params_TypeID = 0xe2f81b4403ef433b

func NewVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func NewRootVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return VCS_makeDiff_Params{st}, err
}

func ReadRootVCS_makeDiff_Params(msg *capnp.Message) (VCS_makeDiff_Params, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Params{root.Struct()}, err
}

func (s VCS_makeDiff_Params) String() string {
	str, _ := text.Marshal(0xe2f81b4403ef433b, s.Struct)
	return str
}

func (s VCS_makeDiff_Params) LocalOwner() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalOwner(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_makeDiff_Params) RemoteOwner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_makeDiff_Params) LocalRev() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasLocalRev() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) LocalRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetLocalRev(v string) error {
	return s.Struct.SetText(2, v)
}

func (s VCS_makeDiff_Params) RemoteRev() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteRev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteRevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteRev(v string) error {
	return s.Struct.SetText(3, v)
}

func (s VCS_makeDiff_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_makeDiff_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_makeDiff_Params_List is a list of VCS_makeDiff_Params.
type VCS_makeDiff_Params_List struct{ capnp.List }

// NewVCS_makeDiff_Params creates a new list of VCS_makeDiff_Params.
func NewVCS_makeDiff_Params_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return VCS_makeDiff_Params_List{l}, err
}

func (s VCS_makeDiff_Params_List) At(i int) VCS_makeDiff_Params {
	return VCS_makeDiff_Params{s.List.Struct(i)}
}

func (s VCS_makeDiff_Params_List) Set(i int, v VCS_makeDiff_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Params_List) String() string {
	str, _ := text.MarshalList(0xe2f81b4403ef433b, s.List)
	return str
}

// VCS_makeDiff_Params_Promise is a wrapper for a VCS_makeDiff_Params promised by a client call.
type VCS_makeDiff_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Params_Promise) Struct() (VCS_makeDiff_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Params{s}, err
}

type VCS_makeDiff_Results struct{ capnp.Struct }

// VCS_makeDiff_Results_TypeID is the unique identifier for the type VCS_makeDiff_Results.
const VCS_makeDiff_Results_TypeID = 0xd7ef486de484610d

func NewVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func NewRootVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func ReadRootVCS_makeDiff_Results(msg *capnp.Message) (VCS_makeDiff_Results, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Results{root.Struct()}, err
}

func (s VCS_makeDiff_Results) String() string {
	str, _ := text.Marshal(0xd7ef486de484610d, s.Struct)
	return str
}

func (s VCS_makeDiff_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_makeDiff_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_makeDiff_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_makeDiff_Results_List is a list of VCS_makeDiff_Results.
type VCS_makeDiff_Results_List struct{ capnp.List }

// NewVCS_makeDiff_Results creates a new list of VCS_makeDiff_Results.
func NewVCS_makeDiff_Results_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_makeDiff_Results_List{l}, err
}

func (s VCS_makeDiff_Results_List) At(i int) VCS_makeDiff_Results {
	return VCS_makeDiff_Results{s.List.Struct(i)}
}

func (s VCS_makeDiff_Results_List) Set(i int, v VCS_makeDiff_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Results_List) String() string {
	str, _ := text.MarshalList(0xd7ef486de484610d, s.List)
	return str
}

// VCS_makeDiff_Results_Promise is a wrapper for a VCS_makeDiff_Results promised by a client call.
type VCS_makeDiff_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Results_Promise) Struct() (VCS_makeDiff_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Results{s}, err
}

func (p VCS_makeDiff_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type VCS_sync_Params struct{ capnp.Struct }

// VCS_sync_Params_TypeID is the unique identifier for the type VCS_sync_Params.
const VCS_sync_Params_TypeID = 0xb05bd83a34de71b7

func NewVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func NewRootVCS_sync_Params(s *capnp.Segment) (VCS_sync_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_sync_Params{st}, err
}

func ReadRootVCS_sync_Params(msg *capnp.Message) (VCS_sync_Params, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Params{root.Struct()}, err
}

func (s VCS_sync_Params) String() string {
	str, _ := text.Marshal(0xb05bd83a34de71b7, s.Struct)
	return str
}

func (s VCS_sync_Params) WithWhom() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_sync_Params) HasWithWhom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_sync_Params) WithWhomBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_sync_Params) SetWithWhom(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_sync_Params) NeedFetch() bool {
	return s.Struct.Bit(0)
}

func (s VCS_sync_Params) SetNeedFetch(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_sync_Params_List is a list of VCS_sync_Params.
type VCS_sync_Params_List struct{ capnp.List }

// NewVCS_sync_Params creates a new list of VCS_sync_Params.
func NewVCS_sync_Params_List(s *capnp.Segment, sz int32) (VCS_sync_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_sync_Params_List{l}, err
}

func (s VCS_sync_Params_List) At(i int) VCS_sync_Params { return VCS_sync_Params{s.List.Struct(i)} }

func (s VCS_sync_Params_List) Set(i int, v VCS_sync_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Params_List) String() string {
	str, _ := text.MarshalList(0xb05bd83a34de71b7, s.List)
	return str
}

// VCS_sync_Params_Promise is a wrapper for a VCS_sync_Params promised by a client call.
type VCS_sync_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Params_Promise) Struct() (VCS_sync_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Params{s}, err
}

type VCS_sync_Results struct{ capnp.Struct }

// VCS_sync_Results_TypeID is the unique identifier for the type VCS_sync_Results.
const VCS_sync_Results_TypeID = 0xfa04b4272d0ffcd9

func NewVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_sync_Results{st}, err
}

func NewRootVCS_sync_Results(s *capnp.Segment) (VCS_sync_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_sync_Results{st}, err
}

func ReadRootVCS_sync_Results(msg *capnp.Message) (VCS_sync_Results, error) {
	root, err := msg.RootPtr()
	return VCS_sync_Results{root.Struct()}, err
}

func (s VCS_sync_Results) String() string {
	str, _ := text.Marshal(0xfa04b4272d0ffcd9, s.Struct)
	return str
}

func (s VCS_sync_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_sync_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_sync_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_sync_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_sync_Results_List is a list of VCS_sync_Results.
type VCS_sync_Results_List struct{ capnp.List }

// NewVCS_sync_Results creates a new list of VCS_sync_Results.
func NewVCS_sync_Results_List(s *capnp.Segment, sz int32) (VCS_sync_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_sync_Results_List{l}, err
}

func (s VCS_sync_Results_List) At(i int) VCS_sync_Results { return VCS_sync_Results{s.List.Struct(i)} }

func (s VCS_sync_Results_List) Set(i int, v VCS_sync_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_sync_Results_List) String() string {
	str, _ := text.MarshalList(0xfa04b4272d0ffcd9, s.List)
	return str
}

// VCS_sync_Results_Promise is a wrapper for a VCS_sync_Results promised by a client call.
type VCS_sync_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_sync_Results_Promise) Struct() (VCS_sync_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_sync_Results{s}, err
}

func (p VCS_sync_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type VCS_fetch_Params struct{ capnp.Struct }

// VCS_fetch_Params_TypeID is the unique identifier for the type VCS_fetch_Params.
const VCS_fetch_Params_TypeID = 0xaff62edfdbfe53d0

func NewVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func NewRootVCS_fetch_Params(s *capnp.Segment) (VCS_fetch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_fetch_Params{st}, err
}

func ReadRootVCS_fetch_Params(msg *capnp.Message) (VCS_fetch_Params, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Params{root.Struct()}, err
}

func (s VCS_fetch_Params) String() string {
	str, _ := text.Marshal(0xaff62edfdbfe53d0, s.Struct)
	return str
}

func (s VCS_fetch_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_fetch_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_fetch_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_fetch_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_fetch_Params_List is a list of VCS_fetch_Params.
type VCS_fetch_Params_List struct{ capnp.List }

// NewVCS_fetch_Params creates a new list of VCS_fetch_Params.
func NewVCS_fetch_Params_List(s *capnp.Segment, sz int32) (VCS_fetch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_fetch_Params_List{l}, err
}

func (s VCS_fetch_Params_List) At(i int) VCS_fetch_Params { return VCS_fetch_Params{s.List.Struct(i)} }

func (s VCS_fetch_Params_List) Set(i int, v VCS_fetch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Params_List) String() string {
	str, _ := text.MarshalList(0xaff62edfdbfe53d0, s.List)
	return str
}

// VCS_fetch_Params_Promise is a wrapper for a VCS_fetch_Params promised by a client call.
type VCS_fetch_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Params_Promise) Struct() (VCS_fetch_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Params{s}, err
}

type VCS_fetch_Results struct{ capnp.Struct }

// VCS_fetch_Results_TypeID is the unique identifier for the type VCS_fetch_Results.
const VCS_fetch_Results_TypeID = 0xb262e0d6c2474d9c

func NewVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func NewRootVCS_fetch_Results(s *capnp.Segment) (VCS_fetch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_fetch_Results{st}, err
}

func ReadRootVCS_fetch_Results(msg *capnp.Message) (VCS_fetch_Results, error) {
	root, err := msg.RootPtr()
	return VCS_fetch_Results{root.Struct()}, err
}

func (s VCS_fetch_Results) String() string {
	str, _ := text.Marshal(0xb262e0d6c2474d9c, s.Struct)
	return str
}

// VCS_fetch_Results_List is a list of VCS_fetch_Results.
type VCS_fetch_Results_List struct{ capnp.List }

// NewVCS_fetch_Results creates a new list of VCS_fetch_Results.
func NewVCS_fetch_Results_List(s *capnp.Segment, sz int32) (VCS_fetch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_fetch_Results_List{l}, err
}

func (s VCS_fetch_Results_List) At(i int) VCS_fetch_Results {
	return VCS_fetch_Results{s.List.Struct(i)}
}

func (s VCS_fetch_Results_List) Set(i int, v VCS_fetch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_fetch_Results_List) String() string {
	str, _ := text.MarshalList(0xb262e0d6c2474d9c, s.List)
	return str
}

// VCS_fetch_Results_Promise is a wrapper for a VCS_fetch_Results promised by a client call.
type VCS_fetch_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_fetch_Results_Promise) Struct() (VCS_fetch_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_fetch_Results{s}, err
}

type VCS_commitInfo_Params struct{ capnp.Struct }

// VCS_commitInfo_Params_TypeID is the unique identifier for the type VCS_commitInfo_Params.
const VCS_commitInfo_Params_TypeID = 0xa630576401b1a5b7

func NewVCS_commitInfo_Params(s *capnp.Segment) (VCS_commitInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commitInfo_Params{st}, err
}

func NewRootVCS_commitInfo_Params(s *capnp.Segment) (VCS_commitInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commitInfo_Params{st}, err
}

func ReadRootVCS_commitInfo_Params(msg *capnp.Message) (VCS_commitInfo_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commitInfo_Params{root.Struct()}, err
}

func (s VCS_commitInfo_Params) String() string {
	str, _ := text.Marshal(0xa630576401b1a5b7, s.Struct)
	return str
}

func (s VCS_commitInfo_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commitInfo_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commitInfo_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commitInfo_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commitInfo_Params_List is a list of VCS_commitInfo_Params.
type VCS_commitInfo_Params_List struct{ capnp.List }

// NewVCS_commitInfo_Params creates a new list of VCS_commitInfo_Params.
func NewVCS_commitInfo_Params_List(s *capnp.Segment, sz int32) (VCS_commitInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commitInfo_Params_List{l}, err
}

func (s VCS_commitInfo_Params_List) At(i int) VCS_commitInfo_Params {
	return VCS_commitInfo_Params{s.List.Struct(i)}
}

func (s VCS_commitInfo_Params_List) Set(i int, v VCS_commitInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commitInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xa630576401b1a5b7, s.List)
	return str
}

// VCS_commitInfo_Params_Promise is a wrapper for a VCS_commitInfo_Params promised by a client call.
type VCS_commitInfo_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commitInfo_Params_Promise) Struct() (VCS_commitInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commitInfo_Params{s}, err
}

type VCS_commitInfo_Results struct{ capnp.Struct }

// VCS_commitInfo_Results_TypeID is the unique identifier for the type VCS_commitInfo_Results.
const VCS_commitInfo_Results_TypeID = 0xa1a9e5ab638eed79

func NewVCS_commitInfo_Results(s *capnp.Segment) (VCS_commitInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_commitInfo_Results{st}, err
}

func NewRootVCS_commitInfo_Results(s *capnp.Segment) (VCS_commitInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_commitInfo_Results{st}, err
}

func ReadRootVCS_commitInfo_Results(msg *capnp.Message) (VCS_commitInfo_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commitInfo_Results{root.Struct()}, err
}

func (s VCS_commitInfo_Results) String() string {
	str, _ := text.Marshal(0xa1a9e5ab638eed79, s.Struct)
	return str
}

func (s VCS_commitInfo_Results) IsValidRef() bool {
	return s.Struct.Bit(0)
}

func (s VCS_commitInfo_Results) SetIsValidRef(v bool) {
	s.Struct.SetBit(0, v)
}

func (s VCS_commitInfo_Results) Commit() (Commit, error) {
	p, err := s.Struct.Ptr(0)
	return Commit{Struct: p.Struct()}, err
}

func (s VCS_commitInfo_Results) HasCommit() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commitInfo_Results) SetCommit(v Commit) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCommit sets the commit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s VCS_commitInfo_Results) NewCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_commitInfo_Results_List is a list of VCS_commitInfo_Results.
type VCS_commitInfo_Results_List struct{ capnp.List }

// NewVCS_commitInfo_Results creates a new list of VCS_commitInfo_Results.
func NewVCS_commitInfo_Results_List(s *capnp.Segment, sz int32) (VCS_commitInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_commitInfo_Results_List{l}, err
}

func (s VCS_commitInfo_Results_List) At(i int) VCS_commitInfo_Results {
	return VCS_commitInfo_Results{s.List.Struct(i)}
}

func (s VCS_commitInfo_Results_List) Set(i int, v VCS_commitInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commitInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa1a9e5ab638eed79, s.List)
	return str
}

// VCS_commitInfo_Results_Promise is a wrapper for a VCS_commitInfo_Results promised by a client call.
type VCS_commitInfo_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commitInfo_Results_Promise) Struct() (VCS_commitInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commitInfo_Results{s}, err
}

func (p VCS_commitInfo_Results_Promise) Commit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo struct{ Client capnp.Client }

// Repo_TypeID is the unique identifier for the type Repo.
const Repo_TypeID = 0xa862cd929f7af191

func (c Repo) Quit(ctx context.Context, params func(Repo_quit_Params) error, opts ...capnp.CallOption) Repo_quit_Results_Promise {
	if c.Client == nil {
		return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_quit_Params{Struct: s}) }
	}
	return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Ping(ctx context.Context, params func(Repo_ping_Params) error, opts ...capnp.CallOption) Repo_ping_Results_Promise {
	if c.Client == nil {
		return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_ping_Params{Struct: s}) }
	}
	return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Init(ctx context.Context, params func(Repo_init_Params) error, opts ...capnp.CallOption) Repo_init_Results_Promise {
	if c.Client == nil {
		return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_init_Params{Struct: s}) }
	}
	return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Mount(ctx context.Context, params func(Repo_mount_Params) error, opts ...capnp.CallOption) Repo_mount_Results_Promise {
	if c.Client == nil {
		return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_mount_Params{Struct: s}) }
	}
	return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Unmount(ctx context.Context, params func(Repo_unmount_Params) error, opts ...capnp.CallOption) Repo_unmount_Results_Promise {
	if c.Client == nil {
		return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_unmount_Params{Struct: s}) }
	}
	return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigGet(ctx context.Context, params func(Repo_configGet_Params) error, opts ...capnp.CallOption) Repo_configGet_Results_Promise {
	if c.Client == nil {
		return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configGet_Params{Struct: s}) }
	}
	return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigSet(ctx context.Context, params func(Repo_configSet_Params) error, opts ...capnp.CallOption) Repo_configSet_Results_Promise {
	if c.Client == nil {
		return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configSet_Params{Struct: s}) }
	}
	return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigAll(ctx context.Context, params func(Repo_configAll_Params) error, opts ...capnp.CallOption) Repo_configAll_Results_Promise {
	if c.Client == nil {
		return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configAll_Params{Struct: s}) }
	}
	return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) ConfigDoc(ctx context.Context, params func(Repo_configDoc_Params) error, opts ...capnp.CallOption) Repo_configDoc_Results_Promise {
	if c.Client == nil {
		return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configDoc_Params{Struct: s}) }
	}
	return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Become(ctx context.Context, params func(Repo_become_Params) error, opts ...capnp.CallOption) Repo_become_Results_Promise {
	if c.Client == nil {
		return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_become_Params{Struct: s}) }
	}
	return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabAdd(ctx context.Context, params func(Repo_fstabAdd_Params) error, opts ...capnp.CallOption) Repo_fstabAdd_Results_Promise {
	if c.Client == nil {
		return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabAdd_Params{Struct: s}) }
	}
	return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabRemove(ctx context.Context, params func(Repo_fstabRemove_Params) error, opts ...capnp.CallOption) Repo_fstabRemove_Results_Promise {
	if c.Client == nil {
		return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabRemove_Params{Struct: s}) }
	}
	return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabApply(ctx context.Context, params func(Repo_fstabApply_Params) error, opts ...capnp.CallOption) Repo_fstabApply_Results_Promise {
	if c.Client == nil {
		return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabApply_Params{Struct: s}) }
	}
	return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabList(ctx context.Context, params func(Repo_fstabList_Params) error, opts ...capnp.CallOption) Repo_fstabList_Results_Promise {
	if c.Client == nil {
		return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabList_Params{Struct: s}) }
	}
	return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) FstabUnmountAll(ctx context.Context, params func(Repo_fstabUnmountAll_Params) error, opts ...capnp.CallOption) Repo_fstabUnmountAll_Results_Promise {
	if c.Client == nil {
		return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabUnmountAll_Params{Struct: s}) }
	}
	return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) Version(ctx context.Context, params func(Repo_version_Params) error, opts ...capnp.CallOption) Repo_version_Results_Promise {
	if c.Client == nil {
		return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_version_Params{Struct: s}) }
	}
	return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Repo) WaitForInit(ctx context.Context, params func(Repo_waitForInit_Params) error, opts ...capnp.CallOption) Repo_waitForInit_Results_Promise {
	if c.Client == nil {
		return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_waitForInit_Params{Struct: s}) }
	}
	return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Repo_Server interface {
	Quit(Repo_quit) error

	Ping(Repo_ping) error

	Init(Repo_init) error

	Mount(Repo_mount) error

	Unmount(Repo_unmount) error

	ConfigGet(Repo_configGet) error

	ConfigSet(Repo_configSet) error

	ConfigAll(Repo_configAll) error

	ConfigDoc(Repo_configDoc) error

	Become(Repo_become) error

	FstabAdd(Repo_fstabAdd) error

	FstabRemove(Repo_fstabRemove) error

	FstabApply(Repo_fstabApply) error

	FstabList(Repo_fstabList) error

	FstabUnmountAll(Repo_fstabUnmountAll) error

	Version(Repo_version) error

	WaitForInit(Repo_waitForInit) error
}

func Repo_ServerToClient(s Repo_Server) Repo {
	c, _ := s.(server.Closer)
	return Repo{Client: server.New(Repo_Methods(nil, s), c)}
}

func Repo_Methods(methods []server.Method, s Repo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 17)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_quit{c, opts, Repo_quit_Params{Struct: p}, Repo_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_ping{c, opts, Repo_ping_Params{Struct: p}, Repo_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_init{c, opts, Repo_init_Params{Struct: p}, Repo_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_mount{c, opts, Repo_mount_Params{Struct: p}, Repo_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_unmount{c, opts, Repo_unmount_Params{Struct: p}, Repo_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configGet{c, opts, Repo_configGet_Params{Struct: p}, Repo_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configSet{c, opts, Repo_configSet_Params{Struct: p}, Repo_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configAll{c, opts, Repo_configAll_Params{Struct: p}, Repo_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configDoc{c, opts, Repo_configDoc_Params{Struct: p}, Repo_configDoc_Results{Struct: r}}
			return s.ConfigDoc(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_become{c, opts, Repo_become_Params{Struct: p}, Repo_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabAdd{c, opts, Repo_fstabAdd_Params{Struct: p}, Repo_fstabAdd_Results{Struct: r}}
			return s.FstabAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabRemove{c, opts, Repo_fstabRemove_Params{Struct: p}, Repo_fstabRemove_Results{Struct: r}}
			return s.FstabRemove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabApply{c, opts, Repo_fstabApply_Params{Struct: p}, Repo_fstabApply_Results{Struct: r}}
			return s.FstabApply(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabList{c, opts, Repo_fstabList_Params{Struct: p}, Repo_fstabList_Results{Struct: r}}
			return s.FstabList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabUnmountAll{c, opts, Repo_fstabUnmountAll_Params{Struct: p}, Repo_fstabUnmountAll_Results{Struct: r}}
			return s.FstabUnmountAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_version{c, opts, Repo_version_Params{Struct: p}, Repo_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_waitForInit{c, opts, Repo_waitForInit_Params{Struct: p}, Repo_waitForInit_Results{Struct: r}}
			return s.WaitForInit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Repo_quit holds the arguments for a server call to Repo.quit.
type Repo_quit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_quit_Params
	Results Repo_quit_Results
}

// Repo_ping holds the arguments for a server call to Repo.ping.
type Repo_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_ping_Params
	Results Repo_ping_Results
}

// Repo_init holds the arguments for a server call to Repo.init.
type Repo_init struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_init_Params
	Results Repo_init_Results
}

// Repo_mount holds the arguments for a server call to Repo.mount.
type Repo_mount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_mount_Params
	Results Repo_mount_Results
}

// Repo_unmount holds the arguments for a server call to Repo.unmount.
type Repo_unmount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_unmount_Params
	Results Repo_unmount_Results
}

// Repo_configGet holds the arguments for a server call to Repo.configGet.
type Repo_configGet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configGet_Params
	Results Repo_configGet_Results
}

// Repo_configSet holds the arguments for a server call to Repo.configSet.
type Repo_configSet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configSet_Params
	Results Repo_configSet_Results
}

// Repo_configAll holds the arguments for a server call to Repo.configAll.
type Repo_configAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configAll_Params
	Results Repo_configAll_Results
}

// Repo_configDoc holds the arguments for a server call to Repo.configDoc.
type Repo_configDoc struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_configDoc_Params
	Results Repo_configDoc_Results
}

// Repo_become holds the arguments for a server call to Repo.become.
type Repo_become struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_become_Params
	Results Repo_become_Results
}

// Repo_fstabAdd holds the arguments for a server call to Repo.fstabAdd.
type Repo_fstabAdd struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabAdd_Params
	Results Repo_fstabAdd_Results
}

// Repo_fstabRemove holds the arguments for a server call to Repo.fstabRemove.
type Repo_fstabRemove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabRemove_Params
	Results Repo_fstabRemove_Results
}

// Repo_fstabApply holds the arguments for a server call to Repo.fstabApply.
type Repo_fstabApply struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabApply_Params
	Results Repo_fstabApply_Results
}

// Repo_fstabList holds the arguments for a server call to Repo.fstabList.
type Repo_fstabList struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabList_Params
	Results Repo_fstabList_Results
}

// Repo_fstabUnmountAll holds the arguments for a server call to Repo.fstabUnmountAll.
type Repo_fstabUnmountAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_fstabUnmountAll_Params
	Results Repo_fstabUnmountAll_Results
}

// Repo_version holds the arguments for a server call to Repo.version.
type Repo_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_version_Params
	Results Repo_version_Results
}

// Repo_waitForInit holds the arguments for a server call to Repo.waitForInit.
type Repo_waitForInit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Repo_waitForInit_Params
	Results Repo_waitForInit_Results
}

type Repo_quit_Params struct{ capnp.Struct }

// Repo_quit_Params_TypeID is the unique identifier for the type Repo_quit_Params.
const Repo_quit_Params_TypeID = 0xaa98a78425cdd321

func NewRepo_quit_Params(s *capnp.Segment) (Repo_quit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Params{st}, err
}

func NewRootRepo_quit_Params(s *capnp.Segment) (Repo_quit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Params{st}, err
}

func ReadRootRepo_quit_Params(msg *capnp.Message) (Repo_quit_Params, error) {
	root, err := msg.RootPtr()
	return Repo_quit_Params{root.Struct()}, err
}

func (s Repo_quit_Params) String() string {
	str, _ := text.Marshal(0xaa98a78425cdd321, s.Struct)
	return str
}

// Repo_quit_Params_List is a list of Repo_quit_Params.
type Repo_quit_Params_List struct{ capnp.List }

// NewRepo_quit_Params creates a new list of Repo_quit_Params.
func NewRepo_quit_Params_List(s *capnp.Segment, sz int32) (Repo_quit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_quit_Params_List{l}, err
}

func (s Repo_quit_Params_List) At(i int) Repo_quit_Params { return Repo_quit_Params{s.List.Struct(i)} }

func (s Repo_quit_Params_List) Set(i int, v Repo_quit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_quit_Params_List) String() string {
	str, _ := text.MarshalList(0xaa98a78425cdd321, s.List)
	return str
}

// Repo_quit_Params_Promise is a wrapper for a Repo_quit_Params promised by a client call.
type Repo_quit_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_quit_Params_Promise) Struct() (Repo_quit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_quit_Params{s}, err
}

type Repo_quit_Results struct{ capnp.Struct }

// Repo_quit_Results_TypeID is the unique identifier for the type Repo_quit_Results.
const Repo_quit_Results_TypeID = 0x860c3dd5698349f5

func NewRepo_quit_Results(s *capnp.Segment) (Repo_quit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Results{st}, err
}

func NewRootRepo_quit_Results(s *capnp.Segment) (Repo_quit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_quit_Results{st}, err
}

func ReadRootRepo_quit_Results(msg *capnp.Message) (Repo_quit_Results, error) {
	root, err := msg.RootPtr()
	return Repo_quit_Results{root.Struct()}, err
}

func (s Repo_quit_Results) String() string {
	str, _ := text.Marshal(0x860c3dd5698349f5, s.Struct)
	return str
}

// Repo_quit_Results_List is a list of Repo_quit_Results.
type Repo_quit_Results_List struct{ capnp.List }

// NewRepo_quit_Results creates a new list of Repo_quit_Results.
func NewRepo_quit_Results_List(s *capnp.Segment, sz int32) (Repo_quit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_quit_Results_List{l}, err
}

func (s Repo_quit_Results_List) At(i int) Repo_quit_Results {
	return Repo_quit_Results{s.List.Struct(i)}
}

func (s Repo_quit_Results_List) Set(i int, v Repo_quit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_quit_Results_List) String() string {
	str, _ := text.MarshalList(0x860c3dd5698349f5, s.List)
	return str
}

// Repo_quit_Results_Promise is a wrapper for a Repo_quit_Results promised by a client call.
type Repo_quit_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_quit_Results_Promise) Struct() (Repo_quit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_quit_Results{s}, err
}

type Repo_ping_Params struct{ capnp.Struct }

// Repo_ping_Params_TypeID is the unique identifier for the type Repo_ping_Params.
const Repo_ping_Params_TypeID = 0x978c524c1a35015c

func NewRepo_ping_Params(s *capnp.Segment) (Repo_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_ping_Params{st}, err
}

func NewRootRepo_ping_Params(s *capnp.Segment) (Repo_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_ping_Params{st}, err
}

func ReadRootRepo_ping_Params(msg *capnp.Message) (Repo_ping_Params, error) {
	root, err := msg.RootPtr()
	return Repo_ping_Params{root.Struct()}, err
}

func (s Repo_ping_Params) String() string {
	str, _ := text.Marshal(0x978c524c1a35015c, s.Struct)
	return str
}

// Repo_ping_Params_List is a list of Repo_ping_Params.
type Repo_ping_Params_List struct{ capnp.List }

// NewRepo_ping_Params creates a new list of Repo_ping_Params.
func NewRepo_ping_Params_List(s *capnp.Segment, sz int32) (Repo_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_ping_Params_List{l}, err
}

func (s Repo_ping_Params_List) At(i int) Repo_ping_Params { return Repo_ping_Params{s.List.Struct(i)} }

func (s Repo_ping_Params_List) Set(i int, v Repo_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_ping_Params_List) String() string {
	str, _ := text.MarshalList(0x978c524c1a35015c, s.List)
	return str
}

// Repo_ping_Params_Promise is a wrapper for a Repo_ping_Params promised by a client call.
type Repo_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_ping_Params_Promise) Struct() (Repo_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_ping_Params{s}, err
}

type Repo_ping_Results struct{ capnp.Struct }

// Repo_ping_Results_TypeID is the unique identifier for the type Repo_ping_Results.
const Repo_ping_Results_TypeID = 0x9d64fa17798952ff

func NewRepo_ping_Results(s *capnp.Segment) (Repo_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_ping_Results{st}, err
}

func NewRootRepo_ping_Results(s *capnp.Segment) (Repo_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_ping_Results{st}, err
}

func ReadRootRepo_ping_Results(msg *capnp.Message) (Repo_ping_Results, error) {
	root, err := msg.RootPtr()
	return Repo_ping_Results{root.Struct()}, err
}

func (s Repo_ping_Results) String() string {
	str, _ := text.Marshal(0x9d64fa17798952ff, s.Struct)
	return str
}

func (s Repo_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_ping_Results_List is a list of Repo_ping_Results.
type Repo_ping_Results_List struct{ capnp.List }

// NewRepo_ping_Results creates a new list of Repo_ping_Results.
func NewRepo_ping_Results_List(s *capnp.Segment, sz int32) (Repo_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_ping_Results_List{l}, err
}

func (s Repo_ping_Results_List) At(i int) Repo_ping_Results {
	return Repo_ping_Results{s.List.Struct(i)}
}

func (s Repo_ping_Results_List) Set(i int, v Repo_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_ping_Results_List) String() string {
	str, _ := text.MarshalList(0x9d64fa17798952ff, s.List)
	return str
}

// Repo_ping_Results_Promise is a wrapper for a Repo_ping_Results promised by a client call.
type Repo_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_ping_Results_Promise) Struct() (Repo_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_ping_Results{s}, err
}

type Repo_init_Params struct{ capnp.Struct }

// Repo_init_Params_TypeID is the unique identifier for the type Repo_init_Params.
const Repo_init_Params_TypeID = 0x9c19777f493f1110

func NewRepo_init_Params(s *capnp.Segment) (Repo_init_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_init_Params{st}, err
}

func NewRootRepo_init_Params(s *capnp.Segment) (Repo_init_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Repo_init_Params{st}, err
}

func ReadRootRepo_init_Params(msg *capnp.Message) (Repo_init_Params, error) {
	root, err := msg.RootPtr()
	return Repo_init_Params{root.Struct()}, err
}

func (s Repo_init_Params) String() string {
	str, _ := text.Marshal(0x9c19777f493f1110, s.Struct)
	return str
}

func (s Repo_init_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_init_Params) HasBasePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_init_Params) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_init_Params) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Repo_init_Params) Backend() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Repo_init_Params) HasBackend() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) BackendBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetBackend(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Repo_init_Params) Password() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Repo_init_Params) HasPassword() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Repo_init_Params) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Repo_init_Params) SetPassword(v string) error {
	return s.Struct.SetText(3, v)
}

// Repo_init_Params_List is a list of Repo_init_Params.
type Repo_init_Params_List struct{ capnp.List }

// NewRepo_init_Params creates a new list of Repo_init_Params.
func NewRepo_init_Params_List(s *capnp.Segment, sz int32) (Repo_init_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Repo_init_Params_List{l}, err
}

func (s Repo_init_Params_List) At(i int) Repo_init_Params { return Repo_init_Params{s.List.Struct(i)} }

func (s Repo_init_Params_List) Set(i int, v Repo_init_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_init_Params_List) String() string {
	str, _ := text.MarshalList(0x9c19777f493f1110, s.List)
	return str
}

// Repo_init_Params_Promise is a wrapper for a Repo_init_Params promised by a client call.
type Repo_init_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_init_Params_Promise) Struct() (Repo_init_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_init_Params{s}, err
}

type Repo_init_Results struct{ capnp.Struct }

// Repo_init_Results_TypeID is the unique identifier for the type Repo_init_Results.
const Repo_init_Results_TypeID = 0xfc6b4417fdef895a

func NewRepo_init_Results(s *capnp.Segment) (Repo_init_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_init_Results{st}, err
}

func NewRootRepo_init_Results(s *capnp.Segment) (Repo_init_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_init_Results{st}, err
}

func ReadRootRepo_init_Results(msg *capnp.Message) (Repo_init_Results, error) {
	root, err := msg.RootPtr()
	return Repo_init_Results{root.Struct()}, err
}

func (s Repo_init_Results) String() string {
	str, _ := text.Marshal(0xfc6b4417fdef895a, s.Struct)
	return str
}

// Repo_init_Results_List is a list of Repo_init_Results.
type Repo_init_Results_List struct{ capnp.List }

// NewRepo_init_Results creates a new list of Repo_init_Results.
func NewRepo_init_Results_List(s *capnp.Segment, sz int32) (Repo_init_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_init_Results_List{l}, err
}

func (s Repo_init_Results_List) At(i int) Repo_init_Results {
	return Repo_init_Results{s.List.Struct(i)}
}

func (s Repo_init_Results_List) Set(i int, v Repo_init_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_init_Results_List) String() string {
	str, _ := text.MarshalList(0xfc6b4417fdef895a, s.List)
	return str
}

// Repo_init_Results_Promise is a wrapper for a Repo_init_Results promised by a client call.
type Repo_init_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_init_Results_Promise) Struct() (Repo_init_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_init_Results{s}, err
}

type Repo_mount_Params struct{ capnp.Struct }

// Repo_mount_Params_TypeID is the unique identifier for the type Repo_mount_Params.
const Repo_mount_Params_TypeID = 0x98300b93ef71cc57

func NewRepo_mount_Params(s *capnp.Segment) (Repo_mount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_mount_Params{st}, err
}

func NewRootRepo_mount_Params(s *capnp.Segment) (Repo_mount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_mount_Params{st}, err
}

func ReadRootRepo_mount_Params(msg *capnp.Message) (Repo_mount_Params, error) {
	root, err := msg.RootPtr()
	return Repo_mount_Params{root.Struct()}, err
}

func (s Repo_mount_Params) String() string {
	str, _ := text.Marshal(0x98300b93ef71cc57, s.Struct)
	return str
}

func (s Repo_mount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_mount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_mount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_mount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_mount_Params) Options() (MountOptions, error) {
	p, err := s.Struct.Ptr(1)
	return MountOptions{Struct: p.Struct()}, err
}

func (s Repo_mount_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_mount_Params) SetOptions(v MountOptions) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated MountOptions struct, preferring placement in s's segment.
func (s Repo_mount_Params) NewOptions() (MountOptions, error) {
	ss, err := NewMountOptions(s.Struct.Segment())
	if err != nil {
		return MountOptions{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Repo_mount_Params_List is a list of Repo_mount_Params.
type Repo_mount_Params_List struct{ capnp.List }

// NewRepo_mount_Params creates a new list of Repo_mount_Params.
func NewRepo_mount_Params_List(s *capnp.Segment, sz int32) (Repo_mount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Repo_mount_Params_List{l}, err
}

func (s Repo_mount_Params_List) At(i int) Repo_mount_Params {
	return Repo_mount_Params{s.List.Struct(i)}
}

func (s Repo_mount_Params_List) Set(i int, v Repo_mount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_mount_Params_List) String() string {
	str, _ := text.MarshalList(0x98300b93ef71cc57, s.List)
	return str
}

// Repo_mount_Params_Promise is a wrapper for a Repo_mount_Params promised by a client call.
type Repo_mount_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_mount_Params_Promise) Struct() (Repo_mount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_mount_Params{s}, err
}

func (p Repo_mount_Params_Promise) Options() MountOptions_Promise {
	return MountOptions_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Repo_mount_Results struct{ capnp.Struct }

// Repo_mount_Results_TypeID is the unique identifier for the type Repo_mount_Results.
const Repo_mount_Results_TypeID = 0xfa4486fa9522275e

func NewRepo_mount_Results(s *capnp.Segment) (Repo_mount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_mount_Results{st}, err
}

func NewRootRepo_mount_Results(s *capnp.Segment) (Repo_mount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_mount_Results{st}, err
}

func ReadRootRepo_mount_Results(msg *capnp.Message) (Repo_mount_Results, error) {
	root, err := msg.RootPtr()
	return Repo_mount_Results{root.Struct()}, err
}

func (s Repo_mount_Results) String() string {
	str, _ := text.Marshal(0xfa4486fa9522275e, s.Struct)
	return str
}

// Repo_mount_Results_List is a list of Repo_mount_Results.
type Repo_mount_Results_List struct{ capnp.List }

// NewRepo_mount_Results creates a new list of Repo_mount_Results.
func NewRepo_mount_Results_List(s *capnp.Segment, sz int32) (Repo_mount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_mount_Results_List{l}, err
}

func (s Repo_mount_Results_List) At(i int) Repo_mount_Results {
	return Repo_mount_Results{s.List.Struct(i)}
}

func (s Repo_mount_Results_List) Set(i int, v Repo_mount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_mount_Results_List) String() string {
	str, _ := text.MarshalList(0xfa4486fa9522275e, s.List)
	return str
}

// Repo_mount_Results_Promise is a wrapper for a Repo_mount_Results promised by a client call.
type Repo_mount_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_mount_Results_Promise) Struct() (Repo_mount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_mount_Results{s}, err
}

type Repo_unmount_Params struct{ capnp.Struct }

// Repo_unmount_Params_TypeID is the unique identifier for the type Repo_unmount_Params.
const Repo_unmount_Params_TypeID = 0xd7a7f00d5a96fc43

func NewRepo_unmount_Params(s *capnp.Segment) (Repo_unmount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_unmount_Params{st}, err
}

func NewRootRepo_unmount_Params(s *capnp.Segment) (Repo_unmount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_unmount_Params{st}, err
}

func ReadRootRepo_unmount_Params(msg *capnp.Message) (Repo_unmount_Params, error) {
	root, err := msg.RootPtr()
	return Repo_unmount_Params{root.Struct()}, err
}

func (s Repo_unmount_Params) String() string {
	str, _ := text.Marshal(0xd7a7f00d5a96fc43, s.Struct)
	return str
}

func (s Repo_unmount_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_unmount_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_unmount_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_unmount_Params) SetMountPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_unmount_Params_List is a list of Repo_unmount_Params.
type Repo_unmount_Params_List struct{ capnp.List }

// NewRepo_unmount_Params creates a new list of Repo_unmount_Params.
func NewRepo_unmount_Params_List(s *capnp.Segment, sz int32) (Repo_unmount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_unmount_Params_List{l}, err
}

func (s Repo_unmount_Params_List) At(i int) Repo_unmount_Params {
	return Repo_unmount_Params{s.List.Struct(i)}
}

func (s Repo_unmount_Params_List) Set(i int, v Repo_unmount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_unmount_Params_List) String() string {
	str, _ := text.MarshalList(0xd7a7f00d5a96fc43, s.List)
	return str
}

// Repo_unmount_Params_Promise is a wrapper for a Repo_unmount_Params promised by a client call.
type Repo_unmount_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_unmount_Params_Promise) Struct() (Repo_unmount_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_unmount_Params{s}, err
}

type Repo_unmount_Results struct{ capnp.Struct }

// Repo_unmount_Results_TypeID is the unique identifier for the type Repo_unmount_Results.
const Repo_unmount_Results_TypeID = 0xd70c154f9521b73d

func NewRepo_unmount_Results(s *capnp.Segment) (Repo_unmount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_unmount_Results{st}, err
}

func NewRootRepo_unmount_Results(s *capnp.Segment) (Repo_unmount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_unmount_Results{st}, err
}

func ReadRootRepo_unmount_Results(msg *capnp.Message) (Repo_unmount_Results, error) {
	root, err := msg.RootPtr()
	return Repo_unmount_Results{root.Struct()}, err
}

func (s Repo_unmount_Results) String() string {
	str, _ := text.Marshal(0xd70c154f9521b73d, s.Struct)
	return str
}

// Repo_unmount_Results_List is a list of Repo_unmount_Results.
type Repo_unmount_Results_List struct{ capnp.List }

// NewRepo_unmount_Results creates a new list of Repo_unmount_Results.
func NewRepo_unmount_Results_List(s *capnp.Segment, sz int32) (Repo_unmount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_unmount_Results_List{l}, err
}

func (s Repo_unmount_Results_List) At(i int) Repo_unmount_Results {
	return Repo_unmount_Results{s.List.Struct(i)}
}

func (s Repo_unmount_Results_List) Set(i int, v Repo_unmount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_unmount_Results_List) String() string {
	str, _ := text.MarshalList(0xd70c154f9521b73d, s.List)
	return str
}

// Repo_unmount_Results_Promise is a wrapper for a Repo_unmount_Results promised by a client call.
type Repo_unmount_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_unmount_Results_Promise) Struct() (Repo_unmount_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_unmount_Results{s}, err
}

type Repo_configGet_Params struct{ capnp.Struct }

// Repo_configGet_Params_TypeID is the unique identifier for the type Repo_configGet_Params.
const Repo_configGet_Params_TypeID = 0xe0b1a560d0e4d51a

func NewRepo_configGet_Params(s *capnp.Segment) (Repo_configGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Params{st}, err
}

func NewRootRepo_configGet_Params(s *capnp.Segment) (Repo_configGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Params{st}, err
}

func ReadRootRepo_configGet_Params(msg *capnp.Message) (Repo_configGet_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configGet_Params{root.Struct()}, err
}

func (s Repo_configGet_Params) String() string {
	str, _ := text.Marshal(0xe0b1a560d0e4d51a, s.Struct)
	return str
}

func (s Repo_configGet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configGet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configGet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configGet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configGet_Params_List is a list of Repo_configGet_Params.
type Repo_configGet_Params_List struct{ capnp.List }

// NewRepo_configGet_Params creates a new list of Repo_configGet_Params.
func NewRepo_configGet_Params_List(s *capnp.Segment, sz int32) (Repo_configGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configGet_Params_List{l}, err
}

func (s Repo_configGet_Params_List) At(i int) Repo_configGet_Params {
	return Repo_configGet_Params{s.List.Struct(i)}
}

func (s Repo_configGet_Params_List) Set(i int, v Repo_configGet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configGet_Params_List) String() string {
	str, _ := text.MarshalList(0xe0b1a560d0e4d51a, s.List)
	return str
}

// Repo_configGet_Params_Promise is a wrapper for a Repo_configGet_Params promised by a client call.
type Repo_configGet_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configGet_Params_Promise) Struct() (Repo_configGet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configGet_Params{s}, err
}

type Repo_configGet_Results struct{ capnp.Struct }

// Repo_configGet_Results_TypeID is the unique identifier for the type Repo_configGet_Results.
const Repo_configGet_Results_TypeID = 0xabc3ec90b96a6d71

func NewRepo_configGet_Results(s *capnp.Segment) (Repo_configGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Results{st}, err
}

func NewRootRepo_configGet_Results(s *capnp.Segment) (Repo_configGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configGet_Results{st}, err
}

func ReadRootRepo_configGet_Results(msg *capnp.Message) (Repo_configGet_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configGet_Results{root.Struct()}, err
}

func (s Repo_configGet_Results) String() string {
	str, _ := text.Marshal(0xabc3ec90b96a6d71, s.Struct)
	return str
}

func (s Repo_configGet_Results) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configGet_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configGet_Results) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configGet_Results) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configGet_Results_List is a list of Repo_configGet_Results.
type Repo_configGet_Results_List struct{ capnp.List }

// NewRepo_configGet_Results creates a new list of Repo_configGet_Results.
func NewRepo_configGet_Results_List(s *capnp.Segment, sz int32) (Repo_configGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configGet_Results_List{l}, err
}

func (s Repo_configGet_Results_List) At(i int) Repo_configGet_Results {
	return Repo_configGet_Results{s.List.Struct(i)}
}

func (s Repo_configGet_Results_List) Set(i int, v Repo_configGet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configGet_Results_List) String() string {
	str, _ := text.MarshalList(0xabc3ec90b96a6d71, s.List)
	return str
}

// Repo_configGet_Results_Promise is a wrapper for a Repo_configGet_Results promised by a client call.
type Repo_configGet_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configGet_Results_Promise) Struct() (Repo_configGet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configGet_Results{s}, err
}

type Repo_configSet_Params struct{ capnp.Struct }

// Repo_configSet_Params_TypeID is the unique identifier for the type Repo_configSet_Params.
const Repo_configSet_Params_TypeID = 0xc0ad53271497ab77

func NewRepo_configSet_Params(s *capnp.Segment) (Repo_configSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_configSet_Params{st}, err
}

func NewRootRepo_configSet_Params(s *capnp.Segment) (Repo_configSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Repo_configSet_Params{st}, err
}

func ReadRootRepo_configSet_Params(msg *capnp.Message) (Repo_configSet_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configSet_Params{root.Struct()}, err
}

func (s Repo_configSet_Params) String() string {
	str, _ := text.Marshal(0xc0ad53271497ab77, s.Struct)
	return str
}

func (s Repo_configSet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configSet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configSet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configSet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_configSet_Params) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_configSet_Params) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_configSet_Params) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_configSet_Params) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Repo_configSet_Params_List is a list of Repo_configSet_Params.
type Repo_configSet_Params_List struct{ capnp.List }

// NewRepo_configSet_Params creates a new list of Repo_configSet_Params.
func NewRepo_configSet_Params_List(s *capnp.Segment, sz int32) (Repo_configSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Repo_configSet_Params_List{l}, err
}

func (s Repo_configSet_Params_List) At(i int) Repo_configSet_Params {
	return Repo_configSet_Params{s.List.Struct(i)}
}

func (s Repo_configSet_Params_List) Set(i int, v Repo_configSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configSet_Params_List) String() string {
	str, _ := text.MarshalList(0xc0ad53271497ab77, s.List)
	return str
}

// Repo_configSet_Params_Promise is a wrapper for a Repo_configSet_Params promised by a client call.
type Repo_configSet_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configSet_Params_Promise) Struct() (Repo_configSet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configSet_Params{s}, err
}

type Repo_configSet_Results struct{ capnp.Struct }

// Repo_configSet_Results_TypeID is the unique identifier for the type Repo_configSet_Results.
const Repo_configSet_Results_TypeID = 0xa89254a0db970716

func NewRepo_configSet_Results(s *capnp.Segment) (Repo_configSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configSet_Results{st}, err
}

func NewRootRepo_configSet_Results(s *capnp.Segment) (Repo_configSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configSet_Results{st}, err
}

func ReadRootRepo_configSet_Results(msg *capnp.Message) (Repo_configSet_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configSet_Results{root.Struct()}, err
}

func (s Repo_configSet_Results) String() string {
	str, _ := text.Marshal(0xa89254a0db970716, s.Struct)
	return str
}

// Repo_configSet_Results_List is a list of Repo_configSet_Results.
type Repo_configSet_Results_List struct{ capnp.List }

// NewRepo_configSet_Results creates a new list of Repo_configSet_Results.
func NewRepo_configSet_Results_List(s *capnp.Segment, sz int32) (Repo_configSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_configSet_Results_List{l}, err
}

func (s Repo_configSet_Results_List) At(i int) Repo_configSet_Results {
	return Repo_configSet_Results{s.List.Struct(i)}
}

func (s Repo_configSet_Results_List) Set(i int, v Repo_configSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configSet_Results_List) String() string {
	str, _ := text.MarshalList(0xa89254a0db970716, s.List)
	return str
}

// Repo_configSet_Results_Promise is a wrapper for a Repo_configSet_Results promised by a client call.
type Repo_configSet_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configSet_Results_Promise) Struct() (Repo_configSet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configSet_Results{s}, err
}

type Repo_configAll_Params struct{ capnp.Struct }

// Repo_configAll_Params_TypeID is the unique identifier for the type Repo_configAll_Params.
const Repo_configAll_Params_TypeID = 0xbebae5caecad3c49

func NewRepo_configAll_Params(s *capnp.Segment) (Repo_configAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configAll_Params{st}, err
}

func NewRootRepo_configAll_Params(s *capnp.Segment) (Repo_configAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_configAll_Params{st}, err
}

func ReadRootRepo_configAll_Params(msg *capnp.Message) (Repo_configAll_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configAll_Params{root.Struct()}, err
}

func (s Repo_configAll_Params) String() string {
	str, _ := text.Marshal(0xbebae5caecad3c49, s.Struct)
	return str
}

// Repo_configAll_Params_List is a list of Repo_configAll_Params.
type Repo_configAll_Params_List struct{ capnp.List }

// NewRepo_configAll_Params creates a new list of Repo_configAll_Params.
func NewRepo_configAll_Params_List(s *capnp.Segment, sz int32) (Repo_configAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_configAll_Params_List{l}, err
}

func (s Repo_configAll_Params_List) At(i int) Repo_configAll_Params {
	return Repo_configAll_Params{s.List.Struct(i)}
}

func (s Repo_configAll_Params_List) Set(i int, v Repo_configAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configAll_Params_List) String() string {
	str, _ := text.MarshalList(0xbebae5caecad3c49, s.List)
	return str
}

// Repo_configAll_Params_Promise is a wrapper for a Repo_configAll_Params promised by a client call.
type Repo_configAll_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configAll_Params_Promise) Struct() (Repo_configAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configAll_Params{s}, err
}

type Repo_configAll_Results struct{ capnp.Struct }

// Repo_configAll_Results_TypeID is the unique identifier for the type Repo_configAll_Results.
const Repo_configAll_Results_TypeID = 0xacf50d40a9d3436a

func NewRepo_configAll_Results(s *capnp.Segment) (Repo_configAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configAll_Results{st}, err
}

func NewRootRepo_configAll_Results(s *capnp.Segment) (Repo_configAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configAll_Results{st}, err
}

func ReadRootRepo_configAll_Results(msg *capnp.Message) (Repo_configAll_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configAll_Results{root.Struct()}, err
}

func (s Repo_configAll_Results) String() string {
	str, _ := text.Marshal(0xacf50d40a9d3436a, s.Struct)
	return str
}

func (s Repo_configAll_Results) All() (ConfigEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigEntry_List{List: p.List()}, err
}

func (s Repo_configAll_Results) HasAll() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configAll_Results) SetAll(v ConfigEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAll sets the all field to a newly
// allocated ConfigEntry_List, preferring placement in s's segment.
func (s Repo_configAll_Results) NewAll(n int32) (ConfigEntry_List, error) {
	l, err := NewConfigEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ConfigEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Repo_configAll_Results_List is a list of Repo_configAll_Results.
type Repo_configAll_Results_List struct{ capnp.List }

// NewRepo_configAll_Results creates a new list of Repo_configAll_Results.
func NewRepo_configAll_Results_List(s *capnp.Segment, sz int32) (Repo_configAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configAll_Results_List{l}, err
}

func (s Repo_configAll_Results_List) At(i int) Repo_configAll_Results {
	return Repo_configAll_Results{s.List.Struct(i)}
}

func (s Repo_configAll_Results_List) Set(i int, v Repo_configAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configAll_Results_List) String() string {
	str, _ := text.MarshalList(0xacf50d40a9d3436a, s.List)
	return str
}

// Repo_configAll_Results_Promise is a wrapper for a Repo_configAll_Results promised by a client call.
type Repo_configAll_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configAll_Results_Promise) Struct() (Repo_configAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configAll_Results{s}, err
}

type Repo_configDoc_Params struct{ capnp.Struct }

// Repo_configDoc_Params_TypeID is the unique identifier for the type Repo_configDoc_Params.
const Repo_configDoc_Params_TypeID = 0x9b96e8c9be077989

func NewRepo_configDoc_Params(s *capnp.Segment) (Repo_configDoc_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Params{st}, err
}

func NewRootRepo_configDoc_Params(s *capnp.Segment) (Repo_configDoc_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Params{st}, err
}

func ReadRootRepo_configDoc_Params(msg *capnp.Message) (Repo_configDoc_Params, error) {
	root, err := msg.RootPtr()
	return Repo_configDoc_Params{root.Struct()}, err
}

func (s Repo_configDoc_Params) String() string {
	str, _ := text.Marshal(0x9b96e8c9be077989, s.Struct)
	return str
}

func (s Repo_configDoc_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_configDoc_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configDoc_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_configDoc_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_configDoc_Params_List is a list of Repo_configDoc_Params.
type Repo_configDoc_Params_List struct{ capnp.List }

// NewRepo_configDoc_Params creates a new list of Repo_configDoc_Params.
func NewRepo_configDoc_Params_List(s *capnp.Segment, sz int32) (Repo_configDoc_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configDoc_Params_List{l}, err
}

func (s Repo_configDoc_Params_List) At(i int) Repo_configDoc_Params {
	return Repo_configDoc_Params{s.List.Struct(i)}
}

func (s Repo_configDoc_Params_List) Set(i int, v Repo_configDoc_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configDoc_Params_List) String() string {
	str, _ := text.MarshalList(0x9b96e8c9be077989, s.List)
	return str
}

// Repo_configDoc_Params_Promise is a wrapper for a Repo_configDoc_Params promised by a client call.
type Repo_configDoc_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_configDoc_Params_Promise) Struct() (Repo_configDoc_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configDoc_Params{s}, err
}

type Repo_configDoc_Results struct{ capnp.Struct }

// Repo_configDoc_Results_TypeID is the unique identifier for the type Repo_configDoc_Results.
const Repo_configDoc_Results_TypeID = 0xa34213f24153536b

func NewRepo_configDoc_Results(s *capnp.Segment) (Repo_configDoc_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Results{st}, err
}

func NewRootRepo_configDoc_Results(s *capnp.Segment) (Repo_configDoc_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_configDoc_Results{st}, err
}

func ReadRootRepo_configDoc_Results(msg *capnp.Message) (Repo_configDoc_Results, error) {
	root, err := msg.RootPtr()
	return Repo_configDoc_Results{root.Struct()}, err
}

func (s Repo_configDoc_Results) String() string {
	str, _ := text.Marshal(0xa34213f24153536b, s.Struct)
	return str
}

func (s Repo_configDoc_Results) Desc() (ConfigEntry, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigEntry{Struct: p.Struct()}, err
}

func (s Repo_configDoc_Results) HasDesc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_configDoc_Results) SetDesc(v ConfigEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated ConfigEntry struct, preferring placement in s's segment.
func (s Repo_configDoc_Results) NewDesc() (ConfigEntry, error) {
	ss, err := NewConfigEntry(s.Struct.Segment())
	if err != nil {
		return ConfigEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Repo_configDoc_Results_List is a list of Repo_configDoc_Results.
type Repo_configDoc_Results_List struct{ capnp.List }

// NewRepo_configDoc_Results creates a new list of Repo_configDoc_Results.
func NewRepo_configDoc_Results_List(s *capnp.Segment, sz int32) (Repo_configDoc_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_configDoc_Results_List{l}, err
}

func (s Repo_configDoc_Results_List) At(i int) Repo_configDoc_Results {
	return Repo_configDoc_Results{s.List.Struct(i)}
}

func (s Repo_configDoc_Results_List) Set(i int, v Repo_configDoc_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_configDoc_Results_List) String() string {
	str, _ := text.MarshalList(0xa34213f24153536b, s.List)
	return str
}

// Repo_configDoc_Results_Promise is a wrapper for a Repo_configDoc_Results promised by a client call.
type Repo_configDoc_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_configDoc_Results_Promise) Struct() (Repo_configDoc_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_configDoc_Results{s}, err
}

func (p Repo_configDoc_Results_Promise) Desc() ConfigEntry_Promise {
	return ConfigEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo_become_Params struct{ capnp.Struct }

// Repo_become_Params_TypeID is the unique identifier for the type Repo_become_Params.
const Repo_become_Params_TypeID = 0xe75c9c74c2bacb82

func NewRepo_become_Params(s *capnp.Segment) (Repo_become_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_become_Params{st}, err
}

func NewRootRepo_become_Params(s *capnp.Segment) (Repo_become_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_become_Params{st}, err
}

func ReadRootRepo_become_Params(msg *capnp.Message) (Repo_become_Params, error) {
	root, err := msg.RootPtr()
	return Repo_become_Params{root.Struct()}, err
}

func (s Repo_become_Params) String() string {
	str, _ := text.Marshal(0xe75c9c74c2bacb82, s.Struct)
	return str
}

func (s Repo_become_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_become_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_become_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_become_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_become_Params_List is a list of Repo_become_Params.
type Repo_become_Params_List struct{ capnp.List }

// NewRepo_become_Params creates a new list of Repo_become_Params.
func NewRepo_become_Params_List(s *capnp.Segment, sz int32) (Repo_become_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_become_Params_List{l}, err
}

func (s Repo_become_Params_List) At(i int) Repo_become_Params {
	return Repo_become_Params{s.List.Struct(i)}
}

func (s Repo_become_Params_List) Set(i int, v Repo_become_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_become_Params_List) String() string {
	str, _ := text.MarshalList(0xe75c9c74c2bacb82, s.List)
	return str
}

// Repo_become_Params_Promise is a wrapper for a Repo_become_Params promised by a client call.
type Repo_become_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_become_Params_Promise) Struct() (Repo_become_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_become_Params{s}, err
}

type Repo_become_Results struct{ capnp.Struct }

// Repo_become_Results_TypeID is the unique identifier for the type Repo_become_Results.
const Repo_become_Results_TypeID = 0xeadaf2b11fded490

func NewRepo_become_Results(s *capnp.Segment) (Repo_become_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_become_Results{st}, err
}

func NewRootRepo_become_Results(s *capnp.Segment) (Repo_become_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_become_Results{st}, err
}

func ReadRootRepo_become_Results(msg *capnp.Message) (Repo_become_Results, error) {
	root, err := msg.RootPtr()
	return Repo_become_Results{root.Struct()}, err
}

func (s Repo_become_Results) String() string {
	str, _ := text.Marshal(0xeadaf2b11fded490, s.Struct)
	return str
}

// Repo_become_Results_List is a list of Repo_become_Results.
type Repo_become_Results_List struct{ capnp.List }

// NewRepo_become_Results creates a new list of Repo_become_Results.
func NewRepo_become_Results_List(s *capnp.Segment, sz int32) (Repo_become_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_become_Results_List{l}, err
}

func (s Repo_become_Results_List) At(i int) Repo_become_Results {
	return Repo_become_Results{s.List.Struct(i)}
}

func (s Repo_become_Results_List) Set(i int, v Repo_become_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_become_Results_List) String() string {
	str, _ := text.MarshalList(0xeadaf2b11fded490, s.List)
	return str
}

// Repo_become_Results_Promise is a wrapper for a Repo_become_Results promised by a client call.
type Repo_become_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_become_Results_Promise) Struct() (Repo_become_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_become_Results{s}, err
}

type Repo_fstabAdd_Params struct{ capnp.Struct }

// Repo_fstabAdd_Params_TypeID is the unique identifier for the type Repo_fstabAdd_Params.
const Repo_fstabAdd_Params_TypeID = 0xd1afceb8146949d4

func NewRepo_fstabAdd_Params(s *capnp.Segment) (Repo_fstabAdd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Repo_fstabAdd_Params{st}, err
}

func NewRootRepo_fstabAdd_Params(s *capnp.Segment) (Repo_fstabAdd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Repo_fstabAdd_Params{st}, err
}

func ReadRootRepo_fstabAdd_Params(msg *capnp.Message) (Repo_fstabAdd_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabAdd_Params{root.Struct()}, err
}

func (s Repo_fstabAdd_Params) String() string {
	str, _ := text.Marshal(0xd1afceb8146949d4, s.Struct)
	return str
}

func (s Repo_fstabAdd_Params) MountName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_fstabAdd_Params) HasMountName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) MountNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_fstabAdd_Params) SetMountName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Repo_fstabAdd_Params) MountPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Repo_fstabAdd_Params) HasMountPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) MountPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Repo_fstabAdd_Params) SetMountPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Repo_fstabAdd_Params) Options() (MountOptions, error) {
	p, err := s.Struct.Ptr(2)
	return MountOptions{Struct: p.Struct()}, err
}

func (s Repo_fstabAdd_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Repo_fstabAdd_Params) SetOptions(v MountOptions) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated MountOptions struct, preferring placement in s's segment.
func (s Repo_fstabAdd_Params) NewOptions() (MountOptions, error) {
	ss, err := NewMountOptions(s.Struct.Segment())
	if err != nil {
		return MountOptions{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Repo_fstabAdd_Params_List is a list of Repo_fstabAdd_Params.
type Repo_fstabAdd_Params_List struct{ capnp.List }

// NewRepo_fstabAdd_Params creates a new list of Repo_fstabAdd_Params.
func NewRepo_fstabAdd_Params_List(s *capnp.Segment, sz int32) (Repo_fstabAdd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Repo_fstabAdd_Params_List{l}, err
}

func (s Repo_fstabAdd_Params_List) At(i int) Repo_fstabAdd_Params {
	return Repo_fstabAdd_Params{s.List.Struct(i)}
}

func (s Repo_fstabAdd_Params_List) Set(i int, v Repo_fstabAdd_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabAdd_Params_List) String() string {
	str, _ := text.MarshalList(0xd1afceb8146949d4, s.List)
	return str
}

// Repo_fstabAdd_Params_Promise is a wrapper for a Repo_fstabAdd_Params promised by a client call.
type Repo_fstabAdd_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabAdd_Params_Promise) Struct() (Repo_fstabAdd_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabAdd_Params{s}, err
}

func (p Repo_fstabAdd_Params_Promise) Options() MountOptions_Promise {
	return MountOptions_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Repo_fstabAdd_Results struct{ capnp.Struct }

// Repo_fstabAdd_Results_TypeID is the unique identifier for the type Repo_fstabAdd_Results.
const Repo_fstabAdd_Results_TypeID = 0xbb83332a93ffdcad

func NewRepo_fstabAdd_Results(s *capnp.Segment) (Repo_fstabAdd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabAdd_Results{st}, err
}

func NewRootRepo_fstabAdd_Results(s *capnp.Segment) (Repo_fstabAdd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabAdd_Results{st}, err
}

func ReadRootRepo_fstabAdd_Results(msg *capnp.Message) (Repo_fstabAdd_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabAdd_Results{root.Struct()}, err
}

func (s Repo_fstabAdd_Results) String() string {
	str, _ := text.Marshal(0xbb83332a93ffdcad, s.Struct)
	return str
}

// Repo_fstabAdd_Results_List is a list of Repo_fstabAdd_Results.
type Repo_fstabAdd_Results_List struct{ capnp.List }

// NewRepo_fstabAdd_Results creates a new list of Repo_fstabAdd_Results.
func NewRepo_fstabAdd_Results_List(s *capnp.Segment, sz int32) (Repo_fstabAdd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabAdd_Results_List{l}, err
}

func (s Repo_fstabAdd_Results_List) At(i int) Repo_fstabAdd_Results {
	return Repo_fstabAdd_Results{s.List.Struct(i)}
}

func (s Repo_fstabAdd_Results_List) Set(i int, v Repo_fstabAdd_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabAdd_Results_List) String() string {
	str, _ := text.MarshalList(0xbb83332a93ffdcad, s.List)
	return str
}

// Repo_fstabAdd_Results_Promise is a wrapper for a Repo_fstabAdd_Results promised by a client call.
type Repo_fstabAdd_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabAdd_Results_Promise) Struct() (Repo_fstabAdd_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabAdd_Results{s}, err
}

type Repo_fstabRemove_Params struct{ capnp.Struct }

// Repo_fstabRemove_Params_TypeID is the unique identifier for the type Repo_fstabRemove_Params.
const Repo_fstabRemove_Params_TypeID = 0x86d95afae10f0893

func NewRepo_fstabRemove_Params(s *capnp.Segment) (Repo_fstabRemove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabRemove_Params{st}, err
}

func NewRootRepo_fstabRemove_Params(s *capnp.Segment) (Repo_fstabRemove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabRemove_Params{st}, err
}

func ReadRootRepo_fstabRemove_Params(msg *capnp.Message) (Repo_fstabRemove_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabRemove_Params{root.Struct()}, err
}

func (s Repo_fstabRemove_Params) String() string {
	str, _ := text.Marshal(0x86d95afae10f0893, s.Struct)
	return str
}

func (s Repo_fstabRemove_Params) MountName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Repo_fstabRemove_Params) HasMountName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabRemove_Params) MountNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Repo_fstabRemove_Params) SetMountName(v string) error {
	return s.Struct.SetText(0, v)
}

// Repo_fstabRemove_Params_List is a list of Repo_fstabRemove_Params.
type Repo_fstabRemove_Params_List struct{ capnp.List }

// NewRepo_fstabRemove_Params creates a new list of Repo_fstabRemove_Params.
func NewRepo_fstabRemove_Params_List(s *capnp.Segment, sz int32) (Repo_fstabRemove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_fstabRemove_Params_List{l}, err
}

func (s Repo_fstabRemove_Params_List) At(i int) Repo_fstabRemove_Params {
	return Repo_fstabRemove_Params{s.List.Struct(i)}
}

func (s Repo_fstabRemove_Params_List) Set(i int, v Repo_fstabRemove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabRemove_Params_List) String() string {
	str, _ := text.MarshalList(0x86d95afae10f0893, s.List)
	return str
}

// Repo_fstabRemove_Params_Promise is a wrapper for a Repo_fstabRemove_Params promised by a client call.
type Repo_fstabRemove_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabRemove_Params_Promise) Struct() (Repo_fstabRemove_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabRemove_Params{s}, err
}

type Repo_fstabRemove_Results struct{ capnp.Struct }

// Repo_fstabRemove_Results_TypeID is the unique identifier for the type Repo_fstabRemove_Results.
const Repo_fstabRemove_Results_TypeID = 0xc3fcefc580775485

func NewRepo_fstabRemove_Results(s *capnp.Segment) (Repo_fstabRemove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabRemove_Results{st}, err
}

func NewRootRepo_fstabRemove_Results(s *capnp.Segment) (Repo_fstabRemove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabRemove_Results{st}, err
}

func ReadRootRepo_fstabRemove_Results(msg *capnp.Message) (Repo_fstabRemove_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabRemove_Results{root.Struct()}, err
}

func (s Repo_fstabRemove_Results) String() string {
	str, _ := text.Marshal(0xc3fcefc580775485, s.Struct)
	return str
}

// Repo_fstabRemove_Results_List is a list of Repo_fstabRemove_Results.
type Repo_fstabRemove_Results_List struct{ capnp.List }

// NewRepo_fstabRemove_Results creates a new list of Repo_fstabRemove_Results.
func NewRepo_fstabRemove_Results_List(s *capnp.Segment, sz int32) (Repo_fstabRemove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabRemove_Results_List{l}, err
}

func (s Repo_fstabRemove_Results_List) At(i int) Repo_fstabRemove_Results {
	return Repo_fstabRemove_Results{s.List.Struct(i)}
}

func (s Repo_fstabRemove_Results_List) Set(i int, v Repo_fstabRemove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabRemove_Results_List) String() string {
	str, _ := text.MarshalList(0xc3fcefc580775485, s.List)
	return str
}

// Repo_fstabRemove_Results_Promise is a wrapper for a Repo_fstabRemove_Results promised by a client call.
type Repo_fstabRemove_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabRemove_Results_Promise) Struct() (Repo_fstabRemove_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabRemove_Results{s}, err
}

type Repo_fstabApply_Params struct{ capnp.Struct }

// Repo_fstabApply_Params_TypeID is the unique identifier for the type Repo_fstabApply_Params.
const Repo_fstabApply_Params_TypeID = 0xc7e5f661ac57ebb2

func NewRepo_fstabApply_Params(s *capnp.Segment) (Repo_fstabApply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Params{st}, err
}

func NewRootRepo_fstabApply_Params(s *capnp.Segment) (Repo_fstabApply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Params{st}, err
}

func ReadRootRepo_fstabApply_Params(msg *capnp.Message) (Repo_fstabApply_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabApply_Params{root.Struct()}, err
}

func (s Repo_fstabApply_Params) String() string {
	str, _ := text.Marshal(0xc7e5f661ac57ebb2, s.Struct)
	return str
}

// Repo_fstabApply_Params_List is a list of Repo_fstabApply_Params.
type Repo_fstabApply_Params_List struct{ capnp.List }

// NewRepo_fstabApply_Params creates a new list of Repo_fstabApply_Params.
func NewRepo_fstabApply_Params_List(s *capnp.Segment, sz int32) (Repo_fstabApply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabApply_Params_List{l}, err
}

func (s Repo_fstabApply_Params_List) At(i int) Repo_fstabApply_Params {
	return Repo_fstabApply_Params{s.List.Struct(i)}
}

func (s Repo_fstabApply_Params_List) Set(i int, v Repo_fstabApply_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabApply_Params_List) String() string {
	str, _ := text.MarshalList(0xc7e5f661ac57ebb2, s.List)
	return str
}

// Repo_fstabApply_Params_Promise is a wrapper for a Repo_fstabApply_Params promised by a client call.
type Repo_fstabApply_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabApply_Params_Promise) Struct() (Repo_fstabApply_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabApply_Params{s}, err
}

type Repo_fstabApply_Results struct{ capnp.Struct }

// Repo_fstabApply_Results_TypeID is the unique identifier for the type Repo_fstabApply_Results.
const Repo_fstabApply_Results_TypeID = 0xb5bf271ecf3bc074

func NewRepo_fstabApply_Results(s *capnp.Segment) (Repo_fstabApply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Results{st}, err
}

func NewRootRepo_fstabApply_Results(s *capnp.Segment) (Repo_fstabApply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabApply_Results{st}, err
}

func ReadRootRepo_fstabApply_Results(msg *capnp.Message) (Repo_fstabApply_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabApply_Results{root.Struct()}, err
}

func (s Repo_fstabApply_Results) String() string {
	str, _ := text.Marshal(0xb5bf271ecf3bc074, s.Struct)
	return str
}

// Repo_fstabApply_Results_List is a list of Repo_fstabApply_Results.
type Repo_fstabApply_Results_List struct{ capnp.List }

// NewRepo_fstabApply_Results creates a new list of Repo_fstabApply_Results.
func NewRepo_fstabApply_Results_List(s *capnp.Segment, sz int32) (Repo_fstabApply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabApply_Results_List{l}, err
}

func (s Repo_fstabApply_Results_List) At(i int) Repo_fstabApply_Results {
	return Repo_fstabApply_Results{s.List.Struct(i)}
}

func (s Repo_fstabApply_Results_List) Set(i int, v Repo_fstabApply_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabApply_Results_List) String() string {
	str, _ := text.MarshalList(0xb5bf271ecf3bc074, s.List)
	return str
}

// Repo_fstabApply_Results_Promise is a wrapper for a Repo_fstabApply_Results promised by a client call.
type Repo_fstabApply_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabApply_Results_Promise) Struct() (Repo_fstabApply_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabApply_Results{s}, err
}

type Repo_fstabList_Params struct{ capnp.Struct }

// Repo_fstabList_Params_TypeID is the unique identifier for the type Repo_fstabList_Params.
const Repo_fstabList_Params_TypeID = 0xd7315a3b3f92aa4a

func NewRepo_fstabList_Params(s *capnp.Segment) (Repo_fstabList_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabList_Params{st}, err
}

func NewRootRepo_fstabList_Params(s *capnp.Segment) (Repo_fstabList_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabList_Params{st}, err
}

func ReadRootRepo_fstabList_Params(msg *capnp.Message) (Repo_fstabList_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabList_Params{root.Struct()}, err
}

func (s Repo_fstabList_Params) String() string {
	str, _ := text.Marshal(0xd7315a3b3f92aa4a, s.Struct)
	return str
}

// Repo_fstabList_Params_List is a list of Repo_fstabList_Params.
type Repo_fstabList_Params_List struct{ capnp.List }

// NewRepo_fstabList_Params creates a new list of Repo_fstabList_Params.
func NewRepo_fstabList_Params_List(s *capnp.Segment, sz int32) (Repo_fstabList_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabList_Params_List{l}, err
}

func (s Repo_fstabList_Params_List) At(i int) Repo_fstabList_Params {
	return Repo_fstabList_Params{s.List.Struct(i)}
}

func (s Repo_fstabList_Params_List) Set(i int, v Repo_fstabList_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabList_Params_List) String() string {
	str, _ := text.MarshalList(0xd7315a3b3f92aa4a, s.List)
	return str
}

// Repo_fstabList_Params_Promise is a wrapper for a Repo_fstabList_Params promised by a client call.
type Repo_fstabList_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabList_Params_Promise) Struct() (Repo_fstabList_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabList_Params{s}, err
}

type Repo_fstabList_Results struct{ capnp.Struct }

// Repo_fstabList_Results_TypeID is the unique identifier for the type Repo_fstabList_Results.
const Repo_fstabList_Results_TypeID = 0xc44d12b3aee49f34

func NewRepo_fstabList_Results(s *capnp.Segment) (Repo_fstabList_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabList_Results{st}, err
}

func NewRootRepo_fstabList_Results(s *capnp.Segment) (Repo_fstabList_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_fstabList_Results{st}, err
}

func ReadRootRepo_fstabList_Results(msg *capnp.Message) (Repo_fstabList_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabList_Results{root.Struct()}, err
}

func (s Repo_fstabList_Results) String() string {
	str, _ := text.Marshal(0xc44d12b3aee49f34, s.Struct)
	return str
}

func (s Repo_fstabList_Results) Mounts() (FsTabEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return FsTabEntry_List{List: p.List()}, err
}

func (s Repo_fstabList_Results) HasMounts() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_fstabList_Results) SetMounts(v FsTabEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMounts sets the mounts field to a newly
// allocated FsTabEntry_List, preferring placement in s's segment.
func (s Repo_fstabList_Results) NewMounts(n int32) (FsTabEntry_List, error) {
	l, err := NewFsTabEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return FsTabEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Repo_fstabList_Results_List is a list of Repo_fstabList_Results.
type Repo_fstabList_Results_List struct{ capnp.List }

// NewRepo_fstabList_Results creates a new list of Repo_fstabList_Results.
func NewRepo_fstabList_Results_List(s *capnp.Segment, sz int32) (Repo_fstabList_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_fstabList_Results_List{l}, err
}

func (s Repo_fstabList_Results_List) At(i int) Repo_fstabList_Results {
	return Repo_fstabList_Results{s.List.Struct(i)}
}

func (s Repo_fstabList_Results_List) Set(i int, v Repo_fstabList_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabList_Results_List) String() string {
	str, _ := text.MarshalList(0xc44d12b3aee49f34, s.List)
	return str
}

// Repo_fstabList_Results_Promise is a wrapper for a Repo_fstabList_Results promised by a client call.
type Repo_fstabList_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabList_Results_Promise) Struct() (Repo_fstabList_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabList_Results{s}, err
}

type Repo_fstabUnmountAll_Params struct{ capnp.Struct }

// Repo_fstabUnmountAll_Params_TypeID is the unique identifier for the type Repo_fstabUnmountAll_Params.
const Repo_fstabUnmountAll_Params_TypeID = 0xbbec523e9fc1abfc

func NewRepo_fstabUnmountAll_Params(s *capnp.Segment) (Repo_fstabUnmountAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Params{st}, err
}

func NewRootRepo_fstabUnmountAll_Params(s *capnp.Segment) (Repo_fstabUnmountAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Params{st}, err
}

func ReadRootRepo_fstabUnmountAll_Params(msg *capnp.Message) (Repo_fstabUnmountAll_Params, error) {
	root, err := msg.RootPtr()
	return Repo_fstabUnmountAll_Params{root.Struct()}, err
}

func (s Repo_fstabUnmountAll_Params) String() string {
	str, _ := text.Marshal(0xbbec523e9fc1abfc, s.Struct)
	return str
}

// Repo_fstabUnmountAll_Params_List is a list of Repo_fstabUnmountAll_Params.
type Repo_fstabUnmountAll_Params_List struct{ capnp.List }

// NewRepo_fstabUnmountAll_Params creates a new list of Repo_fstabUnmountAll_Params.
func NewRepo_fstabUnmountAll_Params_List(s *capnp.Segment, sz int32) (Repo_fstabUnmountAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabUnmountAll_Params_List{l}, err
}

func (s Repo_fstabUnmountAll_Params_List) At(i int) Repo_fstabUnmountAll_Params {
	return Repo_fstabUnmountAll_Params{s.List.Struct(i)}
}

func (s Repo_fstabUnmountAll_Params_List) Set(i int, v Repo_fstabUnmountAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabUnmountAll_Params_List) String() string {
	str, _ := text.MarshalList(0xbbec523e9fc1abfc, s.List)
	return str
}

// Repo_fstabUnmountAll_Params_Promise is a wrapper for a Repo_fstabUnmountAll_Params promised by a client call.
type Repo_fstabUnmountAll_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabUnmountAll_Params_Promise) Struct() (Repo_fstabUnmountAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabUnmountAll_Params{s}, err
}

type Repo_fstabUnmountAll_Results struct{ capnp.Struct }

// Repo_fstabUnmountAll_Results_TypeID is the unique identifier for the type Repo_fstabUnmountAll_Results.
const Repo_fstabUnmountAll_Results_TypeID = 0x8ae5aae9653b7b02

func NewRepo_fstabUnmountAll_Results(s *capnp.Segment) (Repo_fstabUnmountAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Results{st}, err
}

func NewRootRepo_fstabUnmountAll_Results(s *capnp.Segment) (Repo_fstabUnmountAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_fstabUnmountAll_Results{st}, err
}

func ReadRootRepo_fstabUnmountAll_Results(msg *capnp.Message) (Repo_fstabUnmountAll_Results, error) {
	root, err := msg.RootPtr()
	return Repo_fstabUnmountAll_Results{root.Struct()}, err
}

func (s Repo_fstabUnmountAll_Results) String() string {
	str, _ := text.Marshal(0x8ae5aae9653b7b02, s.Struct)
	return str
}

// Repo_fstabUnmountAll_Results_List is a list of Repo_fstabUnmountAll_Results.
type Repo_fstabUnmountAll_Results_List struct{ capnp.List }

// NewRepo_fstabUnmountAll_Results creates a new list of Repo_fstabUnmountAll_Results.
func NewRepo_fstabUnmountAll_Results_List(s *capnp.Segment, sz int32) (Repo_fstabUnmountAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_fstabUnmountAll_Results_List{l}, err
}

func (s Repo_fstabUnmountAll_Results_List) At(i int) Repo_fstabUnmountAll_Results {
	return Repo_fstabUnmountAll_Results{s.List.Struct(i)}
}

func (s Repo_fstabUnmountAll_Results_List) Set(i int, v Repo_fstabUnmountAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_fstabUnmountAll_Results_List) String() string {
	str, _ := text.MarshalList(0x8ae5aae9653b7b02, s.List)
	return str
}

// Repo_fstabUnmountAll_Results_Promise is a wrapper for a Repo_fstabUnmountAll_Results promised by a client call.
type Repo_fstabUnmountAll_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_fstabUnmountAll_Results_Promise) Struct() (Repo_fstabUnmountAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_fstabUnmountAll_Results{s}, err
}

type Repo_version_Params struct{ capnp.Struct }

// Repo_version_Params_TypeID is the unique identifier for the type Repo_version_Params.
const Repo_version_Params_TypeID = 0x98eadc167523156e

func NewRepo_version_Params(s *capnp.Segment) (Repo_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_version_Params{st}, err
}

func NewRootRepo_version_Params(s *capnp.Segment) (Repo_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_version_Params{st}, err
}

func ReadRootRepo_version_Params(msg *capnp.Message) (Repo_version_Params, error) {
	root, err := msg.RootPtr()
	return Repo_version_Params{root.Struct()}, err
}

func (s Repo_version_Params) String() string {
	str, _ := text.Marshal(0x98eadc167523156e, s.Struct)
	return str
}

// Repo_version_Params_List is a list of Repo_version_Params.
type Repo_version_Params_List struct{ capnp.List }

// NewRepo_version_Params creates a new list of Repo_version_Params.
func NewRepo_version_Params_List(s *capnp.Segment, sz int32) (Repo_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_version_Params_List{l}, err
}

func (s Repo_version_Params_List) At(i int) Repo_version_Params {
	return Repo_version_Params{s.List.Struct(i)}
}

func (s Repo_version_Params_List) Set(i int, v Repo_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_version_Params_List) String() string {
	str, _ := text.MarshalList(0x98eadc167523156e, s.List)
	return str
}

// Repo_version_Params_Promise is a wrapper for a Repo_version_Params promised by a client call.
type Repo_version_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_version_Params_Promise) Struct() (Repo_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_version_Params{s}, err
}

type Repo_version_Results struct{ capnp.Struct }

// Repo_version_Results_TypeID is the unique identifier for the type Repo_version_Results.
const Repo_version_Results_TypeID = 0xafe329bc8cad8f74

func NewRepo_version_Results(s *capnp.Segment) (Repo_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_version_Results{st}, err
}

func NewRootRepo_version_Results(s *capnp.Segment) (Repo_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Repo_version_Results{st}, err
}

func ReadRootRepo_version_Results(msg *capnp.Message) (Repo_version_Results, error) {
	root, err := msg.RootPtr()
	return Repo_version_Results{root.Struct()}, err
}

func (s Repo_version_Results) String() string {
	str, _ := text.Marshal(0xafe329bc8cad8f74, s.Struct)
	return str
}

func (s Repo_version_Results) Version() (Version, error) {
	p, err := s.Struct.Ptr(0)
	return Version{Struct: p.Struct()}, err
}

func (s Repo_version_Results) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Repo_version_Results) SetVersion(v Version) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVersion sets the version field to a newly
// allocated Version struct, preferring placement in s's segment.
func (s Repo_version_Results) NewVersion() (Version, error) {
	ss, err := NewVersion(s.Struct.Segment())
	if err != nil {
		return Version{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Repo_version_Results_List is a list of Repo_version_Results.
type Repo_version_Results_List struct{ capnp.List }

// NewRepo_version_Results creates a new list of Repo_version_Results.
func NewRepo_version_Results_List(s *capnp.Segment, sz int32) (Repo_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Repo_version_Results_List{l}, err
}

func (s Repo_version_Results_List) At(i int) Repo_version_Results {
	return Repo_version_Results{s.List.Struct(i)}
}

func (s Repo_version_Results_List) Set(i int, v Repo_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_version_Results_List) String() string {
	str, _ := text.MarshalList(0xafe329bc8cad8f74, s.List)
	return str
}

// Repo_version_Results_Promise is a wrapper for a Repo_version_Results promised by a client call.
type Repo_version_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_version_Results_Promise) Struct() (Repo_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_version_Results{s}, err
}

func (p Repo_version_Results_Promise) Version() Version_Promise {
	return Version_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Repo_waitForInit_Params struct{ capnp.Struct }

// Repo_waitForInit_Params_TypeID is the unique identifier for the type Repo_waitForInit_Params.
const Repo_waitForInit_Params_TypeID = 0xac8fbc382ae513de

func NewRepo_waitForInit_Params(s *capnp.Segment) (Repo_waitForInit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Params{st}, err
}

func NewRootRepo_waitForInit_Params(s *capnp.Segment) (Repo_waitForInit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Params{st}, err
}

func ReadRootRepo_waitForInit_Params(msg *capnp.Message) (Repo_waitForInit_Params, error) {
	root, err := msg.RootPtr()
	return Repo_waitForInit_Params{root.Struct()}, err
}

func (s Repo_waitForInit_Params) String() string {
	str, _ := text.Marshal(0xac8fbc382ae513de, s.Struct)
	return str
}

// Repo_waitForInit_Params_List is a list of Repo_waitForInit_Params.
type Repo_waitForInit_Params_List struct{ capnp.List }

// NewRepo_waitForInit_Params creates a new list of Repo_waitForInit_Params.
func NewRepo_waitForInit_Params_List(s *capnp.Segment, sz int32) (Repo_waitForInit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_waitForInit_Params_List{l}, err
}

func (s Repo_waitForInit_Params_List) At(i int) Repo_waitForInit_Params {
	return Repo_waitForInit_Params{s.List.Struct(i)}
}

func (s Repo_waitForInit_Params_List) Set(i int, v Repo_waitForInit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_waitForInit_Params_List) String() string {
	str, _ := text.MarshalList(0xac8fbc382ae513de, s.List)
	return str
}

// Repo_waitForInit_Params_Promise is a wrapper for a Repo_waitForInit_Params promised by a client call.
type Repo_waitForInit_Params_Promise struct{ *capnp.Pipeline }

func (p Repo_waitForInit_Params_Promise) Struct() (Repo_waitForInit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Repo_waitForInit_Params{s}, err
}

type Repo_waitForInit_Results struct{ capnp.Struct }

// Repo_waitForInit_Results_TypeID is the unique identifier for the type Repo_waitForInit_Results.
const Repo_waitForInit_Results_TypeID = 0x96fe51446ad697f9

func NewRepo_waitForInit_Results(s *capnp.Segment) (Repo_waitForInit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Results{st}, err
}

func NewRootRepo_waitForInit_Results(s *capnp.Segment) (Repo_waitForInit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Repo_waitForInit_Results{st}, err
}

func ReadRootRepo_waitForInit_Results(msg *capnp.Message) (Repo_waitForInit_Results, error) {
	root, err := msg.RootPtr()
	return Repo_waitForInit_Results{root.Struct()}, err
}

func (s Repo_waitForInit_Results) String() string {
	str, _ := text.Marshal(0x96fe51446ad697f9, s.Struct)
	return str
}

// Repo_waitForInit_Results_List is a list of Repo_waitForInit_Results.
type Repo_waitForInit_Results_List struct{ capnp.List }

// NewRepo_waitForInit_Results creates a new list of Repo_waitForInit_Results.
func NewRepo_waitForInit_Results_List(s *capnp.Segment, sz int32) (Repo_waitForInit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Repo_waitForInit_Results_List{l}, err
}

func (s Repo_waitForInit_Results_List) At(i int) Repo_waitForInit_Results {
	return Repo_waitForInit_Results{s.List.Struct(i)}
}

func (s Repo_waitForInit_Results_List) Set(i int, v Repo_waitForInit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Repo_waitForInit_Results_List) String() string {
	str, _ := text.MarshalList(0x96fe51446ad697f9, s.List)
	return str
}

// Repo_waitForInit_Results_Promise is a wrapper for a Repo_waitForInit_Results promised by a client call.
type Repo_waitForInit_Results_Promise struct{ *capnp.Pipeline }

func (p Repo_waitForInit_Results_Promise) Struct() (Repo_waitForInit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Repo_waitForInit_Results{s}, err
}

type Net struct{ Client capnp.Client }

// Net_TypeID is the unique identifier for the type Net.
const Net_TypeID = 0xaa133a60be5a7d01

func (c Net) RemoteAdd(ctx context.Context, params func(Net_remoteAdd_Params) error, opts ...capnp.CallOption) Net_remoteAdd_Results_Promise {
	if c.Client == nil {
		return Net_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteAdd_Params{Struct: s}) }
	}
	return Net_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteRm(ctx context.Context, params func(Net_remoteRm_Params) error, opts ...capnp.CallOption) Net_remoteRm_Results_Promise {
	if c.Client == nil {
		return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteRm_Params{Struct: s}) }
	}
	return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteLs(ctx context.Context, params func(Net_remoteLs_Params) error, opts ...capnp.CallOption) Net_remoteLs_Results_Promise {
	if c.Client == nil {
		return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteLs_Params{Struct: s}) }
	}
	return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteSave(ctx context.Context, params func(Net_remoteSave_Params) error, opts ...capnp.CallOption) Net_remoteSave_Results_Promise {
	if c.Client == nil {
		return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteSave_Params{Struct: s}) }
	}
	return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemotePing(ctx context.Context, params func(Net_remotePing_Params) error, opts ...capnp.CallOption) Net_remotePing_Results_Promise {
	if c.Client == nil {
		return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remotePing_Params{Struct: s}) }
	}
	return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) RemoteClear(ctx context.Context, params func(Net_remoteClear_Params) error, opts ...capnp.CallOption) Net_remoteClear_Results_Promise {
	if c.Client == nil {
		return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteClear_Params{Struct: s}) }
	}
	return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) NetLocate(ctx context.Context, params func(Net_netLocate_Params) error, opts ...capnp.CallOption) Net_netLocate_Results_Promise {
	if c.Client == nil {
		return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocate_Params{Struct: s}) }
	}
	return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) NetLocateNext(ctx context.Context, params func(Net_netLocateNext_Params) error, opts ...capnp.CallOption) Net_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocateNext_Params{Struct: s}) }
	}
	return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Whoami(ctx context.Context, params func(Net_whoami_Params) error, opts ...capnp.CallOption) Net_whoami_Results_Promise {
	if c.Client == nil {
		return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_whoami_Params{Struct: s}) }
	}
	return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Connect(ctx context.Context, params func(Net_connect_Params) error, opts ...capnp.CallOption) Net_connect_Results_Promise {
	if c.Client == nil {
		return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_connect_Params{Struct: s}) }
	}
	return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) Disconnect(ctx context.Context, params func(Net_disconnect_Params) error, opts ...capnp.CallOption) Net_disconnect_Results_Promise {
	if c.Client == nil {
		return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_disconnect_Params{Struct: s}) }
	}
	return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Net) OnlinePeers(ctx context.Context, params func(Net_onlinePeers_Params) error, opts ...capnp.CallOption) Net_onlinePeers_Results_Promise {
	if c.Client == nil {
		return Net_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "onlinePeers",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_onlinePeers_Params{Struct: s}) }
	}
	return Net_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Net_Server interface {
	RemoteAdd(Net_remoteAdd) error

	RemoteRm(Net_remoteRm) error

	RemoteLs(Net_remoteLs) error

	RemoteSave(Net_remoteSave) error

	RemotePing(Net_remotePing) error

	RemoteClear(Net_remoteClear) error

	NetLocate(Net_netLocate) error

	NetLocateNext(Net_netLocateNext) error

	Whoami(Net_whoami) error

	Connect(Net_connect) error

	Disconnect(Net_disconnect) error

	OnlinePeers(Net_onlinePeers) error
}

func Net_ServerToClient(s Net_Server) Net {
	c, _ := s.(server.Closer)
	return Net{Client: server.New(Net_Methods(nil, s), c)}
}

func Net_Methods(methods []server.Method, s Net_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteAdd{c, opts, Net_remoteAdd_Params{Struct: p}, Net_remoteAdd_Results{Struct: r}}
			return s.RemoteAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteRm{c, opts, Net_remoteRm_Params{Struct: p}, Net_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteLs{c, opts, Net_remoteLs_Params{Struct: p}, Net_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteSave{c, opts, Net_remoteSave_Params{Struct: p}, Net_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remotePing{c, opts, Net_remotePing_Params{Struct: p}, Net_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteClear{c, opts, Net_remoteClear_Params{Struct: p}, Net_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocate{c, opts, Net_netLocate_Params{Struct: p}, Net_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocateNext{c, opts, Net_netLocateNext_Params{Struct: p}, Net_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_whoami{c, opts, Net_whoami_Params{Struct: p}, Net_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_connect{c, opts, Net_connect_Params{Struct: p}, Net_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_disconnect{c, opts, Net_disconnect_Params{Struct: p}, Net_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "onlinePeers",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_onlinePeers{c, opts, Net_onlinePeers_Params{Struct: p}, Net_onlinePeers_Results{Struct: r}}
			return s.OnlinePeers(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Net_remoteAdd holds the arguments for a server call to Net.remoteAdd.
type Net_remoteAdd struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteAdd_Params
	Results Net_remoteAdd_Results
}

// Net_remoteRm holds the arguments for a server call to Net.remoteRm.
type Net_remoteRm struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteRm_Params
	Results Net_remoteRm_Results
}

// Net_remoteLs holds the arguments for a server call to Net.remoteLs.
type Net_remoteLs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteLs_Params
	Results Net_remoteLs_Results
}

// Net_remoteSave holds the arguments for a server call to Net.remoteSave.
type Net_remoteSave struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteSave_Params
	Results Net_remoteSave_Results
}

// Net_remotePing holds the arguments for a server call to Net.remotePing.
type Net_remotePing struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remotePing_Params
	Results Net_remotePing_Results
}

// Net_remoteClear holds the arguments for a server call to Net.remoteClear.
type Net_remoteClear struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_remoteClear_Params
	Results Net_remoteClear_Results
}

// Net_netLocate holds the arguments for a server call to Net.netLocate.
type Net_netLocate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_netLocate_Params
	Results Net_netLocate_Results
}

// Net_netLocateNext holds the arguments for a server call to Net.netLocateNext.
type Net_netLocateNext struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_netLocateNext_Params
	Results Net_netLocateNext_Results
}

// Net_whoami holds the arguments for a server call to Net.whoami.
type Net_whoami struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_whoami_Params
	Results Net_whoami_Results
}

// Net_connect holds the arguments for a server call to Net.connect.
type Net_connect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_connect_Params
	Results Net_connect_Results
}

// Net_disconnect holds the arguments for a server call to Net.disconnect.
type Net_disconnect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_disconnect_Params
	Results Net_disconnect_Results
}

// Net_onlinePeers holds the arguments for a server call to Net.onlinePeers.
type Net_onlinePeers struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Net_onlinePeers_Params
	Results Net_onlinePeers_Results
}

type Net_remoteAdd_Params struct{ capnp.Struct }

// Net_remoteAdd_Params_TypeID is the unique identifier for the type Net_remoteAdd_Params.
const Net_remoteAdd_Params_TypeID = 0xf5c310bd5e2aa138

func NewNet_remoteAdd_Params(s *capnp.Segment) (Net_remoteAdd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteAdd_Params{st}, err
}

func NewRootNet_remoteAdd_Params(s *capnp.Segment) (Net_remoteAdd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteAdd_Params{st}, err
}

func ReadRootNet_remoteAdd_Params(msg *capnp.Message) (Net_remoteAdd_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteAdd_Params{root.Struct()}, err
}

func (s Net_remoteAdd_Params) String() string {
	str, _ := text.Marshal(0xf5c310bd5e2aa138, s.Struct)
	return str
}

func (s Net_remoteAdd_Params) Remote() (Remote, error) {
	p, err := s.Struct.Ptr(0)
	return Remote{Struct: p.Struct()}, err
}

func (s Net_remoteAdd_Params) HasRemote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteAdd_Params) SetRemote(v Remote) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemote sets the remote field to a newly
// allocated Remote struct, preferring placement in s's segment.
func (s Net_remoteAdd_Params) NewRemote() (Remote, error) {
	ss, err := NewRemote(s.Struct.Segment())
	if err != nil {
		return Remote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_remoteAdd_Params_List is a list of Net_remoteAdd_Params.
type Net_remoteAdd_Params_List struct{ capnp.List }

// NewNet_remoteAdd_Params creates a new list of Net_remoteAdd_Params.
func NewNet_remoteAdd_Params_List(s *capnp.Segment, sz int32) (Net_remoteAdd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteAdd_Params_List{l}, err
}

func (s Net_remoteAdd_Params_List) At(i int) Net_remoteAdd_Params {
	return Net_remoteAdd_Params{s.List.Struct(i)}
}

func (s Net_remoteAdd_Params_List) Set(i int, v Net_remoteAdd_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteAdd_Params_List) String() string {
	str, _ := text.MarshalList(0xf5c310bd5e2aa138, s.List)
	return str
}

// Net_remoteAdd_Params_Promise is a wrapper for a Net_remoteAdd_Params promised by a client call.
type Net_remoteAdd_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteAdd_Params_Promise) Struct() (Net_remoteAdd_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteAdd_Params{s}, err
}

func (p Net_remoteAdd_Params_Promise) Remote() Remote_Promise {
	return Remote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_remoteAdd_Results struct{ capnp.Struct }

// Net_remoteAdd_Results_TypeID is the unique identifier for the type Net_remoteAdd_Results.
const Net_remoteAdd_Results_TypeID = 0xfcaa6dc30ba75197

func NewNet_remoteAdd_Results(s *capnp.Segment) (Net_remoteAdd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteAdd_Results{st}, err
}

func NewRootNet_remoteAdd_Results(s *capnp.Segment) (Net_remoteAdd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteAdd_Results{st}, err
}

func ReadRootNet_remoteAdd_Results(msg *capnp.Message) (Net_remoteAdd_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteAdd_Results{root.Struct()}, err
}

func (s Net_remoteAdd_Results) String() string {
	str, _ := text.Marshal(0xfcaa6dc30ba75197, s.Struct)
	return str
}

// Net_remoteAdd_Results_List is a list of Net_remoteAdd_Results.
type Net_remoteAdd_Results_List struct{ capnp.List }

// NewNet_remoteAdd_Results creates a new list of Net_remoteAdd_Results.
func NewNet_remoteAdd_Results_List(s *capnp.Segment, sz int32) (Net_remoteAdd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteAdd_Results_List{l}, err
}

func (s Net_remoteAdd_Results_List) At(i int) Net_remoteAdd_Results {
	return Net_remoteAdd_Results{s.List.Struct(i)}
}

func (s Net_remoteAdd_Results_List) Set(i int, v Net_remoteAdd_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteAdd_Results_List) String() string {
	str, _ := text.MarshalList(0xfcaa6dc30ba75197, s.List)
	return str
}

// Net_remoteAdd_Results_Promise is a wrapper for a Net_remoteAdd_Results promised by a client call.
type Net_remoteAdd_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteAdd_Results_Promise) Struct() (Net_remoteAdd_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteAdd_Results{s}, err
}

type Net_remoteRm_Params struct{ capnp.Struct }

// Net_remoteRm_Params_TypeID is the unique identifier for the type Net_remoteRm_Params.
const Net_remoteRm_Params_TypeID = 0xf485a561c31c83d2

func NewNet_remoteRm_Params(s *capnp.Segment) (Net_remoteRm_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteRm_Params{st}, err
}

func NewRootNet_remoteRm_Params(s *capnp.Segment) (Net_remoteRm_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteRm_Params{st}, err
}

func ReadRootNet_remoteRm_Params(msg *capnp.Message) (Net_remoteRm_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteRm_Params{root.Struct()}, err
}

func (s Net_remoteRm_Params) String() string {
	str, _ := text.Marshal(0xf485a561c31c83d2, s.Struct)
	return str
}

func (s Net_remoteRm_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_remoteRm_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteRm_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_remoteRm_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Net_remoteRm_Params_List is a list of Net_remoteRm_Params.
type Net_remoteRm_Params_List struct{ capnp.List }

// NewNet_remoteRm_Params creates a new list of Net_remoteRm_Params.
func NewNet_remoteRm_Params_List(s *capnp.Segment, sz int32) (Net_remoteRm_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteRm_Params_List{l}, err
}

func (s Net_remoteRm_Params_List) At(i int) Net_remoteRm_Params {
	return Net_remoteRm_Params{s.List.Struct(i)}
}

func (s Net_remoteRm_Params_List) Set(i int, v Net_remoteRm_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteRm_Params_List) String() string {
	str, _ := text.MarshalList(0xf485a561c31c83d2, s.List)
	return str
}

// Net_remoteRm_Params_Promise is a wrapper for a Net_remoteRm_Params promised by a client call.
type Net_remoteRm_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteRm_Params_Promise) Struct() (Net_remoteRm_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteRm_Params{s}, err
}

type Net_remoteRm_Results struct{ capnp.Struct }

// Net_remoteRm_Results_TypeID is the unique identifier for the type Net_remoteRm_Results.
const Net_remoteRm_Results_TypeID = 0xdb78f249dcc7b9f1

func NewNet_remoteRm_Results(s *capnp.Segment) (Net_remoteRm_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteRm_Results{st}, err
}

func NewRootNet_remoteRm_Results(s *capnp.Segment) (Net_remoteRm_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteRm_Results{st}, err
}

func ReadRootNet_remoteRm_Results(msg *capnp.Message) (Net_remoteRm_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteRm_Results{root.Struct()}, err
}

func (s Net_remoteRm_Results) String() string {
	str, _ := text.Marshal(0xdb78f249dcc7b9f1, s.Struct)
	return str
}

// Net_remoteRm_Results_List is a list of Net_remoteRm_Results.
type Net_remoteRm_Results_List struct{ capnp.List }

// NewNet_remoteRm_Results creates a new list of Net_remoteRm_Results.
func NewNet_remoteRm_Results_List(s *capnp.Segment, sz int32) (Net_remoteRm_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteRm_Results_List{l}, err
}

func (s Net_remoteRm_Results_List) At(i int) Net_remoteRm_Results {
	return Net_remoteRm_Results{s.List.Struct(i)}
}

func (s Net_remoteRm_Results_List) Set(i int, v Net_remoteRm_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteRm_Results_List) String() string {
	str, _ := text.MarshalList(0xdb78f249dcc7b9f1, s.List)
	return str
}

// Net_remoteRm_Results_Promise is a wrapper for a Net_remoteRm_Results promised by a client call.
type Net_remoteRm_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteRm_Results_Promise) Struct() (Net_remoteRm_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteRm_Results{s}, err
}

type Net_remoteLs_Params struct{ capnp.Struct }

// Net_remoteLs_Params_TypeID is the unique identifier for the type Net_remoteLs_Params.
const Net_remoteLs_Params_TypeID = 0xc18496cf650e6886

func NewNet_remoteLs_Params(s *capnp.Segment) (Net_remoteLs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteLs_Params{st}, err
}

func NewRootNet_remoteLs_Params(s *capnp.Segment) (Net_remoteLs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteLs_Params{st}, err
}

func ReadRootNet_remoteLs_Params(msg *capnp.Message) (Net_remoteLs_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteLs_Params{root.Struct()}, err
}

func (s Net_remoteLs_Params) String() string {
	str, _ := text.Marshal(0xc18496cf650e6886, s.Struct)
	return str
}

// Net_remoteLs_Params_List is a list of Net_remoteLs_Params.
type Net_remoteLs_Params_List struct{ capnp.List }

// NewNet_remoteLs_Params creates a new list of Net_remoteLs_Params.
func NewNet_remoteLs_Params_List(s *capnp.Segment, sz int32) (Net_remoteLs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteLs_Params_List{l}, err
}

func (s Net_remoteLs_Params_List) At(i int) Net_remoteLs_Params {
	return Net_remoteLs_Params{s.List.Struct(i)}
}

func (s Net_remoteLs_Params_List) Set(i int, v Net_remoteLs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteLs_Params_List) String() string {
	str, _ := text.MarshalList(0xc18496cf650e6886, s.List)
	return str
}

// Net_remoteLs_Params_Promise is a wrapper for a Net_remoteLs_Params promised by a client call.
type Net_remoteLs_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteLs_Params_Promise) Struct() (Net_remoteLs_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteLs_Params{s}, err
}

type Net_remoteLs_Results struct{ capnp.Struct }

// Net_remoteLs_Results_TypeID is the unique identifier for the type Net_remoteLs_Results.
const Net_remoteLs_Results_TypeID = 0xb2255c049c7bc42f

func NewNet_remoteLs_Results(s *capnp.Segment) (Net_remoteLs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteLs_Results{st}, err
}

func NewRootNet_remoteLs_Results(s *capnp.Segment) (Net_remoteLs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteLs_Results{st}, err
}

func ReadRootNet_remoteLs_Results(msg *capnp.Message) (Net_remoteLs_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteLs_Results{root.Struct()}, err
}

func (s Net_remoteLs_Results) String() string {
	str, _ := text.Marshal(0xb2255c049c7bc42f, s.Struct)
	return str
}

func (s Net_remoteLs_Results) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Net_remoteLs_Results) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteLs_Results) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Net_remoteLs_Results) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_remoteLs_Results_List is a list of Net_remoteLs_Results.
type Net_remoteLs_Results_List struct{ capnp.List }

// NewNet_remoteLs_Results creates a new list of Net_remoteLs_Results.
func NewNet_remoteLs_Results_List(s *capnp.Segment, sz int32) (Net_remoteLs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteLs_Results_List{l}, err
}

func (s Net_remoteLs_Results_List) At(i int) Net_remoteLs_Results {
	return Net_remoteLs_Results{s.List.Struct(i)}
}

func (s Net_remoteLs_Results_List) Set(i int, v Net_remoteLs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteLs_Results_List) String() string {
	str, _ := text.MarshalList(0xb2255c049c7bc42f, s.List)
	return str
}

// Net_remoteLs_Results_Promise is a wrapper for a Net_remoteLs_Results promised by a client call.
type Net_remoteLs_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteLs_Results_Promise) Struct() (Net_remoteLs_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteLs_Results{s}, err
}

type Net_remoteSave_Params struct{ capnp.Struct }

// Net_remoteSave_Params_TypeID is the unique identifier for the type Net_remoteSave_Params.
const Net_remoteSave_Params_TypeID = 0xc089763bca3e3f44

func NewNet_remoteSave_Params(s *capnp.Segment) (Net_remoteSave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteSave_Params{st}, err
}

func NewRootNet_remoteSave_Params(s *capnp.Segment) (Net_remoteSave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remoteSave_Params{st}, err
}

func ReadRootNet_remoteSave_Params(msg *capnp.Message) (Net_remoteSave_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteSave_Params{root.Struct()}, err
}

func (s Net_remoteSave_Params) String() string {
	str, _ := text.Marshal(0xc089763bca3e3f44, s.Struct)
	return str
}

func (s Net_remoteSave_Params) Remotes() (Remote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Remote_List{List: p.List()}, err
}

func (s Net_remoteSave_Params) HasRemotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remoteSave_Params) SetRemotes(v Remote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemotes sets the remotes field to a newly
// allocated Remote_List, preferring placement in s's segment.
func (s Net_remoteSave_Params) NewRemotes(n int32) (Remote_List, error) {
	l, err := NewRemote_List(s.Struct.Segment(), n)
	if err != nil {
		return Remote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_remoteSave_Params_List is a list of Net_remoteSave_Params.
type Net_remoteSave_Params_List struct{ capnp.List }

// NewNet_remoteSave_Params creates a new list of Net_remoteSave_Params.
func NewNet_remoteSave_Params_List(s *capnp.Segment, sz int32) (Net_remoteSave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remoteSave_Params_List{l}, err
}

func (s Net_remoteSave_Params_List) At(i int) Net_remoteSave_Params {
	return Net_remoteSave_Params{s.List.Struct(i)}
}

func (s Net_remoteSave_Params_List) Set(i int, v Net_remoteSave_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteSave_Params_List) String() string {
	str, _ := text.MarshalList(0xc089763bca3e3f44, s.List)
	return str
}

// Net_remoteSave_Params_Promise is a wrapper for a Net_remoteSave_Params promised by a client call.
type Net_remoteSave_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteSave_Params_Promise) Struct() (Net_remoteSave_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteSave_Params{s}, err
}

type Net_remoteSave_Results struct{ capnp.Struct }

// Net_remoteSave_Results_TypeID is the unique identifier for the type Net_remoteSave_Results.
const Net_remoteSave_Results_TypeID = 0x99b03ceb2dad70db

func NewNet_remoteSave_Results(s *capnp.Segment) (Net_remoteSave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteSave_Results{st}, err
}

func NewRootNet_remoteSave_Results(s *capnp.Segment) (Net_remoteSave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteSave_Results{st}, err
}

func ReadRootNet_remoteSave_Results(msg *capnp.Message) (Net_remoteSave_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteSave_Results{root.Struct()}, err
}

func (s Net_remoteSave_Results) String() string {
	str, _ := text.Marshal(0x99b03ceb2dad70db, s.Struct)
	return str
}

// Net_remoteSave_Results_List is a list of Net_remoteSave_Results.
type Net_remoteSave_Results_List struct{ capnp.List }

// NewNet_remoteSave_Results creates a new list of Net_remoteSave_Results.
func NewNet_remoteSave_Results_List(s *capnp.Segment, sz int32) (Net_remoteSave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteSave_Results_List{l}, err
}

func (s Net_remoteSave_Results_List) At(i int) Net_remoteSave_Results {
	return Net_remoteSave_Results{s.List.Struct(i)}
}

func (s Net_remoteSave_Results_List) Set(i int, v Net_remoteSave_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteSave_Results_List) String() string {
	str, _ := text.MarshalList(0x99b03ceb2dad70db, s.List)
	return str
}

// Net_remoteSave_Results_Promise is a wrapper for a Net_remoteSave_Results promised by a client call.
type Net_remoteSave_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteSave_Results_Promise) Struct() (Net_remoteSave_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteSave_Results{s}, err
}

type Net_remotePing_Params struct{ capnp.Struct }

// Net_remotePing_Params_TypeID is the unique identifier for the type Net_remotePing_Params.
const Net_remotePing_Params_TypeID = 0xb5dc333528e5f7ae

func NewNet_remotePing_Params(s *capnp.Segment) (Net_remotePing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remotePing_Params{st}, err
}

func NewRootNet_remotePing_Params(s *capnp.Segment) (Net_remotePing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_remotePing_Params{st}, err
}

func ReadRootNet_remotePing_Params(msg *capnp.Message) (Net_remotePing_Params, error) {
	root, err := msg.RootPtr()
	return Net_remotePing_Params{root.Struct()}, err
}

func (s Net_remotePing_Params) String() string {
	str, _ := text.Marshal(0xb5dc333528e5f7ae, s.Struct)
	return str
}

func (s Net_remotePing_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_remotePing_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_remotePing_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_remotePing_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

// Net_remotePing_Params_List is a list of Net_remotePing_Params.
type Net_remotePing_Params_List struct{ capnp.List }

// NewNet_remotePing_Params creates a new list of Net_remotePing_Params.
func NewNet_remotePing_Params_List(s *capnp.Segment, sz int32) (Net_remotePing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_remotePing_Params_List{l}, err
}

func (s Net_remotePing_Params_List) At(i int) Net_remotePing_Params {
	return Net_remotePing_Params{s.List.Struct(i)}
}

func (s Net_remotePing_Params_List) Set(i int, v Net_remotePing_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remotePing_Params_List) String() string {
	str, _ := text.MarshalList(0xb5dc333528e5f7ae, s.List)
	return str
}

// Net_remotePing_Params_Promise is a wrapper for a Net_remotePing_Params promised by a client call.
type Net_remotePing_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remotePing_Params_Promise) Struct() (Net_remotePing_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remotePing_Params{s}, err
}

type Net_remotePing_Results struct{ capnp.Struct }

// Net_remotePing_Results_TypeID is the unique identifier for the type Net_remotePing_Results.
const Net_remotePing_Results_TypeID = 0xe83f954c9635f05a

func NewNet_remotePing_Results(s *capnp.Segment) (Net_remotePing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_remotePing_Results{st}, err
}

func NewRootNet_remotePing_Results(s *capnp.Segment) (Net_remotePing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_remotePing_Results{st}, err
}

func ReadRootNet_remotePing_Results(msg *capnp.Message) (Net_remotePing_Results, error) {
	root, err := msg.RootPtr()
	return Net_remotePing_Results{root.Struct()}, err
}

func (s Net_remotePing_Results) String() string {
	str, _ := text.Marshal(0xe83f954c9635f05a, s.Struct)
	return str
}

func (s Net_remotePing_Results) Roundtrip() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Net_remotePing_Results) SetRoundtrip(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Net_remotePing_Results_List is a list of Net_remotePing_Results.
type Net_remotePing_Results_List struct{ capnp.List }

// NewNet_remotePing_Results creates a new list of Net_remotePing_Results.
func NewNet_remotePing_Results_List(s *capnp.Segment, sz int32) (Net_remotePing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_remotePing_Results_List{l}, err
}

func (s Net_remotePing_Results_List) At(i int) Net_remotePing_Results {
	return Net_remotePing_Results{s.List.Struct(i)}
}

func (s Net_remotePing_Results_List) Set(i int, v Net_remotePing_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remotePing_Results_List) String() string {
	str, _ := text.MarshalList(0xe83f954c9635f05a, s.List)
	return str
}

// Net_remotePing_Results_Promise is a wrapper for a Net_remotePing_Results promised by a client call.
type Net_remotePing_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remotePing_Results_Promise) Struct() (Net_remotePing_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remotePing_Results{s}, err
}

type Net_remoteClear_Params struct{ capnp.Struct }

// Net_remoteClear_Params_TypeID is the unique identifier for the type Net_remoteClear_Params.
const Net_remoteClear_Params_TypeID = 0xbee5e0529f9017ff

func NewNet_remoteClear_Params(s *capnp.Segment) (Net_remoteClear_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Params{st}, err
}

func NewRootNet_remoteClear_Params(s *capnp.Segment) (Net_remoteClear_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Params{st}, err
}

func ReadRootNet_remoteClear_Params(msg *capnp.Message) (Net_remoteClear_Params, error) {
	root, err := msg.RootPtr()
	return Net_remoteClear_Params{root.Struct()}, err
}

func (s Net_remoteClear_Params) String() string {
	str, _ := text.Marshal(0xbee5e0529f9017ff, s.Struct)
	return str
}

// Net_remoteClear_Params_List is a list of Net_remoteClear_Params.
type Net_remoteClear_Params_List struct{ capnp.List }

// NewNet_remoteClear_Params creates a new list of Net_remoteClear_Params.
func NewNet_remoteClear_Params_List(s *capnp.Segment, sz int32) (Net_remoteClear_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteClear_Params_List{l}, err
}

func (s Net_remoteClear_Params_List) At(i int) Net_remoteClear_Params {
	return Net_remoteClear_Params{s.List.Struct(i)}
}

func (s Net_remoteClear_Params_List) Set(i int, v Net_remoteClear_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteClear_Params_List) String() string {
	str, _ := text.MarshalList(0xbee5e0529f9017ff, s.List)
	return str
}

// Net_remoteClear_Params_Promise is a wrapper for a Net_remoteClear_Params promised by a client call.
type Net_remoteClear_Params_Promise struct{ *capnp.Pipeline }

func (p Net_remoteClear_Params_Promise) Struct() (Net_remoteClear_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteClear_Params{s}, err
}

type Net_remoteClear_Results struct{ capnp.Struct }

// Net_remoteClear_Results_TypeID is the unique identifier for the type Net_remoteClear_Results.
const Net_remoteClear_Results_TypeID = 0xad37ff6270c35769

func NewNet_remoteClear_Results(s *capnp.Segment) (Net_remoteClear_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Results{st}, err
}

func NewRootNet_remoteClear_Results(s *capnp.Segment) (Net_remoteClear_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_remoteClear_Results{st}, err
}

func ReadRootNet_remoteClear_Results(msg *capnp.Message) (Net_remoteClear_Results, error) {
	root, err := msg.RootPtr()
	return Net_remoteClear_Results{root.Struct()}, err
}

func (s Net_remoteClear_Results) String() string {
	str, _ := text.Marshal(0xad37ff6270c35769, s.Struct)
	return str
}

// Net_remoteClear_Results_List is a list of Net_remoteClear_Results.
type Net_remoteClear_Results_List struct{ capnp.List }

// NewNet_remoteClear_Results creates a new list of Net_remoteClear_Results.
func NewNet_remoteClear_Results_List(s *capnp.Segment, sz int32) (Net_remoteClear_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_remoteClear_Results_List{l}, err
}

func (s Net_remoteClear_Results_List) At(i int) Net_remoteClear_Results {
	return Net_remoteClear_Results{s.List.Struct(i)}
}

func (s Net_remoteClear_Results_List) Set(i int, v Net_remoteClear_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_remoteClear_Results_List) String() string {
	str, _ := text.MarshalList(0xad37ff6270c35769, s.List)
	return str
}

// Net_remoteClear_Results_Promise is a wrapper for a Net_remoteClear_Results promised by a client call.
type Net_remoteClear_Results_Promise struct{ *capnp.Pipeline }

func (p Net_remoteClear_Results_Promise) Struct() (Net_remoteClear_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_remoteClear_Results{s}, err
}

type Net_netLocate_Params struct{ capnp.Struct }

// Net_netLocate_Params_TypeID is the unique identifier for the type Net_netLocate_Params.
const Net_netLocate_Params_TypeID = 0xd35d6ae0fdbd9bc5

func NewNet_netLocate_Params(s *capnp.Segment) (Net_netLocate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Net_netLocate_Params{st}, err
}

func NewRootNet_netLocate_Params(s *capnp.Segment) (Net_netLocate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Net_netLocate_Params{st}, err
}

func ReadRootNet_netLocate_Params(msg *capnp.Message) (Net_netLocate_Params, error) {
	root, err := msg.RootPtr()
	return Net_netLocate_Params{root.Struct()}, err
}

func (s Net_netLocate_Params) String() string {
	str, _ := text.Marshal(0xd35d6ae0fdbd9bc5, s.Struct)
	return str
}

func (s Net_netLocate_Params) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Net_netLocate_Params) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_netLocate_Params) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Net_netLocate_Params) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Net_netLocate_Params) TimeoutSec() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Net_netLocate_Params) SetTimeoutSec(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Net_netLocate_Params) LocateMask() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Net_netLocate_Params) HasLocateMask() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Net_netLocate_Params) LocateMaskBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Net_netLocate_Params) SetLocateMask(v string) error {
	return s.Struct.SetText(1, v)
}

// Net_netLocate_Params_List is a list of Net_netLocate_Params.
type Net_netLocate_Params_List struct{ capnp.List }

// NewNet_netLocate_Params creates a new list of Net_netLocate_Params.
func NewNet_netLocate_Params_List(s *capnp.Segment, sz int32) (Net_netLocate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Net_netLocate_Params_List{l}, err
}

func (s Net_netLocate_Params_List) At(i int) Net_netLocate_Params {
	return Net_netLocate_Params{s.List.Struct(i)}
}

func (s Net_netLocate_Params_List) Set(i int, v Net_netLocate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocate_Params_List) String() string {
	str, _ := text.MarshalList(0xd35d6ae0fdbd9bc5, s.List)
	return str
}

// Net_netLocate_Params_Promise is a wrapper for a Net_netLocate_Params promised by a client call.
type Net_netLocate_Params_Promise struct{ *capnp.Pipeline }

func (p Net_netLocate_Params_Promise) Struct() (Net_netLocate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocate_Params{s}, err
}

type Net_netLocate_Results struct{ capnp.Struct }

// Net_netLocate_Results_TypeID is the unique identifier for the type Net_netLocate_Results.
const Net_netLocate_Results_TypeID = 0xdc0aec8d179d4ec9

func NewNet_netLocate_Results(s *capnp.Segment) (Net_netLocate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocate_Results{st}, err
}

func NewRootNet_netLocate_Results(s *capnp.Segment) (Net_netLocate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocate_Results{st}, err
}

func ReadRootNet_netLocate_Results(msg *capnp.Message) (Net_netLocate_Results, error) {
	root, err := msg.RootPtr()
	return Net_netLocate_Results{root.Struct()}, err
}

func (s Net_netLocate_Results) String() string {
	str, _ := text.Marshal(0xdc0aec8d179d4ec9, s.Struct)
	return str
}

func (s Net_netLocate_Results) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Net_netLocate_Results) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Net_netLocate_Results_List is a list of Net_netLocate_Results.
type Net_netLocate_Results_List struct{ capnp.List }

// NewNet_netLocate_Results creates a new list of Net_netLocate_Results.
func NewNet_netLocate_Results_List(s *capnp.Segment, sz int32) (Net_netLocate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_netLocate_Results_List{l}, err
}

func (s Net_netLocate_Results_List) At(i int) Net_netLocate_Results {
	return Net_netLocate_Results{s.List.Struct(i)}
}

func (s Net_netLocate_Results_List) Set(i int, v Net_netLocate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocate_Results_List) String() string {
	str, _ := text.MarshalList(0xdc0aec8d179d4ec9, s.List)
	return str
}

// Net_netLocate_Results_Promise is a wrapper for a Net_netLocate_Results promised by a client call.
type Net_netLocate_Results_Promise struct{ *capnp.Pipeline }

func (p Net_netLocate_Results_Promise) Struct() (Net_netLocate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocate_Results{s}, err
}

type Net_netLocateNext_Params struct{ capnp.Struct }

// Net_netLocateNext_Params_TypeID is the unique identifier for the type Net_netLocateNext_Params.
const Net_netLocateNext_Params_TypeID = 0xd701f5ae7e7560e9

func NewNet_netLocateNext_Params(s *capnp.Segment) (Net_netLocateNext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocateNext_Params{st}, err
}

func NewRootNet_netLocateNext_Params(s *capnp.Segment) (Net_netLocateNext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Net_netLocateNext_Params{st}, err
}

func ReadRootNet_netLocateNext_Params(msg *capnp.Message) (Net_netLocateNext_Params, error) {
	root, err := msg.RootPtr()
	return Net_netLocateNext_Params{root.Struct()}, err
}

func (s Net_netLocateNext_Params) String() string {
	str, _ := text.Marshal(0xd701f5ae7e7560e9, s.Struct)
	return str
}

func (s Net_netLocateNext_Params) Ticket() uint64 {
	return s.Struct.Uint64(0)
}

func (s Net_netLocateNext_Params) SetTicket(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Net_netLocateNext_Params_List is a list of Net_netLocateNext_Params.
type Net_netLocateNext_Params_List struct{ capnp.List }

// NewNet_netLocateNext_Params creates a new list of Net_netLocateNext_Params.
func NewNet_netLocateNext_Params_List(s *capnp.Segment, sz int32) (Net_netLocateNext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Net_netLocateNext_Params_List{l}, err
}

func (s Net_netLocateNext_Params_List) At(i int) Net_netLocateNext_Params {
	return Net_netLocateNext_Params{s.List.Struct(i)}
}

func (s Net_netLocateNext_Params_List) Set(i int, v Net_netLocateNext_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocateNext_Params_List) String() string {
	str, _ := text.MarshalList(0xd701f5ae7e7560e9, s.List)
	return str
}

// Net_netLocateNext_Params_Promise is a wrapper for a Net_netLocateNext_Params promised by a client call.
type Net_netLocateNext_Params_Promise struct{ *capnp.Pipeline }

func (p Net_netLocateNext_Params_Promise) Struct() (Net_netLocateNext_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocateNext_Params{s}, err
}

type Net_netLocateNext_Results struct{ capnp.Struct }

// Net_netLocateNext_Results_TypeID is the unique identifier for the type Net_netLocateNext_Results.
const Net_netLocateNext_Results_TypeID = 0xd2117353ea065c72

func NewNet_netLocateNext_Results(s *capnp.Segment) (Net_netLocateNext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_netLocateNext_Results{st}, err
}

func NewRootNet_netLocateNext_Results(s *capnp.Segment) (Net_netLocateNext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_netLocateNext_Results{st}, err
}

func ReadRootNet_netLocateNext_Results(msg *capnp.Message) (Net_netLocateNext_Results, error) {
	root, err := msg.RootPtr()
	return Net_netLocateNext_Results{root.Struct()}, err
}

func (s Net_netLocateNext_Results) String() string {
	str, _ := text.Marshal(0xd2117353ea065c72, s.Struct)
	return str
}

func (s Net_netLocateNext_Results) Result() (LocateResult, error) {
	p, err := s.Struct.Ptr(0)
	return LocateResult{Struct: p.Struct()}, err
}

func (s Net_netLocateNext_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_netLocateNext_Results) SetResult(v LocateResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated LocateResult struct, preferring placement in s's segment.
func (s Net_netLocateNext_Results) NewResult() (LocateResult, error) {
	ss, err := NewLocateResult(s.Struct.Segment())
	if err != nil {
		return LocateResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_netLocateNext_Results_List is a list of Net_netLocateNext_Results.
type Net_netLocateNext_Results_List struct{ capnp.List }

// NewNet_netLocateNext_Results creates a new list of Net_netLocateNext_Results.
func NewNet_netLocateNext_Results_List(s *capnp.Segment, sz int32) (Net_netLocateNext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_netLocateNext_Results_List{l}, err
}

func (s Net_netLocateNext_Results_List) At(i int) Net_netLocateNext_Results {
	return Net_netLocateNext_Results{s.List.Struct(i)}
}

func (s Net_netLocateNext_Results_List) Set(i int, v Net_netLocateNext_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_netLocateNext_Results_List) String() string {
	str, _ := text.MarshalList(0xd2117353ea065c72, s.List)
	return str
}

// Net_netLocateNext_Results_Promise is a wrapper for a Net_netLocateNext_Results promised by a client call.
type Net_netLocateNext_Results_Promise struct{ *capnp.Pipeline }

func (p Net_netLocateNext_Results_Promise) Struct() (Net_netLocateNext_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_netLocateNext_Results{s}, err
}

func (p Net_netLocateNext_Results_Promise) Result() LocateResult_Promise {
	return LocateResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_whoami_Params struct{ capnp.Struct }

// Net_whoami_Params_TypeID is the unique identifier for the type Net_whoami_Params.
const Net_whoami_Params_TypeID = 0xc338177a5379031a

func NewNet_whoami_Params(s *capnp.Segment) (Net_whoami_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_whoami_Params{st}, err
}

func NewRootNet_whoami_Params(s *capnp.Segment) (Net_whoami_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_whoami_Params{st}, err
}

func ReadRootNet_whoami_Params(msg *capnp.Message) (Net_whoami_Params, error) {
	root, err := msg.RootPtr()
	return Net_whoami_Params{root.Struct()}, err
}

func (s Net_whoami_Params) String() string {
	str, _ := text.Marshal(0xc338177a5379031a, s.Struct)
	return str
}

// Net_whoami_Params_List is a list of Net_whoami_Params.
type Net_whoami_Params_List struct{ capnp.List }

// NewNet_whoami_Params creates a new list of Net_whoami_Params.
func NewNet_whoami_Params_List(s *capnp.Segment, sz int32) (Net_whoami_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_whoami_Params_List{l}, err
}

func (s Net_whoami_Params_List) At(i int) Net_whoami_Params {
	return Net_whoami_Params{s.List.Struct(i)}
}

func (s Net_whoami_Params_List) Set(i int, v Net_whoami_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_whoami_Params_List) String() string {
	str, _ := text.MarshalList(0xc338177a5379031a, s.List)
	return str
}

// Net_whoami_Params_Promise is a wrapper for a Net_whoami_Params promised by a client call.
type Net_whoami_Params_Promise struct{ *capnp.Pipeline }

func (p Net_whoami_Params_Promise) Struct() (Net_whoami_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_whoami_Params{s}, err
}

type Net_whoami_Results struct{ capnp.Struct }

// Net_whoami_Results_TypeID is the unique identifier for the type Net_whoami_Results.
const Net_whoami_Results_TypeID = 0x9a291d6964350a5b

func NewNet_whoami_Results(s *capnp.Segment) (Net_whoami_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_whoami_Results{st}, err
}

func NewRootNet_whoami_Results(s *capnp.Segment) (Net_whoami_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_whoami_Results{st}, err
}

func ReadRootNet_whoami_Results(msg *capnp.Message) (Net_whoami_Results, error) {
	root, err := msg.RootPtr()
	return Net_whoami_Results{root.Struct()}, err
}

func (s Net_whoami_Results) String() string {
	str, _ := text.Marshal(0x9a291d6964350a5b, s.Struct)
	return str
}

func (s Net_whoami_Results) Whoami() (Identity, error) {
	p, err := s.Struct.Ptr(0)
	return Identity{Struct: p.Struct()}, err
}

func (s Net_whoami_Results) HasWhoami() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_whoami_Results) SetWhoami(v Identity) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhoami sets the whoami field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Net_whoami_Results) NewWhoami() (Identity, error) {
	ss, err := NewIdentity(s.Struct.Segment())
	if err != nil {
		return Identity{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Net_whoami_Results_List is a list of Net_whoami_Results.
type Net_whoami_Results_List struct{ capnp.List }

// NewNet_whoami_Results creates a new list of Net_whoami_Results.
func NewNet_whoami_Results_List(s *capnp.Segment, sz int32) (Net_whoami_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_whoami_Results_List{l}, err
}

func (s Net_whoami_Results_List) At(i int) Net_whoami_Results {
	return Net_whoami_Results{s.List.Struct(i)}
}

func (s Net_whoami_Results_List) Set(i int, v Net_whoami_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_whoami_Results_List) String() string {
	str, _ := text.MarshalList(0x9a291d6964350a5b, s.List)
	return str
}

// Net_whoami_Results_Promise is a wrapper for a Net_whoami_Results promised by a client call.
type Net_whoami_Results_Promise struct{ *capnp.Pipeline }

func (p Net_whoami_Results_Promise) Struct() (Net_whoami_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_whoami_Results{s}, err
}

func (p Net_whoami_Results_Promise) Whoami() Identity_Promise {
	return Identity_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Net_connect_Params struct{ capnp.Struct }

// Net_connect_Params_TypeID is the unique identifier for the type Net_connect_Params.
const Net_connect_Params_TypeID = 0x86541181da6400f7

func NewNet_connect_Params(s *capnp.Segment) (Net_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Params{st}, err
}

func NewRootNet_connect_Params(s *capnp.Segment) (Net_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Params{st}, err
}

func ReadRootNet_connect_Params(msg *capnp.Message) (Net_connect_Params, error) {
	root, err := msg.RootPtr()
	return Net_connect_Params{root.Struct()}, err
}

func (s Net_connect_Params) String() string {
	str, _ := text.Marshal(0x86541181da6400f7, s.Struct)
	return str
}

// Net_connect_Params_List is a list of Net_connect_Params.
type Net_connect_Params_List struct{ capnp.List }

// NewNet_connect_Params creates a new list of Net_connect_Params.
func NewNet_connect_Params_List(s *capnp.Segment, sz int32) (Net_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_connect_Params_List{l}, err
}

func (s Net_connect_Params_List) At(i int) Net_connect_Params {
	return Net_connect_Params{s.List.Struct(i)}
}

func (s Net_connect_Params_List) Set(i int, v Net_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_connect_Params_List) String() string {
	str, _ := text.MarshalList(0x86541181da6400f7, s.List)
	return str
}

// Net_connect_Params_Promise is a wrapper for a Net_connect_Params promised by a client call.
type Net_connect_Params_Promise struct{ *capnp.Pipeline }

func (p Net_connect_Params_Promise) Struct() (Net_connect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_connect_Params{s}, err
}

type Net_connect_Results struct{ capnp.Struct }

// Net_connect_Results_TypeID is the unique identifier for the type Net_connect_Results.
const Net_connect_Results_TypeID = 0xd0071dd673841599

func NewNet_connect_Results(s *capnp.Segment) (Net_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Results{st}, err
}

func NewRootNet_connect_Results(s *capnp.Segment) (Net_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_connect_Results{st}, err
}

func ReadRootNet_connect_Results(msg *capnp.Message) (Net_connect_Results, error) {
	root, err := msg.RootPtr()
	return Net_connect_Results{root.Struct()}, err
}

func (s Net_connect_Results) String() string {
	str, _ := text.Marshal(0xd0071dd673841599, s.Struct)
	return str
}

// Net_connect_Results_List is a list of Net_connect_Results.
type Net_connect_Results_List struct{ capnp.List }

// NewNet_connect_Results creates a new list of Net_connect_Results.
func NewNet_connect_Results_List(s *capnp.Segment, sz int32) (Net_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_connect_Results_List{l}, err
}

func (s Net_connect_Results_List) At(i int) Net_connect_Results {
	return Net_connect_Results{s.List.Struct(i)}
}

func (s Net_connect_Results_List) Set(i int, v Net_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xd0071dd673841599, s.List)
	return str
}

// Net_connect_Results_Promise is a wrapper for a Net_connect_Results promised by a client call.
type Net_connect_Results_Promise struct{ *capnp.Pipeline }

func (p Net_connect_Results_Promise) Struct() (Net_connect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_connect_Results{s}, err
}

type Net_disconnect_Params struct{ capnp.Struct }

// Net_disconnect_Params_TypeID is the unique identifier for the type Net_disconnect_Params.
const Net_disconnect_Params_TypeID = 0xaf631f5cddda9aa3

func NewNet_disconnect_Params(s *capnp.Segment) (Net_disconnect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Params{st}, err
}

func NewRootNet_disconnect_Params(s *capnp.Segment) (Net_disconnect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Params{st}, err
}

func ReadRootNet_disconnect_Params(msg *capnp.Message) (Net_disconnect_Params, error) {
	root, err := msg.RootPtr()
	return Net_disconnect_Params{root.Struct()}, err
}

func (s Net_disconnect_Params) String() string {
	str, _ := text.Marshal(0xaf631f5cddda9aa3, s.Struct)
	return str
}

// Net_disconnect_Params_List is a list of Net_disconnect_Params.
type Net_disconnect_Params_List struct{ capnp.List }

// NewNet_disconnect_Params creates a new list of Net_disconnect_Params.
func NewNet_disconnect_Params_List(s *capnp.Segment, sz int32) (Net_disconnect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_disconnect_Params_List{l}, err
}

func (s Net_disconnect_Params_List) At(i int) Net_disconnect_Params {
	return Net_disconnect_Params{s.List.Struct(i)}
}

func (s Net_disconnect_Params_List) Set(i int, v Net_disconnect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_disconnect_Params_List) String() string {
	str, _ := text.MarshalList(0xaf631f5cddda9aa3, s.List)
	return str
}

// Net_disconnect_Params_Promise is a wrapper for a Net_disconnect_Params promised by a client call.
type Net_disconnect_Params_Promise struct{ *capnp.Pipeline }

func (p Net_disconnect_Params_Promise) Struct() (Net_disconnect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_disconnect_Params{s}, err
}

type Net_disconnect_Results struct{ capnp.Struct }

// Net_disconnect_Results_TypeID is the unique identifier for the type Net_disconnect_Results.
const Net_disconnect_Results_TypeID = 0xcb6e3e65f2dbc914

func NewNet_disconnect_Results(s *capnp.Segment) (Net_disconnect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Results{st}, err
}

func NewRootNet_disconnect_Results(s *capnp.Segment) (Net_disconnect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_disconnect_Results{st}, err
}

func ReadRootNet_disconnect_Results(msg *capnp.Message) (Net_disconnect_Results, error) {
	root, err := msg.RootPtr()
	return Net_disconnect_Results{root.Struct()}, err
}

func (s Net_disconnect_Results) String() string {
	str, _ := text.Marshal(0xcb6e3e65f2dbc914, s.Struct)
	return str
}

// Net_disconnect_Results_List is a list of Net_disconnect_Results.
type Net_disconnect_Results_List struct{ capnp.List }

// NewNet_disconnect_Results creates a new list of Net_disconnect_Results.
func NewNet_disconnect_Results_List(s *capnp.Segment, sz int32) (Net_disconnect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_disconnect_Results_List{l}, err
}

func (s Net_disconnect_Results_List) At(i int) Net_disconnect_Results {
	return Net_disconnect_Results{s.List.Struct(i)}
}

func (s Net_disconnect_Results_List) Set(i int, v Net_disconnect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_disconnect_Results_List) String() string {
	str, _ := text.MarshalList(0xcb6e3e65f2dbc914, s.List)
	return str
}

// Net_disconnect_Results_Promise is a wrapper for a Net_disconnect_Results promised by a client call.
type Net_disconnect_Results_Promise struct{ *capnp.Pipeline }

func (p Net_disconnect_Results_Promise) Struct() (Net_disconnect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_disconnect_Results{s}, err
}

type Net_onlinePeers_Params struct{ capnp.Struct }

// Net_onlinePeers_Params_TypeID is the unique identifier for the type Net_onlinePeers_Params.
const Net_onlinePeers_Params_TypeID = 0xe19b7cffa7304650

func NewNet_onlinePeers_Params(s *capnp.Segment) (Net_onlinePeers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_onlinePeers_Params{st}, err
}

func NewRootNet_onlinePeers_Params(s *capnp.Segment) (Net_onlinePeers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Net_onlinePeers_Params{st}, err
}

func ReadRootNet_onlinePeers_Params(msg *capnp.Message) (Net_onlinePeers_Params, error) {
	root, err := msg.RootPtr()
	return Net_onlinePeers_Params{root.Struct()}, err
}

func (s Net_onlinePeers_Params) String() string {
	str, _ := text.Marshal(0xe19b7cffa7304650, s.Struct)
	return str
}

// Net_onlinePeers_Params_List is a list of Net_onlinePeers_Params.
type Net_onlinePeers_Params_List struct{ capnp.List }

// NewNet_onlinePeers_Params creates a new list of Net_onlinePeers_Params.
func NewNet_onlinePeers_Params_List(s *capnp.Segment, sz int32) (Net_onlinePeers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Net_onlinePeers_Params_List{l}, err
}

func (s Net_onlinePeers_Params_List) At(i int) Net_onlinePeers_Params {
	return Net_onlinePeers_Params{s.List.Struct(i)}
}

func (s Net_onlinePeers_Params_List) Set(i int, v Net_onlinePeers_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_onlinePeers_Params_List) String() string {
	str, _ := text.MarshalList(0xe19b7cffa7304650, s.List)
	return str
}

// Net_onlinePeers_Params_Promise is a wrapper for a Net_onlinePeers_Params promised by a client call.
type Net_onlinePeers_Params_Promise struct{ *capnp.Pipeline }

func (p Net_onlinePeers_Params_Promise) Struct() (Net_onlinePeers_Params, error) {
	s, err := p.Pipeline.Struct()
	return Net_onlinePeers_Params{s}, err
}

type Net_onlinePeers_Results struct{ capnp.Struct }

// Net_onlinePeers_Results_TypeID is the unique identifier for the type Net_onlinePeers_Results.
const Net_onlinePeers_Results_TypeID = 0xb9095b6d17298884

func NewNet_onlinePeers_Results(s *capnp.Segment) (Net_onlinePeers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_onlinePeers_Results{st}, err
}

func NewRootNet_onlinePeers_Results(s *capnp.Segment) (Net_onlinePeers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Net_onlinePeers_Results{st}, err
}

func ReadRootNet_onlinePeers_Results(msg *capnp.Message) (Net_onlinePeers_Results, error) {
	root, err := msg.RootPtr()
	return Net_onlinePeers_Results{root.Struct()}, err
}

func (s Net_onlinePeers_Results) String() string {
	str, _ := text.Marshal(0xb9095b6d17298884, s.Struct)
	return str
}

func (s Net_onlinePeers_Results) Infos() (PeerStatus_List, error) {
	p, err := s.Struct.Ptr(0)
	return PeerStatus_List{List: p.List()}, err
}

func (s Net_onlinePeers_Results) HasInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Net_onlinePeers_Results) SetInfos(v PeerStatus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated PeerStatus_List, preferring placement in s's segment.
func (s Net_onlinePeers_Results) NewInfos(n int32) (PeerStatus_List, error) {
	l, err := NewPeerStatus_List(s.Struct.Segment(), n)
	if err != nil {
		return PeerStatus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Net_onlinePeers_Results_List is a list of Net_onlinePeers_Results.
type Net_onlinePeers_Results_List struct{ capnp.List }

// NewNet_onlinePeers_Results creates a new list of Net_onlinePeers_Results.
func NewNet_onlinePeers_Results_List(s *capnp.Segment, sz int32) (Net_onlinePeers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Net_onlinePeers_Results_List{l}, err
}

func (s Net_onlinePeers_Results_List) At(i int) Net_onlinePeers_Results {
	return Net_onlinePeers_Results{s.List.Struct(i)}
}

func (s Net_onlinePeers_Results_List) Set(i int, v Net_onlinePeers_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Net_onlinePeers_Results_List) String() string {
	str, _ := text.MarshalList(0xb9095b6d17298884, s.List)
	return str
}

// Net_onlinePeers_Results_Promise is a wrapper for a Net_onlinePeers_Results promised by a client call.
type Net_onlinePeers_Results_Promise struct{ *capnp.Pipeline }

func (p Net_onlinePeers_Results_Promise) Struct() (Net_onlinePeers_Results, error) {
	s, err := p.Pipeline.Struct()
	return Net_onlinePeers_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfc487818328b97ef

func (c API) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Copy(ctx context.Context, params func(FS_copy_Params) error, opts ...capnp.CallOption) FS_copy_Results_Promise {
	if c.Client == nil {
		return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_copy_Params{Struct: s}) }
	}
	return FS_copy_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Stat(ctx context.Context, params func(FS_stat_Params) error, opts ...capnp.CallOption) FS_stat_Results_Promise {
	if c.Client == nil {
		return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stat_Params{Struct: s}) }
	}
	return FS_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) GarbageCollect(ctx context.Context, params func(FS_garbageCollect_Params) error, opts ...capnp.CallOption) FS_garbageCollect_Results_Promise {
	if c.Client == nil {
		return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_garbageCollect_Params{Struct: s}) }
	}
	return FS_garbageCollect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Touch(ctx context.Context, params func(FS_touch_Params) error, opts ...capnp.CallOption) FS_touch_Results_Promise {
	if c.Client == nil {
		return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_touch_Params{Struct: s}) }
	}
	return FS_touch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Exists(ctx context.Context, params func(FS_exists_Params) error, opts ...capnp.CallOption) FS_exists_Results_Promise {
	if c.Client == nil {
		return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_exists_Params{Struct: s}) }
	}
	return FS_exists_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ListExplicitPins(ctx context.Context, params func(FS_listExplicitPins_Params) error, opts ...capnp.CallOption) FS_listExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_listExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "listExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_listExplicitPins_Params{Struct: s}) }
	}
	return FS_listExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ClearExplicitPins(ctx context.Context, params func(FS_clearExplicitPins_Params) error, opts ...capnp.CallOption) FS_clearExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_clearExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "clearExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_clearExplicitPins_Params{Struct: s}) }
	}
	return FS_clearExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) SetExplicitPins(ctx context.Context, params func(FS_setExplicitPins_Params) error, opts ...capnp.CallOption) FS_setExplicitPins_Results_Promise {
	if c.Client == nil {
		return FS_setExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "setExplicitPins",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_setExplicitPins_Params{Struct: s}) }
	}
	return FS_setExplicitPins_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Sync(ctx context.Context, params func(VCS_sync_Params) error, opts ...capnp.CallOption) VCS_sync_Results_Promise {
	if c.Client == nil {
		return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_sync_Params{Struct: s}) }
	}
	return VCS_sync_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Fetch(ctx context.Context, params func(VCS_fetch_Params) error, opts ...capnp.CallOption) VCS_fetch_Results_Promise {
	if c.Client == nil {
		return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_fetch_Params{Struct: s}) }
	}
	return VCS_fetch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) CommitInfo(ctx context.Context, params func(VCS_commitInfo_Params) error, opts ...capnp.CallOption) VCS_commitInfo_Results_Promise {
	if c.Client == nil {
		return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commitInfo_Params{Struct: s}) }
	}
	return VCS_commitInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Quit(ctx context.Context, params func(Repo_quit_Params) error, opts ...capnp.CallOption) Repo_quit_Results_Promise {
	if c.Client == nil {
		return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_quit_Params{Struct: s}) }
	}
	return Repo_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Repo_ping_Params) error, opts ...capnp.CallOption) Repo_ping_Results_Promise {
	if c.Client == nil {
		return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_ping_Params{Struct: s}) }
	}
	return Repo_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Init(ctx context.Context, params func(Repo_init_Params) error, opts ...capnp.CallOption) Repo_init_Results_Promise {
	if c.Client == nil {
		return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_init_Params{Struct: s}) }
	}
	return Repo_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mount(ctx context.Context, params func(Repo_mount_Params) error, opts ...capnp.CallOption) Repo_mount_Results_Promise {
	if c.Client == nil {
		return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_mount_Params{Struct: s}) }
	}
	return Repo_mount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unmount(ctx context.Context, params func(Repo_unmount_Params) error, opts ...capnp.CallOption) Repo_unmount_Results_Promise {
	if c.Client == nil {
		return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_unmount_Params{Struct: s}) }
	}
	return Repo_unmount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigGet(ctx context.Context, params func(Repo_configGet_Params) error, opts ...capnp.CallOption) Repo_configGet_Results_Promise {
	if c.Client == nil {
		return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configGet_Params{Struct: s}) }
	}
	return Repo_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigSet(ctx context.Context, params func(Repo_configSet_Params) error, opts ...capnp.CallOption) Repo_configSet_Results_Promise {
	if c.Client == nil {
		return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configSet_Params{Struct: s}) }
	}
	return Repo_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigAll(ctx context.Context, params func(Repo_configAll_Params) error, opts ...capnp.CallOption) Repo_configAll_Results_Promise {
	if c.Client == nil {
		return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configAll_Params{Struct: s}) }
	}
	return Repo_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigDoc(ctx context.Context, params func(Repo_configDoc_Params) error, opts ...capnp.CallOption) Repo_configDoc_Results_Promise {
	if c.Client == nil {
		return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_configDoc_Params{Struct: s}) }
	}
	return Repo_configDoc_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Become(ctx context.Context, params func(Repo_become_Params) error, opts ...capnp.CallOption) Repo_become_Results_Promise {
	if c.Client == nil {
		return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_become_Params{Struct: s}) }
	}
	return Repo_become_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabAdd(ctx context.Context, params func(Repo_fstabAdd_Params) error, opts ...capnp.CallOption) Repo_fstabAdd_Results_Promise {
	if c.Client == nil {
		return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabAdd_Params{Struct: s}) }
	}
	return Repo_fstabAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabRemove(ctx context.Context, params func(Repo_fstabRemove_Params) error, opts ...capnp.CallOption) Repo_fstabRemove_Results_Promise {
	if c.Client == nil {
		return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabRemove_Params{Struct: s}) }
	}
	return Repo_fstabRemove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabApply(ctx context.Context, params func(Repo_fstabApply_Params) error, opts ...capnp.CallOption) Repo_fstabApply_Results_Promise {
	if c.Client == nil {
		return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabApply_Params{Struct: s}) }
	}
	return Repo_fstabApply_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabList(ctx context.Context, params func(Repo_fstabList_Params) error, opts ...capnp.CallOption) Repo_fstabList_Results_Promise {
	if c.Client == nil {
		return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabList_Params{Struct: s}) }
	}
	return Repo_fstabList_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FstabUnmountAll(ctx context.Context, params func(Repo_fstabUnmountAll_Params) error, opts ...capnp.CallOption) Repo_fstabUnmountAll_Results_Promise {
	if c.Client == nil {
		return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_fstabUnmountAll_Params{Struct: s}) }
	}
	return Repo_fstabUnmountAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Version(ctx context.Context, params func(Repo_version_Params) error, opts ...capnp.CallOption) Repo_version_Results_Promise {
	if c.Client == nil {
		return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_version_Params{Struct: s}) }
	}
	return Repo_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) WaitForInit(ctx context.Context, params func(Repo_waitForInit_Params) error, opts ...capnp.CallOption) Repo_waitForInit_Results_Promise {
	if c.Client == nil {
		return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Repo_waitForInit_Params{Struct: s}) }
	}
	return Repo_waitForInit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteAdd(ctx context.Context, params func(Net_remoteAdd_Params) error, opts ...capnp.CallOption) Net_remoteAdd_Results_Promise {
	if c.Client == nil {
		return Net_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAdd",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteAdd_Params{Struct: s}) }
	}
	return Net_remoteAdd_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteRm(ctx context.Context, params func(Net_remoteRm_Params) error, opts ...capnp.CallOption) Net_remoteRm_Results_Promise {
	if c.Client == nil {
		return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteRm_Params{Struct: s}) }
	}
	return Net_remoteRm_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteLs(ctx context.Context, params func(Net_remoteLs_Params) error, opts ...capnp.CallOption) Net_remoteLs_Results_Promise {
	if c.Client == nil {
		return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteLs_Params{Struct: s}) }
	}
	return Net_remoteLs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteSave(ctx context.Context, params func(Net_remoteSave_Params) error, opts ...capnp.CallOption) Net_remoteSave_Results_Promise {
	if c.Client == nil {
		return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteSave_Params{Struct: s}) }
	}
	return Net_remoteSave_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemotePing(ctx context.Context, params func(Net_remotePing_Params) error, opts ...capnp.CallOption) Net_remotePing_Results_Promise {
	if c.Client == nil {
		return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remotePing_Params{Struct: s}) }
	}
	return Net_remotePing_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) RemoteClear(ctx context.Context, params func(Net_remoteClear_Params) error, opts ...capnp.CallOption) Net_remoteClear_Results_Promise {
	if c.Client == nil {
		return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_remoteClear_Params{Struct: s}) }
	}
	return Net_remoteClear_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocate(ctx context.Context, params func(Net_netLocate_Params) error, opts ...capnp.CallOption) Net_netLocate_Results_Promise {
	if c.Client == nil {
		return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocate_Params{Struct: s}) }
	}
	return Net_netLocate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) NetLocateNext(ctx context.Context, params func(Net_netLocateNext_Params) error, opts ...capnp.CallOption) Net_netLocateNext_Results_Promise {
	if c.Client == nil {
		return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_netLocateNext_Params{Struct: s}) }
	}
	return Net_netLocateNext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Whoami(ctx context.Context, params func(Net_whoami_Params) error, opts ...capnp.CallOption) Net_whoami_Results_Promise {
	if c.Client == nil {
		return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_whoami_Params{Struct: s}) }
	}
	return Net_whoami_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Connect(ctx context.Context, params func(Net_connect_Params) error, opts ...capnp.CallOption) Net_connect_Results_Promise {
	if c.Client == nil {
		return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_connect_Params{Struct: s}) }
	}
	return Net_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Disconnect(ctx context.Context, params func(Net_disconnect_Params) error, opts ...capnp.CallOption) Net_disconnect_Results_Promise {
	if c.Client == nil {
		return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_disconnect_Params{Struct: s}) }
	}
	return Net_disconnect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) OnlinePeers(ctx context.Context, params func(Net_onlinePeers_Params) error, opts ...capnp.CallOption) Net_onlinePeers_Results_Promise {
	if c.Client == nil {
		return Net_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "onlinePeers",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Net_onlinePeers_Params{Struct: s}) }
	}
	return Net_onlinePeers_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Copy(FS_copy) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	Stat(FS_stat) error

	GarbageCollect(FS_garbageCollect) error

	Touch(FS_touch) error

	Exists(FS_exists) error

	ListExplicitPins(FS_listExplicitPins) error

	ClearExplicitPins(FS_clearExplicitPins) error

	SetExplicitPins(FS_setExplicitPins) error

	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Sync(VCS_sync) error

	Fetch(VCS_fetch) error

	CommitInfo(VCS_commitInfo) error

	Quit(Repo_quit) error

	Ping(Repo_ping) error

	Init(Repo_init) error

	Mount(Repo_mount) error

	Unmount(Repo_unmount) error

	ConfigGet(Repo_configGet) error

	ConfigSet(Repo_configSet) error

	ConfigAll(Repo_configAll) error

	ConfigDoc(Repo_configDoc) error

	Become(Repo_become) error

	FstabAdd(Repo_fstabAdd) error

	FstabRemove(Repo_fstabRemove) error

	FstabApply(Repo_fstabApply) error

	FstabList(Repo_fstabList) error

	FstabUnmountAll(Repo_fstabUnmountAll) error

	Version(Repo_version) error

	WaitForInit(Repo_waitForInit) error

	RemoteAdd(Net_remoteAdd) error

	RemoteRm(Net_remoteRm) error

	RemoteLs(Net_remoteLs) error

	RemoteSave(Net_remoteSave) error

	RemotePing(Net_remotePing) error

	RemoteClear(Net_remoteClear) error

	NetLocate(Net_netLocate) error

	NetLocateNext(Net_netLocateNext) error

	Whoami(Net_whoami) error

	Connect(Net_connect) error

	Disconnect(Net_disconnect) error

	OnlinePeers(Net_onlinePeers) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 55)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "copy",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_copy{c, opts, FS_copy_Params{Struct: p}, FS_copy_Results{Struct: r}}
			return s.Copy(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stat{c, opts, FS_stat_Params{Struct: p}, FS_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "garbageCollect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_garbageCollect{c, opts, FS_garbageCollect_Params{Struct: p}, FS_garbageCollect_Results{Struct: r}}
			return s.GarbageCollect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "touch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_touch{c, opts, FS_touch_Params{Struct: p}, FS_touch_Results{Struct: r}}
			return s.Touch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "exists",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_exists{c, opts, FS_exists_Params{Struct: p}, FS_exists_Results{Struct: r}}
			return s.Exists(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "listExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_listExplicitPins{c, opts, FS_listExplicitPins_Params{Struct: p}, FS_listExplicitPins_Results{Struct: r}}
			return s.ListExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "clearExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_clearExplicitPins{c, opts, FS_clearExplicitPins_Params{Struct: p}, FS_clearExplicitPins_Results{Struct: r}}
			return s.ClearExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:FS",
			MethodName:    "setExplicitPins",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_setExplicitPins{c, opts, FS_setExplicitPins_Params{Struct: p}, FS_setExplicitPins_Results{Struct: r}}
			return s.SetExplicitPins(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "sync",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_sync{c, opts, VCS_sync_Params{Struct: p}, VCS_sync_Results{Struct: r}}
			return s.Sync(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "fetch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_fetch{c, opts, VCS_fetch_Params{Struct: p}, VCS_fetch_Results{Struct: r}}
			return s.Fetch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:VCS",
			MethodName:    "commitInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commitInfo{c, opts, VCS_commitInfo_Params{Struct: p}, VCS_commitInfo_Results{Struct: r}}
			return s.CommitInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_quit{c, opts, Repo_quit_Params{Struct: p}, Repo_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_ping{c, opts, Repo_ping_Params{Struct: p}, Repo_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_init{c, opts, Repo_init_Params{Struct: p}, Repo_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "mount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_mount{c, opts, Repo_mount_Params{Struct: p}, Repo_mount_Results{Struct: r}}
			return s.Mount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "unmount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_unmount{c, opts, Repo_unmount_Params{Struct: p}, Repo_unmount_Results{Struct: r}}
			return s.Unmount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configGet{c, opts, Repo_configGet_Params{Struct: p}, Repo_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configSet{c, opts, Repo_configSet_Params{Struct: p}, Repo_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configAll{c, opts, Repo_configAll_Params{Struct: p}, Repo_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "configDoc",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_configDoc{c, opts, Repo_configDoc_Params{Struct: p}, Repo_configDoc_Results{Struct: r}}
			return s.ConfigDoc(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "become",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_become{c, opts, Repo_become_Params{Struct: p}, Repo_become_Results{Struct: r}}
			return s.Become(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabAdd{c, opts, Repo_fstabAdd_Params{Struct: p}, Repo_fstabAdd_Results{Struct: r}}
			return s.FstabAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabRemove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabRemove{c, opts, Repo_fstabRemove_Params{Struct: p}, Repo_fstabRemove_Results{Struct: r}}
			return s.FstabRemove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      12,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabApply",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabApply{c, opts, Repo_fstabApply_Params{Struct: p}, Repo_fstabApply_Results{Struct: r}}
			return s.FstabApply(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      13,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabList",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabList{c, opts, Repo_fstabList_Params{Struct: p}, Repo_fstabList_Results{Struct: r}}
			return s.FstabList(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      14,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "fstabUnmountAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_fstabUnmountAll{c, opts, Repo_fstabUnmountAll_Params{Struct: p}, Repo_fstabUnmountAll_Results{Struct: r}}
			return s.FstabUnmountAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      15,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_version{c, opts, Repo_version_Params{Struct: p}, Repo_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa862cd929f7af191,
			MethodID:      16,
			InterfaceName: "server/capnp/local_api.capnp:Repo",
			MethodName:    "waitForInit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Repo_waitForInit{c, opts, Repo_waitForInit_Params{Struct: p}, Repo_waitForInit_Results{Struct: r}}
			return s.WaitForInit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      0,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteAdd",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteAdd{c, opts, Net_remoteAdd_Params{Struct: p}, Net_remoteAdd_Results{Struct: r}}
			return s.RemoteAdd(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      1,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteRm",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteRm{c, opts, Net_remoteRm_Params{Struct: p}, Net_remoteRm_Results{Struct: r}}
			return s.RemoteRm(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      2,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteLs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteLs{c, opts, Net_remoteLs_Params{Struct: p}, Net_remoteLs_Results{Struct: r}}
			return s.RemoteLs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      3,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteSave",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteSave{c, opts, Net_remoteSave_Params{Struct: p}, Net_remoteSave_Results{Struct: r}}
			return s.RemoteSave(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      4,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remotePing",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remotePing{c, opts, Net_remotePing_Params{Struct: p}, Net_remotePing_Results{Struct: r}}
			return s.RemotePing(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      5,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "remoteClear",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_remoteClear{c, opts, Net_remoteClear_Params{Struct: p}, Net_remoteClear_Results{Struct: r}}
			return s.RemoteClear(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      6,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocate{c, opts, Net_netLocate_Params{Struct: p}, Net_netLocate_Results{Struct: r}}
			return s.NetLocate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      7,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "netLocateNext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_netLocateNext{c, opts, Net_netLocateNext_Params{Struct: p}, Net_netLocateNext_Results{Struct: r}}
			return s.NetLocateNext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      8,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "whoami",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_whoami{c, opts, Net_whoami_Params{Struct: p}, Net_whoami_Results{Struct: r}}
			return s.Whoami(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      9,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_connect{c, opts, Net_connect_Params{Struct: p}, Net_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      10,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "disconnect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_disconnect{c, opts, Net_disconnect_Params{Struct: p}, Net_disconnect_Results{Struct: r}}
			return s.Disconnect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa133a60be5a7d01,
			MethodID:      11,
			InterfaceName: "server/capnp/local_api.capnp:Net",
			MethodName:    "onlinePeers",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Net_onlinePeers{c, opts, Net_onlinePeers_Params{Struct: p}, Net_onlinePeers_Results{Struct: r}}
			return s.OnlinePeers(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

const schema_ea883e7d5248d81b = "x\xda\xcc|}x\x14E\xbao\xbd\xdd\x09-\x9fa" +
	"\xec \x1f\x023\x84\x0f!&\xd9\x90\x18a\xc1\x90I" +
	"\xf8\x90\xb0\x80\x99\x19@O\x04\x8f\x9d\x99J\xd22\xd3" +
	"=tw\x08q\xe5\xa0\xac\xa8x\xc4UWDQ\x8e" +
	"\xb2gY\x05e\x11]\xae\x8b.\xae\x08\x1c\x17w\xb9" +
	"+(\xbaQ\xf0\xca\x1esw\xe1\xc8eu\xc5\x15\x17" +
	"v\xeeS\xd5S\xdd5\xc9$3\xf1\xd9{\x9f\xf3W" +
	"2\xd5oW\xbfU\xf5\xbe\xbfz\xbf\xaaJ\xd5+\xfc" +
	"\xc2\xe4\xdc\xb7J\x10\x0a\xf9\x84\xdc>\x09\xcf\xf7\x87\x9f" +
	"0\x17n\xb9\x13y|\x80P.H\x08\x95\xd7\x0e}" +
	"\x1b\x10\xc8\xcb\x86V!H\x8c\xbcY\xfd\xf5\xc53M" +
	"w\xa1\xc0(\x80\xc4\x95\xbf\x9f\x1b\\=\xe3\xbe3(" +
	"7\x87Pn\x18Z\x03\xf2\x96\xa1\x92\xbce\xa8\xb7\xfc" +
	"\xd0P/ H\x9c\xaf\xfd\x81z\xbcr\xc0=\xc8S" +
	"\x00\x08Q\xb2S\xc3n\x07\x94s\xe9\xaf\x91\x0f\xef\xf2" +
	",\xba\xc73\x86\xb5\x1f\x19\xb6\x16PN\xe2G\x97\xe5" +
	"\x9d\xfa\xa6\xbe=\xf9\x86\xcd\xc3\xdea;\x08\x0f\x87\x87" +
	"\x11\x1e\xbe\xbe\x02\x17\x95\xfe\xdb\xc1{m&\xe9\xabg" +
	"\x87\x19\xe4\xd5\xfb6\xfc\xebBuj\xcd}\xdc\x93v" +
	"\xfb\x89\xf0\xfd\xe9\xf8\xf4\x8e\x8e\xfb96\x0e\x0d;F" +
	"\x9e\xf8\xde\xda|\xed\xe9\xc0;\x0f\"\xcf(~@\xc9" +
	"\xcf\x06A>2L\x92\x8f\x0c\xf3\xca0\x9c|\xfc\x9d" +
	"\x9b\xe66\xee\x0a\xab\x8f&gH$dc\x86\xbfJ" +
	"\xb8\x9b<|\x17\x82\xc4k\x0f,\xac|\xf9\xa7\x0fn" +
	"\xe4\x09\x0e\x0f\x7f\x93\x10\xb4S\x02c\xc2\xa3g\x8f\xbe" +
	"\xf2\xdcF\x14\xf0\x01\xe3e\xc5\x08Jp\xd7\x08\xf2\x89" +
	"\x0b\x9b\xde\xbfmV\xe0\xef\x8fq\xbcn\x1d\xf1\x12\xe1" +
	"\xf5\xfa\x9a\xb3\xbf\xfb\xda3\x7fS\xda\xd9\x7fx\xc4<" +
	"\x90\xb7\x8d\x90\xe4m#\xbc\xe5\xc7G\xd0\xd9_\x0a\x15" +
	"#\xe6\x07\x1f\xd8\xc4uu\xfaJ:!7\xfev\xc5" +
	"\xb9\x1f\xf5/}<9\xcb\x02yt\xfc\xca\xdb\x09\x17" +
	"\xa7\xaelE\x90\xd0\x86\x8cm\xb9\xe2\xc4\x99\xc7\xb9W" +
	"\xabG\xdeO^\xfd(\xbe\xb3\xf8\xbf\xae{\xf1\x09\xe4" +
	".\xdd\xe4\x91?&On\xeeW\x11QGM\xdal" +
	"?\xb1\xe7p\xcc\xc8\xb5\xa4\xd3\xe2\x91dh\xeb\xdb\xa4" +
	"\xd7\x0f\xff\xe9\xb1'\xf9\xb5]0r3\x95/J\xf0" +
	"\x94\xd0o\xd3\xb0\xe7\x9e}29{\x94\xad\xd5#o" +
	"#\x04\xebG\x12\xb6\x06{\xaaj\xd7\xb4\x0e\x7f*\xd9" +
	"\x83\xbd\xfa#\x0dBpa\xe4\x1f\x11$\x86\x06n\xf8" +
	"x\x90\xf7\xe5\xa7\xf8\xe9=>\xea%B\xd01\x8a|" +
	"\"\x11\\\xdf6\xf4\x9b\xc8\x16\x9e\x87\xbe\xa3\xe9\xc8\x87" +
	"\x8c&\x04_]\xf1ga\xd6\xa6\x8b\xff\xc6+A\xc5" +
	"\xe8zBPM\x09\xa6\xde\xfe\xe6#G\x8e\xfd\xe9i" +
	"\xfe\x13\xca\xe8\x06B\x10\xa3\x04\xbf^8\xf4M_t" +
	"\xf5V^\x066\x8c\xa6j\xb4u4\x91\x81\xb6\xb3\x0f" +
	"\x86\x9f\xef\xd8\xbe\x15\x05\xc6\x80\xf3\x8d\xefz\x7fL(" +
	"j\xbdd\x9cw_S\xff\xe3\x92\x7f.\xfd1Yj" +
	"\x91[\xea>\x84r\xbb\xb7\x0c\xe4\xbd^I\xde\xeb\xf5" +
	"\x96\x9f\xf5>+ H,\x0f\x85\xaa\xbf\x90k\xfe\x9d" +
	"\x1f\xd6\x9e\x02\xda\xe3\xa1\x02\xc2\xd4\xba\xabW\x1f\x0a\xbd" +
	"{\xee'\xdc\xb2u\x144\x90e{\xf5\xd8\xe5oO" +
	"\xacl\xd9\xc6\x8f\xe7h\x01\x9d\x91\x93\xf4\xd5W\xb6\xed" +
	"\x86\xc8\x8d\xa5?\xe5\xd7\xf5R\x01]\xb6\x81c\x09A" +
	"\xc1\xca\xb5\xbb\x8e\xcdY\xff,\xdfC\xf1\xd8ct\xca" +
	"(\xc1\xc3\x9f\xdf\xfe\xf4#G\x1a\x9eC\x9eQ\xdch" +
	"\x10\x94+c/\x07y\xc5X\xf2Bl\xec\xf59r" +
	"\xe5\x04\x09\xa1\xc4\x15\xd2\xa6\x8f\x9eY\xf4\xc8s\x9c\xf0" +
	"\x8d\x9f@E\xec\x9a%\xa3\x13\xf3o\xee\xbb\x9d_\x9c" +
	"!\x13\xe8\xe2\x8c\x99@\xbe\x14{\xef\x8fZ\xdf\xa6\xd5" +
	"\xdb\x93\xbcR\x09\xaa\x9e@\x17g\xc1\x042\xb3\xe2\xe5" +
	"\x03<%\x0dO\xa5\xf4\xb0}\x02\x95\xa0=\xb4\x07X" +
	"]\xff\xfa\xad\xd3\xe4\x1d]x=>\xa1\x1f\xc8\x1d\x13" +
	"(\x86M\x90D\xf9\xf4D\xc2\xeb\x98w\x8f\x8c\xbf\xfb" +
	"\xd9\xc7wp\xbc\x1e\x9dHul\x97:\xff\xc1\x8e\xb9" +
	"\xa3\x9f\xe7\xbf\xb4o\"\x15\xe6\xc3\x13\xc9\x97\x0a\xf5/" +
	"\x9e\xbc\xf8\x1f\xeb\x9f\xe7\xf0\xea4y\x9e\x93X\x11\xbb" +
	"m\xefC\x9f\x1dx\x9e_\xcd\xe3\x13\xe9jv\xd0W" +
	"?\x96;\x0a\xa7\xfe\xf2\x87/p_\xcd\x9d\xb4\x83\xbc" +
	"z\xdb\xccw\xb7\xfb\x07\x9e\x7f\x81\x7f\xf5\xbc\xfdj\xee" +
	"$\xf2\xaaz\xe3\x81xCb\xcaNN\x10*\xecW" +
	"\xff}\xf3\x87'\x97z\xc3\xbb\xb8'\xe3'm&O" +
	"\xac\x1f\xee|\xe0\x97\x93\xfes\x17\xdf\xe9\x90I\x8f\x90" +
	"N\xc7\xd3N\xdf\x09\xfd\xfd\xa3\xffU\xf2\xd5.^D" +
	"fO\xa2\xb3\x1a\xa0\x04\xca\xa0\xe9\xbf\x19v\xb1\xf4\xc5" +
	"\xa4\x88\xd8\x14+&\xd1\xd9X=\x89,\xcc++>" +
	"\xbef\xda\xefo~1E)N\xda\x14\xa7)\xc5w" +
	"\x0e~\xff\xa9\x9c\xa5\xe3_\xe2?\xb2\xa0\x90r\xb1\xac" +
	"\x90\xc2\xc7\x82\xeb\xdf|\xff\x93\x86\x97\xb8\x01l($" +
	"\xbbMb\xf1\x96\x89cw\xdct\xc7\xcf;\xc1<%" +
	"i+,\x00y}\xa1$\xaf/\xf4\xca\xbb\x0b\x09\x8a" +
	"XoL\xff\xdd\xe8\xab~\xb5\x87\x9b\xde\x8dW\xd39" +
	"\xfa\xd9_;&V\x94\x9f\xd8\xc3\xf3\xb0\xeej\xaa\x0b" +
	"\x1b\xaf&<|~\xe9\xcb\x13\xfb+\xf5Wx\x08\xdb" +
	"s5\x15\xc0\xfdW\x93Q|\xb7\xe5_\xe6,?\xf9" +
	"\xce+\x1c\x93\xa3\x8a\xe8\xd6w\xf7}\x93\x86\xc6n\xee" +
	"\xbb\x97\xef\xbbo\x11\xdd\xfa\x86\x17\x91\xbew]5\x7f" +
	"\xecC\x9f\x0e|\x95{\xb5\xb6\x88\x8e\xef\xe5\x0f/U" +
	">\xb3\xfd\x96\xd7R@\xab\x88\xeeK\xb3\xe9\xab;O" +
	"$~TX\xfe\x83\xd7\xb8\x11\xb5\x14\xd1\xb5\xbd\xf8\xfc" +
	"\xfe\xa7g\x04?\xe3\x9f\xe0\xa2\xb7\xc9\x93\xc7\x0f\xae\xae" +
	"\x99\xbct\xc1/;\xef7\xb4\xf7\x7f*\x0a\x82\x1c+" +
	"\x92\x10\x92\xd5\"2\xae\xef=\x9d\x7fGk\xed\xf6}" +
	"\x1csG\x8a\xa84\x87\xa6\x97>\xf6Y\xdb\xff\xd8\xc7" +
	"3\xb7\xb7\x88.\xec!\xca\xdc\xe6\xd0{\x83\xbe\xff\xda" +
	"\x8a\xd7;\xad\x0e\x05\xce\x8e\xa2\x02\x90\xcf\x17I\xf2\xf9" +
	"\"\xaf<\xbe\x98\xc0g\xedu;?{\xbb\xe3\xd5\xd7" +
	"y\x95+\xa6cI\x0c}\xe8\xe9\xe0'\x1d\xafs<" +
	"\xec/\xa6\xc0q\xfd\xe9E\xff\xfb\xfd\xbf\x8c\xfc\x15\xa7" +
	"k\xbb\x8b\xa9\x9a\xce\xaa\x9a\xf1\xf6\xf4\x95\xeb\xdf\xe0g" +
	"}K1]\xd1\x9d\xc5\x84\xbb\xd6\xe77\xe5_\x15\xda" +
	"\xf9\x06\xbfW\x9e\xb4\x09\xce\x16\x93\x91\x7f]\xd2\xfe\xe1" +
	"\xc7\x8d'\xdf\xe0\x97\xbc\xb6\x84.\xf9\xe2\x12BpO" +
	"\xf3 \xfc\xbb\xc7\xee\xde\xcf\xb1\xb5\xbb\x84n\xa6#\xc4" +
	"\xb6\xd0\xedC\xa7\x1e\xe0\x9el-\xa1+\xbanQ\xeb" +
	"\x9d\x87\xce]<\xc0\x0drC\x095\x03\xaey\xfa\xd3" +
	"\x9f\xbd|\xf9\x82\x83\xbc2\xae.\xa1\x1a\xbe\xa1\x840" +
	"\xfc\xd2\x7f\xdd\xf8\x82\xf2U\xc7[\xdc\xab\xfbJ\xe8," +
	"\xdc\xf2\xf9\x8b\x13^xp\xf1a~%v\x96\xd0\x95" +
	"\xd8K_m|\xe6\xb6\xcd\xbf\x1e}\xeb\xe1N+!" +
	"Q[\xaa\xe4r\x90O\x97H\xf2\xe9\x12o\xf9\x90\xef" +
	"\xfc\x90X\x18\x1f\x84\x9a\xab&<\xf7\xf2anZ=" +
	"\x93)\xff\xf9\x87?\xfa\x02\xcf\xd0~\xc3\x8d\xecR)" +
	"e\xe2\xab\xb3\x81\xf5\x0f|\xf1\xe5oy\x03\xae\x94\x0a" +
	"\xca\x13C\xee6\xdf\x1f%\xbd\xc3\xbd\xd3^J\xe7\xe9" +
	"\xb6\xffs\xef\x99\xbf\xcbW\xbc\xd3\x89/\xba\x1d\x1e." +
	"-\x00\xb9\xbdT\x92\xdbK\xbd\xe5\xb9\x93o$|\xbd" +
	"W\xab\xe6\xff\xe2\x7f\xee:\x9a\x9c#*I\x8b\xcb(" +
	"T\xe02j\x86-\xeds&dz\x8e\xf1\xab\x9e[" +
	"N\x15fH9\x99\x89CO\xee\xbb\xf4\xc9m\xcb\xde" +
	"epDW\xb5\xa2\x9cv1\xbb\x9ctQ3\xb3\xfe" +
	"o\xf1\xf1\x9b\xdf\xeb\xac\x1e\xb6\xd8\x96\x97\x81|\xbe\\" +
	"\x92\xcf\x97{\xe5\xf1\xd7\x10P9}k\xcb\xbf\xfc\xec" +
	"<|\x90\xec\xd1\x06\xed\x0aj\x9a\x0c\xa9 \x9f\xac|" +
	"e\xcc\xc6\x1b\x86\x0c\xf8\x80[\xb7\x8a\x8aG\xc8\xf0\xe7" +
	"\xedx\xa4jz\xfdd\xfe\xc9\xf8\x0a*\xf1\x87\x0e\x1d" +
	"\xff\xdbW\xe3\xee\xfd eC\xac\xa0\xb27\x86v:" +
	"\xf3\xe2c\xf5\x03\xff\xfc\xec\x07\xbc\xb4TW\xdcO\x91" +
	"\x99\x12\x0cT\xee\xfe46\xf7\xdc\x07\xfcL\xb4T\xd0" +
	"q\xae\xa3\x04\x8fm(W\xc6>=\xbb\x9d'\xd8V" +
	"A\xed\x83\xdd\x94@\xdd\xfc\xdc\xd7_\x99\x8b\xda\xd3\x81" +
	"\xeb\xd1\x8a \xc8\x1d\x15\x04&NU\x90Y\xf8\xf3\xb1" +
	";\xb7\xcd\xfc\xc3U\x1f\xa5\x80\xc1\xb5t\xa78t-" +
	"\x05\xd0\xbdo\x9d\xa8\xfdb\xd5G\xbc\xa1r-\x9d\x85" +
	"/\x0f\xbc0;\xe7?\x9f\xfb\x88\x13\x9c\xe3\xd7R\x13" +
	"\xe6\xf0\xc2-C7|\xd6\xef\x04?\xb5\xfb\xaf\xa5*" +
	"z\x94v\xda\xf1\xd6\x93\x9b65\xde{\xa2\x13\x8bt" +
	"Q?\xbfv\x1e\xc8\xb9S\x08\x8b0\x85\xa8\xeb\x88\xe3" +
	"\x9f\xbes\xeb\xb6\xdd\x9f\xf0S\xb6l\x0a\xed-6\x85" +
	"*\x98Qt\xf0\x17[\xbe\xfc\x84\x9f\x91\x0dS\xe8\x9c" +
	"n\xa1\x04o\xfe\xe5{\xf9\xf7~\xba\xe8\x14Opd" +
	"\x0a\xb5\x84\xdb)A\xdd\x9c\xd2g\x13w<y\x8a\x1b" +
	"\xe4\x85)T;vJ\x07\xd7\x8c+\xd8s*\xddd" +
	"\x9e\x9eR\x08\xf2\x05\xca\xe9\xf9)d2/\xbcw\xc7" +
	"\xcf\x97\xdd\xf4\xf2\x1f\xba\xd8*\xedS\x05\x90;\xa6R" +
	"[e\xaa\x94#\xb7M'\xb6\xca\xf4\x99\xe7\xc4YW" +
	"~\xfd\x07&\xd3\xb6\xe9:\x9d0^\xbeb:u\x19" +
	".\xfdG\x9f_\xfe\xfe\xd6!\x7fL\x11\xfb\x8d\xd7\xd1" +
	"\xf5\xd9z\x1d\x11\xfb\xb5\xbfy\xf5M\xeb\xa9\xa5\x7f\xe4" +
	"g\xe7\xbb\x95tl\xb3+\xc9\xd8\xea\xff\\\xf1\xd8\xfc" +
	"\x8dU\x7f\xe2\x17\x03WR|j\xa1\x04K&\xfe\xd6" +
	"\xf7\xab\x8aI\xa7y\x11x\xa2\x92\xa2\xd06J\xf0\xd0" +
	"{\x1f{w\x7f\xf1\xe1\x19N\xdc\x8fWR\x1c8\xf4" +
	"\xfe'\x7f\xbb7o\xf7g\xe9v\x8aC\x95\xf3@n" +
	"\xaf\x94\xe4\xf6J\xaf\xdcw\x06\xe1\xf5/\x8f\x0a7-" +
	")\x1b\xf7\x17Nb\xb6\xce\xa0\xa8\x7f\xec\x07#\x0f(" +
	"\xdb\xd6}\x99\xb2\x843\xec%\x9cAx\xf8\xde\xb4]" +
	"\xf2\xee\xe2\xf7R\x08\xf6\xcd\xa0\xf3p\x98\x12L\xddZ" +
	"x\xcb\xbe\xc1\x07\xce\xf3\x04\xa7gP\xbd\xb9@\x09\xbe" +
	"\x1a[\x7f\xd3w\xfb\x8e\xff+O0\xbc\x8a\x0es|" +
	"\x15!x\xf7\x8d\xf7\xcf\xbc;\xfe\xc3\xbf\xa6\x05\x90\xc5" +
	"U5 \xe3*\xbaBUti\x82\xa7j^\xfb\x81" +
	"w\xf1\xd7\xe9d\xb8\xc5_\x06\xf2:\xbf$\xaf\xf3{" +
	"\xe5\xdd~\"\xc5\xdbg\xb4W\xad3^\xb9\xc0\x89\xd8" +
	"\xc0j\x0a\xcd\xed\x17\xf3\x8a\xaf\xfay\xce7<c\x17" +
	"\xfcth\xb9\xd5\x84\xb1[\xae*\xd8\xf8\xcd=\xb3\xbe" +
	"\xe1\xe1\xa6\x9a\x9a(\xe3\xe6\x1c\xbc\xfc\xdc\x9d?\xfd\xa6" +
	"\x8b\xc0y\xaa\xfb\x81<\xa6\x9aZ3\xd5\xf7\x0a\xf2\x9e" +
	"\x1a\"p\xe76\xfdk\xd9\xb0Us/v!\xdfR" +
	"\xd3\x0f\xe4\x9d\x84F\xde^#\xc9\xdbk\xaeG(Q" +
	"\xbf\xfe\xdc\xa5\xa1\xb3\x96_\xe4>\xbb\xbb\x86r\xbc)" +
	"\xf0l\xff\x03\xb1\x1d\x17\xb9\xb1l\xa9\xa1\xf87E\xd8" +
	"x|T\xeb=\x97R\xec\xca\x0d5\x14\x00\x9f\xa8i" +
	"ES\x13&6Vb\xe3;\xe1>J\\\x8b\x7f'" +
	"\xaa\x87\x95\xe8?+q\xb5$L~O\x9b\x13*\x89" +
	"\xaa\xa65{U<\xaa\x86U\xabN\xd5\xccqAl" +
	"\xb6D-\x13\xa1@\x8e\x98\x83P\x0e \xe4\x19X\x88" +
	"P\xe02\x11\x02\xe3\x04\xc8\x8b\xab\x9a\x09\x83\x10\xd4\x89" +
	"\x00\x83]lA@\x1a\x9d\x0f\xe6\xa4\xfd`\x1d\xc6F" +
	"\xc8R\xac\x16\x13\xd5\x01\x04r@H\xdc\xf2\xa3\xa7\x03" +
	"\xfb\xde\xbf\xff\x10\x0a\xe4\x08P=\x0c`\x00B\x1e\xd8" +
	"\x91\xd0\xb0\xe53-\xc5\x82\x16\xd3\xa77\xfa\x14_^" +
	"\x1cc\x03\xa1@\xbe\xc3\xd6j\xc2\xd6*\x11\x02w\x0b" +
	"\xe0\x01\xc8's\xe0\xb9\xab\x01\xa1\xc0\x9d\"\x04\x1e\x10" +
	"\xc0#\x08\xf9  \xe4Y?\x0f\xa1\xc0}\"\x04\x1e" +
	"\x15\x00\xc4|\x10\x11\xf2<L\x08\x1f\x12!\xf0\x94\x00" +
	"\x9e\x1c1\x1fr\x10\xf2<Q\x86P\xe0Q\x11\x02\xcf" +
	"\x08\x90\xa7)1\x0c\x03\x90\x00\x03\x88q\xa0jM\xd8" +
	"\x88\x1bHR5\xcbi\x8d*\xa6\x15\xc2XC\x089" +
	"m\x86\xde\xa2E,CER|\x81\x099H\x80\x1c" +
	"\x04^l\x18\xba\xe1\xd0\xf4<MA\x1c\xd7KV\xb4" +
	"\xa8\xd6\xb8`\x95\xbd\x1c\xce\x0b\xfd\xd3\xbe\xb0\x10[%" +
	"a]\xd3p\xd8\x1aW\xa7\x18J\xccD\xec\x85\xee?" +
	"\xd0hZJC\x10\xc7\xf4\x95x\\\x9d\x92G\xde\xe2" +
	"\xd7<\x88P`\x80\x08\x81a\x02$bz\x8bf-" +
	"Tb\x08p\x96C\x98\x13*i\xd1\xe2\xaa6.\x88" +
	"\xbd\xa9#\xe8\x96\xde\xb4\x94&\xdc\x95\xbeO\x86\x11," +
	"\xd6(w\xd5\xd1hRv\xc1\xcc8\xbd1\xdd\xc2s" +
	"\xf4h\x04\x83\x91^\x0e\xc7Q9\x9c\x0c\x0d\x90\xa8\xf6" +
	"5\x12J#\xc7g5+\x96O\xf1\x19\xf4u\x9fj" +
	"\xfa\x94hTo\xc5\x11\x9f\xa5\xfb\x94pX\xc2f'" +
	"\xb5\x99\x96T\x9b|\x01\xaa\xecN\xba\xcc^n\xb7\xb3" +
	"\x81S\xf5\xb2\xca^\xd7\xc0\x00\xa7\xfb\xd9\xa4{\xbf\x08" +
	"\x81\xf9\x9c\xf8\xd7\x12\x9d\x98%B\xa0\x8e\x13\xff\x05#" +
	"\x10\x0a\xcc\x15!\xb0H\x80\xaa\xb8\x81\x1b\xd5U\x8c\x91" +
	"\xbcFC\x8f\xb1\x1f\xa2\xa5wa0{\xe4H\x0a\xde" +
	"\x7f\x1f\x0e;O!\x836~\x89\xca\xdc%\xf2\x86\x89" +
	"\x1c1\x85\xcd\xb0BT\xfeZ\x15\xd5\x9a\xa3\x1b\xb5\x1a" +
	"\xd1\xd4\xec\xe4|\xa6\xae5\xaaM\xb35\xcbhC\xdd" +
	"`\xa0/){\x85D\xf6\xc2\x94^\xf4a\xf2\x86o" +
	"\xa2\xaa\x85\xa3-\x11Uk\xf2\xc5\xb0\xa5\xf8\xd4<\xad" +
	"Q\x9f\x94\x0a\x8a\x05\xe9@\x914\xde!B\xe0>n" +
	"\xce\xd7\x15pH)&Qq}\x0dB\x81\xbbE\x08" +
	"<$\x00\xe4\xd8\xa0\xb8\xe16\x84\x02\x0f\x88\x10x\\" +
	"\x00i9nc+ \xadT\xa2\xce\xff\x11=\xcc\xfe" +
	"_\x13\xc1\x8d\x0aQD\xb6R\x1a\xc6\x113\x88M\x94" +
	"g)\x86\x05\x80\x04\x80\xec@0\xaejM\xe3\xea\xbc" +
	"T\xb2\xb2\xa1\xa7P\xe0\xe8\xcae\xce\xacL\"h6" +
	"Q\x84\xc05\xdc\xacL&c-\x12!0\x95A\\" +
	"\x9db!hv\xc6\xa1\xc7-U\xd7L\x18\xecF\x03" +
	"\x10\xc0\xe0\xec\x84c%6LU\xd7\x98Z\xa0\x0c\xef" +
	"\x10\x08\xb7\x91%\xa4\xac\xc4TV%^\x9c\xba\x7f\xab" +
	"\xb5YWbjZ\xe9\xe6\x01\xc8&\x83\xc1\xae\xeb\x96" +
	"\xfdXl)\x9c\xa5\x87\xe9h\xc4\xd4\x8d\xa2\xc0\xfd\x08" +
	"/\x1d\xd9\x02>\xdbz2-\x16\xd9\xc2KE\x08\\" +
	"'@\x82v\x96\xbaX\x09\x03\xc7\xf5:\xc5j\xe6\xb7" +
	"\xe2,$F%\xca\x9b\x94\xb0\xc0`\x87\x07\x85|\xee" +
	"V\x11\x02Q\x8e\x07\x95\xa0ED\x84@\x9cS\xa3\x18" +
	"\x91\xa2f\x11\x02\x16\xa7F+\xc8\xebq\x11\x02w\x08" +
	"\x90hPL\xdc\x893\xaf\xde\xaa\xb9\xbb\xc1\x9a\x06%" +
	"\xbc\x1ck\x11\x87\xef\xb8b\x9a\xad\xba\x11I7\x96n" +
	"w\x8c&\xc5hP\x9a\xf0L=\x1a\xa5v@rL" +
	"\xdcJ\xd5s[\xba\xd2\xd4d`\xd3T\x91\xb8\x12\xf7" +
	"Z#\x99Y\xd2\x1d\x92\x1a8\x1e\xed\x85 \x10;!" +
	"\x8d`\x15\xba=\xe6\xc5\x15\xab9\xfb\x0e\xc3\x8a\xe5h" +
	"P\xb7=\xeaFW\xb0\xefv/\x09G\xb1b\xa4\xdb" +
	"\xee\xfe\xff\xefw\xe9\x05`\xc9\xccPIX\x8f\xc5T" +
	"\xabVk\xd4\xdd\xd1sjU\xef\xaa\x95\xa3U\xd38" +
	"\x08T\xcd%JT\x8d\x04\x91\x88\x1b\x99HT\xd9}" +
	"\xc2`7\x8a\xdc\x096\xc4\xb4\xec\x84,\xc5K9\xe9" +
	"\xd9\xbeZ\x0b\x09\xe2\x0f\x10\xc2\\jQQ\x9b\xbf8" +
	"\xaa.\xc7\xbe\x086\xc3\x86J!\x98z\x00Z\x9bO" +
	"\xd3#\x18Q\x1cH\x0eJ\xae\x86B\x84B\xd7\x81\x08" +
	"\xa1\xb9\xe0\xce\xba<\x1b\xe6!\x14\x9aE\xda\xeb@\x00" +
	"\xb0\xe7]^@\xc9\xe7\x92\xe6E\x84\\\x04\xaa\xafr" +
	"\x00\xca\x10\x0a\xcd'\xed7\x91\xf6\x9c;\xe9\xd6'/" +
	"\xa6\xedu\xa4})i\xcf\xcd\xcd\x87\\\x84\xe4\x7f\xa2" +
	"\xed\x8bH\xfb\xad\xa4\xbd\x8f\x90\x0f}\x10\x92\x97A\x0d" +
	"B\xa1\x9bH{\x84\xb4Kw\xe5\x13\xa7LV(;" +
	"\xb7\x92\xf6(i\xbflm>\\\x86\x90\xacB=B" +
	"\xa1f\xd2n\x91\xf6\xbeb>\xf4EH^\x01\x0d\x08" +
	"\x85\xe2\xa4\xfd\x0e\xd2\xde/'\x1f\xfa!$\xb7Q\xfe" +
	"-\xd2~'i\xef\x9f\x9b\x0f\xfd\x11\x92WS\xfa;" +
	"H\xfb}\xd0Y],\x03\xe3\xb9\x8aI\xf1g \x12" +
	"` \x82<S\xbd\x1dC_$@_\x04^\x95\xcc" +
	"\xab\xfb\xcb\x9c\xa5\x1al\xfd\xbd\x11\x1c\xb7\x9a\x99\x9e\xac" +
	"\x89\xe9\x91E*\xe7\x15\xa9f\x9d\xaai\x98\x02\x15\x03" +
	"\x11\xd5\xb4\xf5\x04\x89\xaa\xbb\xd7\x87u\xcd\xc2\x9a5\x17" +
	"I\x8a\xd9\xecp\xd1br&q\x12\x04SIz\xb7" +
	";e\xd2y\"R0\xd8\xcd%w\x12\xe5\x9cn5" +
	"+\xaa7\x11\x85\x972\x9b!sB%x\x95jZ" +
	"fZ\x90\xe47d\x9b\xac\x0b\xf6f\xa5\xde\x19\xb6a" +
	"\x03\xaf\xcc\xdeL\xee\x0am\xcc\x8f\xea\x9d\xa1,v\xb7" +
	"B@A`\x96\x98\xcbe\x0c\x81\x15G\xc8\x1e\xa1\x10" +
	"\x09r\xae \x81\x9b\xb3\x07\x96\xa8\x96/\x00yz\x16" +
	"$\x10\x9c\xfc7\xb0X\x89|\x8a>=\x0e\x12\x88N" +
	"V\x1fX\x00G>\x0ceH\x90\xf7\x81\x049N$" +
	"\x18X\x9cY\xde\x0d5H\x90\xb7\x81\x04\xb9N\xd0\x13" +
	"X\xeeQ~\x02\x82H\x90\x1f\x06\x09\xfa89\x10`" +
	"\xa9Yy\x1d}\xba\x1a$\x90\x9c\x84\x0c\xb0\xe4\xa3\xbc" +
	"\x82>UA\x82\xcb\x9c\xac?\xb0\x1c\xb5\xbc\x8c>]" +
	"\x0c\x12\xf4u\xc2\x89\xc0\x82~r-LC\x82\\\x09" +
	"\x12\xf4s\xe2\xf8\xc0\xf2W\xf2d\x98\x87\x04y\x12H" +
	"\xd0\xdf\xa9\x15\x01\x96,\x91GA\x03\x12\xe4! \xc1" +
	"\x00'\x0d\x02,\x9b'\xf7\x85z$\xc8\x00\x12\x0ct" +
	"B\xea\xc0\xd2)\x9e\xf3A$x\xceJ0\xc8I\x89" +
	"\x01\xab\x1b\xf1\x9cZ\x8b\x04O\xbb\x04yNa\x04\xb0" +
	"\x9c\xa8\xe7H\x0d\x12<\xfb%\x18\xecde\x81\xd5p" +
	"x\xf64 \xc1\xb3S\xca[\xd1\xa2Z~\x1a8j" +
	"\xf2C\x1e1\xb8\xfc\xe0\xa5\xf6\xb6\x1f\xd6\xb4h\xc9\xff" +
	"\x12\xb6\x1a_\x8f\x11\xb8\xbfB)\xbf\xaa\xa3\x08\xa2\xce" +
	"\xafY:\x82\xb0\x1f\xaa\x1apX\x8fa?$h8" +
	"\xa0:B\xc0\x88\xfd\x0a\xe2\x18\x92\xf4\x95\xee\xd3x\x1c" +
	"\x89\xd16\xf6s\xbej\xda\xfd\xb3H\x02$C\x09\xc8" +
	"\x0fk\x92\x06\xbc\x1f\x12\xcc\xcfC\x12\xe5\xbd\x0ez\x01" +
	"K!lu5\xe6{4\\\xfeq\x96\x10\x01\x0dK" +
	"q\x90\x8b\xb7\x05\x08Z\x8c\x13!P\xcaY*\xc55" +
	"\xae\x81\xc0C\xc8\x1aKiZ\xc8\xc7\xc22\x0e\xc3H" +
	"F\x95\xba\x9a\xa0\x19G\"v\xe7\xe7\xd8\xeer)E" +
	"\x11\x16~\x06\x16\x1b\xe5t\x0e\x9c\xf06\xb0l\x8a\xbc" +
	"\x8c\xea\xcdb\x8a\",\x1f\x09,\xa3.\xd7\xd2\xa7\xd5" +
	"\x14EXB\x14X\xa5\x8f\\A\xf5\xa6\x98\xa2\x08K" +
	"\x80\x03\x0b\xf3\xcbc\xe8\xd3\xe1\x14EX\x02\x16X\x95" +
	"\x81<\x90jd.E\x11\x96S\x03\x96\xaf\xf1\\ " +
	":\xf79\xc1\x10\x96\x1d\x03\x96\x99\xf3t\x18H\xf0\x9c" +
	"$\x08\xc2\xb2\xa4\xc0*\x8c<G\xa7!\xc1sH\x82" +
	"\xbe\xac\x8e\x8c\xcb\x1d\xee\xad\xa1:\x07\xfd\x9c\x82\x06`" +
	"\xc9H\xcf\xd6z$x\x9e \xd8\xc120\xc0\xb2\xee" +
	"\x9e\x0dDW\xd7I\x09\xdb\x05\xad\x8e \x88\xf8!\xf9" +
	"+\x18\xb35\xca\xfe5\xdf\xe4\x7f\x85\x14\xe2@8?" +
	"\xebT$\x12-O\xfe\x9c\x19E\x12V\x0c?$4" +
	"l\xcd\xd7\xc3\xc4c\xc3\xfc//^\x88WY~\xe6" +
	"\x9d\xfaaM2\x8c\xe9\x87DD5\xe9\x0f$\xd2\x9f" +
	"\xba\x16U5\\\x87\x91\x84\x0d3U\x093EQ\xb3" +
	"\x0b \xcc\x09\x95XzK\xb89]0\xf4\xdb\xbb\"" +
	"T\x11\x82\xd8\xcck\xc9\xec\xcds\xb0q=N\xef\xc1" +
	"\xf0\xdb\xf0J%\xda\x82\xb3t\x0f\xba\xc4\xab\x92\x83\xcc" +
	"\x9e#\x16`\xed\xccQ\x81\x9b\x1b\x90\x94h\xd4M\x0d" +
	"\xf0V\xd6\xa0\x8c\x0c\xba\xf1\x8f\x99\xc4\x1e\xc9v\xca\xc8" +
	"kLP\xc2\x0ev\xf6&>\x93\xce\xd8\xa9qg\x99" +
	"m\x030\xd8\xcdNfm66b\x8b\xc8SW\x18" +
	"\xe4\x8d\xb5\xd6f\xbd\x17\xe2\xb4<\xa2\x1a\xe9b&\x85" +
	".\xa0;xn\xb8\xce]\xaa\xd4\x86\x0d\xacX\xb8N" +
	"A^\x03kil\xd0\xeeGd\xb6i\xe1t\x9f\x9f" +
	"\x97\xc6\xb7\x0cr\x11\x9bV\xd5j\xbe\xb1Y\x8f\xf1\x11" +
	"\x0d\x0d\xe3\xc8\x1cl\x85\x114gi\x05\xbbB2\xdf" +
	"\xecq\xe1\xc6\x09\xb0\xc6&\xe4rUN\xa5MV\xb9" +
	"*w\xfd\xba$a\xc4nB\xbb1)\xa6Z='" +
	"\xb6\xeeO\x84T\xad)\x8a}Q\xd0\x9b\xec\xa8.\x02" +
	">\xeeD\xd6q\xa9\x08\x81fnc\xc6\x05\\0\x8a" +
	"\x85\x10\xd4\xc2d0\xeaN.\xee\xc4\xa7\xc4\xf2\x9a9" +
	"?J\x8a\x99MN\x84\xc1R\x9a\x9ci!m\x83\x10" +
	"\xe4E\x14\xabWX\xc2\xcc\xa9h[oT\x95\xed\x12" +
	"ZS&\x17\xa6wZa\xe7\xb0\xbaX95\x19\xac" +
	"\x9c5\xa6\x11\xae\xe3\x14cM\xc4\xb4\xea\xd2\xc1{\xff" +
	"\x0cN\x99\x13}\xed1\xedFf\x80mc\xd80\x9d" +
	"\x89K\x07\xf0\xe3\x04\xe2\x977\xea\x9c\xfc:\x05\xe8Y" +
	"\xcbo\x8bF\xcc\xbf.\xf2\x9bm\x08\xb1\xa70\x1f\xe1" +
	"\xaf\xd1\xc08\xe2\xf2\xe7\xd4'd\x05\xf8\x9c\x14E\"" +
	"\xf6\xfc\x89\xdf.\xed\xd7%\xc2\x9e~B\x16\x10\xfa\x1b" +
	"h<\x09L\xa2\xa5\x19\xe0\x8b\x0f8\x1bX\x89\xdc\xa0" +
	"E\xdb\xf88\x87\xa1\xebV\xef\x02\xce\xcc\x1e\xef\xa20" +
	"=\x85\xc8\xad\xb4b\xc2\x1b$DL`\xb0[6\x9d" +
	"U\x80.\x88c\x12Q\xc5\x1eSPe\x90\xa8\xd5\x1a" +
	"u\x9f\xe23D;\xeb\x19\xc7\xd8\xf0\xb5b_Lm" +
	"j\xb6|d7\xf0\xfa\x08\xb6\xa7\xc6A\x0b\xd3\xc5A" +
	"\x1b\xdc\x90\xa7\x03b\x01\xa2\x8c\xf3m\xb8\xcb\"\xdf\xbe" +
	"\xc6\xce\xa2r:\xe1\x1ca\xc8^\xe6\\s&;k" +
	"\xa1\xb3e\x92u\x1c\xc8\xb6&\xbb$\x06\xb3\xca\xff\xa4" +
	"A\xc7o\xb5\xb7e\xe5\x9f\xb2\x8fe\xf2\x0f\xcb8\xff" +
	"\x90\xcb\xf4tc\x88v\xef\xe4\xea\xf1\xb6\xff\xa7h\x9d" +
	"\x85\xf1\x90%fp\xf9\xb5dR1kTKVV" +
	"d\xb9\xfc\xee{\xf3U3\xbd\xe9?\xcd]\xff*\x8a" +
	"}\xdc\xf2;\xd5T\xbd\x85^\xba\x81g-\xd1vI" +
	"\xc7\xb7\xf1\x8f\xd2\x83\xd0,\xb5\x11\x1a\xd3C\xd0\xc8\xa4" +
	"\xc1\xf4Mb\x96\xda\xd8\x88\x0d\xac\x09a\xeck\xc0V" +
	"+\xc6\x9a\xcfj\xd5}\xe1*\xba\xf5\x9a\x08\x05F:" +
	"\x9c\xec!2\xfa\xa2\x08\x81\xdfrBt\x98\x08\xd1A" +
	"\x11\x02\x9fp\xd0s\x924\xfe^\x84\xc0\x97\x9c\xfd\xf4" +
	"9i\xfcL\x84\xd0e4\x0b`'\xc0\xe5\\(C" +
	"(\x08\"\x84F\xf2I\x80\xe10\x0d\xa1P>i/" +
	"\xa5I\x80>v\x12\xa0\x98\x06\xfb\x8bXN\xc2\xabD" +
	"\"\xfc6\xc9\xe3\xf4 d\xeb\xf2\xca\x9e\x08\xd4&M" +
	"7z\"\x88\xa9\xa6\xa9jM\xdd\x12x;}\xc0)" +
	"\xa6\xb3\x1fW\xc5\xb0\xd1\xd4\xc3s\x1ao\x8b\xaaa\x8b" +
	"\xect\xdd\x12e\x1b\x14\xca\xd2\x1a\xe9\xe4\xd8\xf5\"\x84" +
	"F\xd0\xa5\x17&)\xff\x05Z\xf8\x96\xc9\xccoV$" +
	"\xad\x09\xf7,\xb5g\x127h\xd87W5-A7" +
	"\xda\x92\xd5\x1b\x8d\xba\xe1S|y\x8dj\x14#\x14\x18" +
	"\xe6\xc8\xec\x13\x85n\xd1\x99#\xb3[\x88\xba?.B" +
	"\xe0'\x9c\xccn%\x94O\x89\x10x\x8e\x93\xd9m\xa4" +
	"\xf1\x19\x11\x02/\xb8\"\xeb\xd9N\x04\xf9'\"\x04^" +
	"t\x05\xd6\xb3s-B\x81\x17D\x08\xfc\xa2\x93\x9aV" +
	"\x85\x9b\x15\xad\xc9\x81\xf0\xbcf\xacD\xba\xa6\xfc\xf24" +
	"\xbc*M&p\x0d\x95\xaeE\xae\xb9\xde\xaa\x98u\x06" +
	"^\xa9\x82\xdebF\xdb\xaa-\xd4{\xbf\"\x12\xb1\x11" +
	"\x1aR\x0a\x9e\x82\\&\x95\xcd\xd3\x82`\xd2\x82\xb8\x89" +
	"\x9b\xa7\xc5d\xf4u\"\x04\x96vS\xbc\xf6\x8f\xac\xf6" +
	" B\xc4\x02Z4\x9c\x951\xf3c\xd8\x9e\xeb`\xb7" +
	"x\xbc\xf7\x1fJ7?\x05\xae\xd9\xe5X]\xf5\xbc\xd5" +
	"\x05I\xab\xab\xde\x9d\x9e\x14G\xcbRcXo\xb1B" +
	"H\xc4a\xe8\x8f\x04\xe8\x8f\xecb\x0b\x0b/P\x90h" +
	".\xcf\x12\xd7k#\xd8\xabY\xaa\xd5\xd6\xb3yy9" +
	"3/\x1bt\xb1\xc5\xf2\xe9-\x86/\xdcb\x18X\xb3" +
	"|-&6\xec\xfaO\xa2+\x9c\x7f\xdc\x90u]\x06" +
	"\xa1\x8c\x8a\x10X\xe5\xd6|\xb6\x10\x9b\xde\xb2}\xe6D" +
	"\xf2S\x8b\x91\xc4e!S\x0b3\xba\xa9\xfaT\xcd\x1b" +
	"\xa8\x17\xc7{\x03\xbd\x95\x914A!^D,5\xbc" +
	"\x1c[,'\x9b\x8d\xe2$\x13)]\x8b \xb328" +
	":\x9b\xc2={$\xccx\xeb\x8d\x05\x90\x05\xebNI" +
	"EOe\xa8\x9d\xca~2\xa7Mc\xcarLl\x88" +
	"\xb4\x01\xa3\x94\xec\xb0\xda\xd8\x08\x83\xddc@Y\x87\xf9" +
	"\x921\x00Vv\xd6MD\x83\x8b\xc0d\xe8\xd3\x16\x13" +
	"\xca.\xd0xR\xa6\xf8PaO\xf1\xa18\xb7W\xf0" +
	"J\x91\xe2o\xe5)\x91\x88#\xf6y1\x85S\xf5\xf4" +
	":\x90m\x16\xfc\xdb\xe4\x802\xd9\xef\xc1X\xb6\xa5\xbe" +
	"\xc9\xe2\xa2^T\xd3\xb9\x00\xcbB\x12\xbdT\xd1\xf4\x8c" +
	"p\xf9u;\x91\x95>t\xeb\xfa=\xd3\\\xbf\xa7\xd3" +
	"Vm\x17\xe4\xf4B\xbd\xdc\x8c\xc2\xb7\xa8\xde\xeb^\xaf" +
	"\x9aU\xd3\xd2\x8d\xb6\xf4'\x06xg5I\xe8\x9a\x8e" +
	"\xce\x81\xb6\xac\xbc\x15\xfe[\xac\xc6\xf8\x1f#M|," +
	"\xae\xb3\x0f\x94~c[\x82\x8d<S\xd5\xb5NJi" +
	"\xa4\xdb\x94\x82\\] S\xca\x15\xb7\xbbu\x81\x8eR" +
	"\xb6\xd5\xbbA\xdb\xe4\xf7\x97`\xe4\xb5\xd3\x0e\xa9\xa3\x09" +
	"b\x04+;W\xcc,AU8\x958\xf9 \x88\xc4" +
	"4\x85 b7\x9aB\xc5\xd2O\xf3\xab\xec*\x02`" +
	"\xb7J\xc8\x9f\xd3Z\x8a\x0e\x9a_e\xc7N\x80\x9de" +
	"\x92\xdbi\x1d\xc6\x11\x9a_e\xa7\xd4\x81]\x15 \xef" +
	"\x87\x02$\xc8{h~\x95\x1d\x85\x06v:I\xdeN" +
	"{\xdeB\xf3\xab\xec|:\xb0\xa3\x95\xf2\xc3\xb4\x1eb" +
	"\x1d\xcd\xaf\xb2\xd3\xc5\xc0\xce\x8e\xd3r(A\x8e\xd1\xfc" +
	"*;\x88\x0a\xec\x88\xa5\xac\xd0\xa7\x8bi\x95\x06\xbb\xd8" +
	"\x00\xd89:\xb9\x96rUI\xab4\xd8\xd1P`\xf7" +
	"k\xc8\x93)W\xe3i\x95\x06;f\x08\xec,\xaf<" +
	"\x9c\xf6<\x90Vi\xb0K\x17\x80\x1dC\x96\x01nG" +
	"\x82\xe7\x82\x04\xfd\x9dc\xf0\xc0\x8e\xe0z\xce\x96!\xc1" +
	"sJ\x82\x01\xcea@`w\x10x\x8eOC\x82\xe7" +
	"\xb0\x04\x03\x9d\x9b4\x80\xddJ\xe2\xd9w?\x12<{" +
	"%\x18\xe4\xdc\xb0\x00\xec\xe6\x01\xcf\xceG\x90\xe0\xd9." +
	"A\x9esE\x07\xb0\x9b6<[\xd6\"\xc1\xb3Q\xf2" +
	"\xd2b[?\xe4EU\xd3\xf2\x83\x14Vh\x11\xc6\xf2" +
	"\x88j\xf8\x89A\x1a\xa3E\x12y\xc9?\xc4\x87\xf2\x83" +
	"\x14W5?x\xa9\xd3\xef\x87<\xb2\xf3\xfb!\xc1b" +
	"\xc4\xa8\xca\x8e\x12\xfb\xc1K\x03]~V\xd1\xe4\x87\x04" +
	";\x1b\x00\xac\xa4\x88f\x8cY\xa1\x110$\x04B\xcb" +
	"\xaa\xf4\x81\x91fS`\x91\xb2\xaf;f\x03W\x05_" +
	"\xcf\x15\xbc3\x8d\\\xd7\xe0\xd6\xb6;\x1a\xb9a\x9e[" +
	"\xdc\xeeh\xe4\xc6\xa0\xeb\x91\xb1*\xf8-A\xd7\xf7\xb2" +
	"\x0b\x90oh\xd5\x90\xc8\x19\x8b\xf6\xe6tC+\x92x" +
	"\x13\x92\x92\x06\xf1\xca\x94#B\xf66\x96\xa2\xcc=e" +
	"\xc3\xba7=\x0clb\xd7\x98\xcc\x14\x82-p\x1d(" +
	"`\x95\xa8e\xae\x83\x90\x82\x9f|\x05\x88\xb7Q7\xc2" +
	"8K[\x97\xee9vQN:\xbc\xce\x94\xe4\xc9*" +
	"y\x94.>\xc6[\x8a\xce\x19,\x88;~LFK" +
	"!\x9a\x8c\xbcu\x09\xb6\xf3\x9b\x19q\xe5U>\xf2\xda" +
	")\xd6\xd2\x8b\xc9\xe9\x1aqH\xcf\xda\xf5\xb6\xc6\xd5Z" +
	"8\x96\xe9\xccH\x0d$\xaa}&\xcd0\xe6\xf8T\x0b" +
	"\xc7\xecCK\xad\x8a\xe9[\xaeF\xa38\xe2kh\xf3" +
	"Y\xcd\xd8\xd7\x14FY\x84\xeck\xd2\x95.w'0" +
	"k\x925\x9e,\xe5\xd8\xc9\x95\xca2\xb5\xdd\xebpy" +
	"0\x96\xd6o\xe0\xcd\x02-\xfb\xe2%7k\x96\xc6p" +
	"\xe5\xcb\x02\xba\xab\x89\xca\xc4.\x1f\xda\xe86<@\x08" +
	";\x05\xf5\xb3\xafS\xed\xb5\x04\xf3\xf1\x9c,\"y\xe6" +
	"\"\xa5\xc1>\xc0Dd1\xd3q\xccB\x17\x88\x19\xe4" +
	"\xac\x9b\xc7\xe1\xb0(\xd8\x90\xbb\xa1\xd0=\xa2\xe9\xc9\x01" +
	"\x1bs\x1f\x9e\xe6\x82s\xaa\xbb\x92b\xe9\xa5\xc9\xce\xe5" +
	"\x19\xba\xee\x18\xc9UJ\xd8R\xd3\x1cs\xe86(\xed" +
	"m\xacST\xa3\xe7\x10\xdf\x17\x89 \x8e\x13\xf8\xd5\x04" +
	"\x8b\xc6\xa3#4N\xadjM>o\xa3\x1a\xc5&\x9d" +
	"\xf2\x9e\x13*\x05\\B\xc54\xc2]\x93xR\xc4\xb4" +
	"zH\xede\xda\x17\xba\xc4Z3\x14v0\xe5\xfb\x96" +
	"\x1er\xdfL\x07\xb3\xb2\xca\x92/\x99\x19\xb2an\"" +
	"\xb5E\xd9\xddM\xc0\x8e\x94\xcb\x93\xa9\xe56\x9e\xda\xa2" +
	"\xec~\x06`7\xcb\xd0\xa8\xbcm\x9b\x09\xce\x85H\xc0" +
	"\xeeg\x91\x81\xbc\xeb9OLQv\xc8\x1d\xd8\xcd2" +
	"\x9e\xd3ev\xd1]\x8es\x13\x00\xb0\x83\xe4\x9e\xa3e" +
	"v\xd1]\xaes\xbf\x01\xb0\x9b\x10\x9c\xa2\xbb>\xce%" +
	"\x03\xc0.\x96\xf0l\x9dg\x17\xddI\xce\x1d?\xc0\x8e" +
	"\xa0\x13\x99\x17<w\x11\x03\x94]!\x04\xec\x16\x1fO" +
	"\x0b\xf9\x9eJ\xccOv\x03\x15\xb0\x9b\xb3<\xcb\xea\x91" +
	"\xe0Y,IQ\xbd\xc9\xcf\x1cB?H\x96\xd2D\xcd" +
	"5\xfb/\x95\x00\xbf\xe3}\xf9!\xc1\x0c&Z\xbf\x97" +
	"G\x16\xdc\x0f^Z\xe2Bkj\xed\xe2r$6\xea" +
	"\xa9\x16Xz-\xa9\xae\xab\xa5\xabT'\xe6\x06\x06\x03" +
	"w\x1b\x03B\xeeAy\x84\xdc\xdb\xaf\x10ro\x97\xca" +
	"\xb8\xe5\xb9G\xb3z\x91.p\x01\xb6K5A\xcf{" +
	"~\x9a\\d\xbar\xaay\\9\x15\x0f/\x89\x98\xb2" +
	"j\x16\x8e\xdb\x95\x00\xc9\xaa\xf8\xff\x1b\x00\x00\xff\xffC" +
	"hD\xf9"

func init() {
	schemas.Register(schema_ea883e7d5248d81b,
		0x809d4e73dc197b11,
		0x8167eafcc8695b1c,
		0x860c3dd5698349f5,
		0x86541181da6400f7,
		0x86d95afae10f0893,
		0x87c49e302c6516f8,
		0x884238694e8b8d88,
		0x8ae5aae9653b7b02,
		0x8ed051e9369ac720,
		0x946963af664858d0,
		0x958ea6b33d4e8cbb,
		0x95a8b7d1ed942672,
		0x96fe51446ad697f9,
		0x974c11f8cfed4247,
		0x978c524c1a35015c,
		0x98300b93ef71cc57,
		0x98eadc167523156e,
		0x99b03ceb2dad70db,
		0x9a291d6964350a5b,
		0x9b96e8c9be077989,
		0x9ba7a818970a029c,
		0x9c19777f493f1110,
		0x9cb31f0ede4f5117,
		0x9d64fa17798952ff,
		0x9efc974402f016f6,
		0x9fe8d2cd92c27a38,
		0xa17d6c20c2174ec8,
		0xa1a9e5ab638eed79,
		0xa2305f2ea25a3484,
		0xa34213f24153536b,
		0xa4efd353c57d2b85,
		0xa5753d28ca12d2ba,
		0xa630576401b1a5b7,
		0xa78946d2af827622,
		0xa862cd929f7af191,
		0xa89254a0db970716,
		0xa9095b4cff1e5634,
		0xa97d67096ee7d46d,
		0xa99c622e110c1203,
		0xaa133a60be5a7d01,
		0xaa98a78425cdd321,
		0xab1e48e58e4c69af,
		0xab89c6fc9bf26f2a,
		0xabc3ec90b96a6d71,
		0xac8fbc382ae513de,
		0xacf50d40a9d3436a,
		0xad37ff6270c35769,
		0xaf631f5cddda9aa3,
		0xafe329bc8cad8f74,
		0xaff62edfdbfe53d0,
		0xb030fc18cb3b0e61,
		0xb05bd83a34de71b7,
		0xb2255c049c7bc42f,
		0xb262e0d6c2474d9c,
		0xb47c58aa23289d55,
		0xb5bf271ecf3bc074,
		0xb5dc333528e5f7ae,
		0xb76f3dc1dcf4fdf1,
		0xb7d0dd6b467e7539,
		0xb9095b6d17298884,
		0xba0de490234c27af,
		0xbb5ea9a03dfddab3,
		0xbb83332a93ffdcad,
		0xbbec523e9fc1abfc,
		0xbc4d5c31427dc498,
		0xbda949777c149f4b,
		0xbdb679ec96303b53,
		0xbe71bb7b0ed4539a,
		0xbebae5caecad3c49,
		0xbee5e0529f9017ff,
		0xbf1cf3d6e654e947,
		0xc089763bca3e3f44,
		0xc0ad53271497ab77,
		0xc0dd66dedad92ef8,
		0xc18496cf650e6886,
		0xc338177a5379031a,
		0xc3fcefc580775485,
		0xc44d12b3aee49f34,
		0xc7e5f661ac57ebb2,
		0xc9558eac26b0f15e,
		0xc9601ec89a6aa066,
		0xc9b3a8263f6853d7,
		0xcb6e3e65f2dbc914,
		0xccf4f28c8951edf6,
		0xd0071dd673841599,
		0xd01613feea87ee6a,
		0xd1afceb8146949d4,
		0xd2117353ea065c72,
		0xd35d6ae0fdbd9bc5,
		0xd49a2570fb5a4342,
		0xd701f5ae7e7560e9,
		0xd70c154f9521b73d,
		0xd7315a3b3f92aa4a,
		0xd78724f6fbd5c5c5,
		0xd7a7f00d5a96fc43,
		0xd7ef486de484610d,
		0xd9459f2361338d96,
		0xd95473f6f8a89a69,
		0xdb27e243a580d2f0,
		0xdb78f249dcc7b9f1,
		0xdba8e30445acc3f4,
		0xdc0aec8d179d4ec9,
		0xdc876697979bc7e5,
		0xe0b1a560d0e4d51a,
		0xe0f49db8c42c72b2,
		0xe154e487144bf3c2,
		0xe19b7cffa7304650,
		0xe1b522247fc407ad,
		0xe2b3585db47cd4f9,
		0xe2f81b4403ef433b,
		0xe71560d8bc06c6fd,
		0xe75c9c74c2bacb82,
		0xe83f954c9635f05a,
		0xe92935bf20cc2856,
		0xeadaf2b11fded490,
		0xecb10f87fbe0d6c5,
		0xf3243256580294f3,
		0xf485a561c31c83d2,
		0xf4d42db113af3a4b,
		0xf5c310bd5e2aa138,
		0xf7250939585a23f6,
		0xf7da25d3ead6c0d3,
		0xf8551f83bb42e152,
		0xf9b772853fd93ea9,
		0xfa04b4272d0ffcd9,
		0xfa4486fa9522275e,
		0xfaa680ef12c44624,
		0xfc487818328b97ef,
		0xfc6b4417fdef895a,
		0xfcaa6dc30ba75197,
		0xfd86771dd5950237)
}
