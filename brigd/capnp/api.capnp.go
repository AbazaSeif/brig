// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// StatInfo is a stat-like description of any node
type StatInfo struct{ capnp.Struct }

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xa2305f2ea25a3484

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xa2305f2ea25a3484, s.Struct)
	return str
}

func (s StatInfo) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s StatInfo) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s StatInfo) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s StatInfo) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s StatInfo) Inode() uint64 {
	return s.Struct.Uint64(8)
}

func (s StatInfo) SetInode(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s StatInfo) IsDir() bool {
	return s.Struct.Bit(128)
}

func (s StatInfo) SetIsDir(v bool) {
	s.Struct.SetBit(128, v)
}

func (s StatInfo) Depth() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s StatInfo) SetDepth(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s StatInfo) ModTime() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s StatInfo) HasModTime() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s StatInfo) ModTimeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s StatInfo) SetModTime(v string) error {
	return s.Struct.SetText(2, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xa2305f2ea25a3484, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

type LogEntry struct{ capnp.Struct }

// LogEntry_TypeID is the unique identifier for the type LogEntry.
const LogEntry_TypeID = 0xd9d374ce4dd8e6a9

func NewLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LogEntry{st}, err
}

func NewRootLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LogEntry{st}, err
}

func ReadRootLogEntry(msg *capnp.Message) (LogEntry, error) {
	root, err := msg.RootPtr()
	return LogEntry{root.Struct()}, err
}

func (s LogEntry) String() string {
	str, _ := text.Marshal(0xd9d374ce4dd8e6a9, s.Struct)
	return str
}

func (s LogEntry) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s LogEntry) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LogEntry) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s LogEntry) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LogEntry) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LogEntry) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LogEntry) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LogEntry) Tags() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s LogEntry) HasTags() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LogEntry) SetTags(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s LogEntry) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s LogEntry) Date() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s LogEntry) HasDate() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s LogEntry) DateBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s LogEntry) SetDate(v string) error {
	return s.Struct.SetText(3, v)
}

// LogEntry_List is a list of LogEntry.
type LogEntry_List struct{ capnp.List }

// NewLogEntry creates a new list of LogEntry.
func NewLogEntry_List(s *capnp.Segment, sz int32) (LogEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return LogEntry_List{l}, err
}

func (s LogEntry_List) At(i int) LogEntry { return LogEntry{s.List.Struct(i)} }

func (s LogEntry_List) Set(i int, v LogEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s LogEntry_List) String() string {
	str, _ := text.MarshalList(0xd9d374ce4dd8e6a9, s.List)
	return str
}

// LogEntry_Promise is a wrapper for a LogEntry promised by a client call.
type LogEntry_Promise struct{ *capnp.Pipeline }

func (p LogEntry_Promise) Struct() (LogEntry, error) {
	s, err := p.Pipeline.Struct()
	return LogEntry{s}, err
}

type FS struct{ Client capnp.Client }

// FS_TypeID is the unique identifier for the type FS.
const FS_TypeID = 0xe2b3585db47cd4f9

func (c FS) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type FS_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error
}

func FS_ServerToClient(s FS_Server) FS {
	c, _ := s.(server.Closer)
	return FS{Client: server.New(FS_Methods(nil, s), c)}
}

func FS_Methods(methods []server.Method, s FS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// FS_stage holds the arguments for a server call to FS.stage.
type FS_stage struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stage_Params
	Results FS_stage_Results
}

// FS_list holds the arguments for a server call to FS.list.
type FS_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_list_Params
	Results FS_list_Results
}

// FS_cat holds the arguments for a server call to FS.cat.
type FS_cat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_cat_Params
	Results FS_cat_Results
}

// FS_mkdir holds the arguments for a server call to FS.mkdir.
type FS_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_mkdir_Params
	Results FS_mkdir_Results
}

// FS_remove holds the arguments for a server call to FS.remove.
type FS_remove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_remove_Params
	Results FS_remove_Results
}

// FS_move holds the arguments for a server call to FS.move.
type FS_move struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_move_Params
	Results FS_move_Results
}

type FS_stage_Params struct{ capnp.Struct }

// FS_stage_Params_TypeID is the unique identifier for the type FS_stage_Params.
const FS_stage_Params_TypeID = 0x9ba7a818970a029c

func NewFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func NewRootFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func ReadRootFS_stage_Params(msg *capnp.Message) (FS_stage_Params, error) {
	root, err := msg.RootPtr()
	return FS_stage_Params{root.Struct()}, err
}

func (s FS_stage_Params) String() string {
	str, _ := text.Marshal(0x9ba7a818970a029c, s.Struct)
	return str
}

func (s FS_stage_Params) LocalPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stage_Params) HasLocalPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) LocalPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetLocalPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_stage_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_stage_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_stage_Params_List is a list of FS_stage_Params.
type FS_stage_Params_List struct{ capnp.List }

// NewFS_stage_Params creates a new list of FS_stage_Params.
func NewFS_stage_Params_List(s *capnp.Segment, sz int32) (FS_stage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_stage_Params_List{l}, err
}

func (s FS_stage_Params_List) At(i int) FS_stage_Params { return FS_stage_Params{s.List.Struct(i)} }

func (s FS_stage_Params_List) Set(i int, v FS_stage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Params_List) String() string {
	str, _ := text.MarshalList(0x9ba7a818970a029c, s.List)
	return str
}

// FS_stage_Params_Promise is a wrapper for a FS_stage_Params promised by a client call.
type FS_stage_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Params_Promise) Struct() (FS_stage_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Params{s}, err
}

type FS_stage_Results struct{ capnp.Struct }

// FS_stage_Results_TypeID is the unique identifier for the type FS_stage_Results.
const FS_stage_Results_TypeID = 0x884238694e8b8d88

func NewFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func NewRootFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func ReadRootFS_stage_Results(msg *capnp.Message) (FS_stage_Results, error) {
	root, err := msg.RootPtr()
	return FS_stage_Results{root.Struct()}, err
}

func (s FS_stage_Results) String() string {
	str, _ := text.Marshal(0x884238694e8b8d88, s.Struct)
	return str
}

// FS_stage_Results_List is a list of FS_stage_Results.
type FS_stage_Results_List struct{ capnp.List }

// NewFS_stage_Results creates a new list of FS_stage_Results.
func NewFS_stage_Results_List(s *capnp.Segment, sz int32) (FS_stage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_stage_Results_List{l}, err
}

func (s FS_stage_Results_List) At(i int) FS_stage_Results { return FS_stage_Results{s.List.Struct(i)} }

func (s FS_stage_Results_List) Set(i int, v FS_stage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Results_List) String() string {
	str, _ := text.MarshalList(0x884238694e8b8d88, s.List)
	return str
}

// FS_stage_Results_Promise is a wrapper for a FS_stage_Results promised by a client call.
type FS_stage_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Results_Promise) Struct() (FS_stage_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Results{s}, err
}

type FS_list_Params struct{ capnp.Struct }

// FS_list_Params_TypeID is the unique identifier for the type FS_list_Params.
const FS_list_Params_TypeID = 0xfd86771dd5950237

func NewFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func NewRootFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func ReadRootFS_list_Params(msg *capnp.Message) (FS_list_Params, error) {
	root, err := msg.RootPtr()
	return FS_list_Params{root.Struct()}, err
}

func (s FS_list_Params) String() string {
	str, _ := text.Marshal(0xfd86771dd5950237, s.Struct)
	return str
}

func (s FS_list_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_list_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_list_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_list_Params) MaxDepth() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_list_Params) SetMaxDepth(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_list_Params_List is a list of FS_list_Params.
type FS_list_Params_List struct{ capnp.List }

// NewFS_list_Params creates a new list of FS_list_Params.
func NewFS_list_Params_List(s *capnp.Segment, sz int32) (FS_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_list_Params_List{l}, err
}

func (s FS_list_Params_List) At(i int) FS_list_Params { return FS_list_Params{s.List.Struct(i)} }

func (s FS_list_Params_List) Set(i int, v FS_list_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_list_Params_List) String() string {
	str, _ := text.MarshalList(0xfd86771dd5950237, s.List)
	return str
}

// FS_list_Params_Promise is a wrapper for a FS_list_Params promised by a client call.
type FS_list_Params_Promise struct{ *capnp.Pipeline }

func (p FS_list_Params_Promise) Struct() (FS_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Params{s}, err
}

type FS_list_Results struct{ capnp.Struct }

// FS_list_Results_TypeID is the unique identifier for the type FS_list_Results.
const FS_list_Results_TypeID = 0xe92935bf20cc2856

func NewFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func NewRootFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func ReadRootFS_list_Results(msg *capnp.Message) (FS_list_Results, error) {
	root, err := msg.RootPtr()
	return FS_list_Results{root.Struct()}, err
}

func (s FS_list_Results) String() string {
	str, _ := text.Marshal(0xe92935bf20cc2856, s.Struct)
	return str
}

func (s FS_list_Results) Entries() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_list_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Results) SetEntries(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_list_Results) NewEntries(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_list_Results_List is a list of FS_list_Results.
type FS_list_Results_List struct{ capnp.List }

// NewFS_list_Results creates a new list of FS_list_Results.
func NewFS_list_Results_List(s *capnp.Segment, sz int32) (FS_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_list_Results_List{l}, err
}

func (s FS_list_Results_List) At(i int) FS_list_Results { return FS_list_Results{s.List.Struct(i)} }

func (s FS_list_Results_List) Set(i int, v FS_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_list_Results_List) String() string {
	str, _ := text.MarshalList(0xe92935bf20cc2856, s.List)
	return str
}

// FS_list_Results_Promise is a wrapper for a FS_list_Results promised by a client call.
type FS_list_Results_Promise struct{ *capnp.Pipeline }

func (p FS_list_Results_Promise) Struct() (FS_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Results{s}, err
}

type FS_cat_Params struct{ capnp.Struct }

// FS_cat_Params_TypeID is the unique identifier for the type FS_cat_Params.
const FS_cat_Params_TypeID = 0xa9095b4cff1e5634

func NewFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func NewRootFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func ReadRootFS_cat_Params(msg *capnp.Message) (FS_cat_Params, error) {
	root, err := msg.RootPtr()
	return FS_cat_Params{root.Struct()}, err
}

func (s FS_cat_Params) String() string {
	str, _ := text.Marshal(0xa9095b4cff1e5634, s.Struct)
	return str
}

func (s FS_cat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Params_List is a list of FS_cat_Params.
type FS_cat_Params_List struct{ capnp.List }

// NewFS_cat_Params creates a new list of FS_cat_Params.
func NewFS_cat_Params_List(s *capnp.Segment, sz int32) (FS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Params_List{l}, err
}

func (s FS_cat_Params_List) At(i int) FS_cat_Params { return FS_cat_Params{s.List.Struct(i)} }

func (s FS_cat_Params_List) Set(i int, v FS_cat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Params_List) String() string {
	str, _ := text.MarshalList(0xa9095b4cff1e5634, s.List)
	return str
}

// FS_cat_Params_Promise is a wrapper for a FS_cat_Params promised by a client call.
type FS_cat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Params_Promise) Struct() (FS_cat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Params{s}, err
}

type FS_cat_Results struct{ capnp.Struct }

// FS_cat_Results_TypeID is the unique identifier for the type FS_cat_Results.
const FS_cat_Results_TypeID = 0x9fe8d2cd92c27a38

func NewFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Results{st}, err
}

func NewRootFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Results{st}, err
}

func ReadRootFS_cat_Results(msg *capnp.Message) (FS_cat_Results, error) {
	root, err := msg.RootPtr()
	return FS_cat_Results{root.Struct()}, err
}

func (s FS_cat_Results) String() string {
	str, _ := text.Marshal(0x9fe8d2cd92c27a38, s.Struct)
	return str
}

func (s FS_cat_Results) FifoPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Results) HasFifoPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Results) FifoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Results) SetFifoPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Results_List is a list of FS_cat_Results.
type FS_cat_Results_List struct{ capnp.List }

// NewFS_cat_Results creates a new list of FS_cat_Results.
func NewFS_cat_Results_List(s *capnp.Segment, sz int32) (FS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Results_List{l}, err
}

func (s FS_cat_Results_List) At(i int) FS_cat_Results { return FS_cat_Results{s.List.Struct(i)} }

func (s FS_cat_Results_List) Set(i int, v FS_cat_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Results_List) String() string {
	str, _ := text.MarshalList(0x9fe8d2cd92c27a38, s.List)
	return str
}

// FS_cat_Results_Promise is a wrapper for a FS_cat_Results promised by a client call.
type FS_cat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Results_Promise) Struct() (FS_cat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Results{s}, err
}

type FS_mkdir_Params struct{ capnp.Struct }

// FS_mkdir_Params_TypeID is the unique identifier for the type FS_mkdir_Params.
const FS_mkdir_Params_TypeID = 0xb030fc18cb3b0e61

func NewFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func NewRootFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func ReadRootFS_mkdir_Params(msg *capnp.Message) (FS_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Params{root.Struct()}, err
}

func (s FS_mkdir_Params) String() string {
	str, _ := text.Marshal(0xb030fc18cb3b0e61, s.Struct)
	return str
}

func (s FS_mkdir_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_mkdir_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_mkdir_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_mkdir_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_mkdir_Params) CreateParents() bool {
	return s.Struct.Bit(0)
}

func (s FS_mkdir_Params) SetCreateParents(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_mkdir_Params_List is a list of FS_mkdir_Params.
type FS_mkdir_Params_List struct{ capnp.List }

// NewFS_mkdir_Params creates a new list of FS_mkdir_Params.
func NewFS_mkdir_Params_List(s *capnp.Segment, sz int32) (FS_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_mkdir_Params_List{l}, err
}

func (s FS_mkdir_Params_List) At(i int) FS_mkdir_Params { return FS_mkdir_Params{s.List.Struct(i)} }

func (s FS_mkdir_Params_List) Set(i int, v FS_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xb030fc18cb3b0e61, s.List)
	return str
}

// FS_mkdir_Params_Promise is a wrapper for a FS_mkdir_Params promised by a client call.
type FS_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Params_Promise) Struct() (FS_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Params{s}, err
}

type FS_mkdir_Results struct{ capnp.Struct }

// FS_mkdir_Results_TypeID is the unique identifier for the type FS_mkdir_Results.
const FS_mkdir_Results_TypeID = 0xf3243256580294f3

func NewFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func NewRootFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func ReadRootFS_mkdir_Results(msg *capnp.Message) (FS_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Results{root.Struct()}, err
}

func (s FS_mkdir_Results) String() string {
	str, _ := text.Marshal(0xf3243256580294f3, s.Struct)
	return str
}

// FS_mkdir_Results_List is a list of FS_mkdir_Results.
type FS_mkdir_Results_List struct{ capnp.List }

// NewFS_mkdir_Results creates a new list of FS_mkdir_Results.
func NewFS_mkdir_Results_List(s *capnp.Segment, sz int32) (FS_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_mkdir_Results_List{l}, err
}

func (s FS_mkdir_Results_List) At(i int) FS_mkdir_Results { return FS_mkdir_Results{s.List.Struct(i)} }

func (s FS_mkdir_Results_List) Set(i int, v FS_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xf3243256580294f3, s.List)
	return str
}

// FS_mkdir_Results_Promise is a wrapper for a FS_mkdir_Results promised by a client call.
type FS_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Results_Promise) Struct() (FS_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Results{s}, err
}

type FS_remove_Params struct{ capnp.Struct }

// FS_remove_Params_TypeID is the unique identifier for the type FS_remove_Params.
const FS_remove_Params_TypeID = 0xa99c622e110c1203

func NewFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func NewRootFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func ReadRootFS_remove_Params(msg *capnp.Message) (FS_remove_Params, error) {
	root, err := msg.RootPtr()
	return FS_remove_Params{root.Struct()}, err
}

func (s FS_remove_Params) String() string {
	str, _ := text.Marshal(0xa99c622e110c1203, s.Struct)
	return str
}

func (s FS_remove_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_remove_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_remove_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_remove_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_remove_Params_List is a list of FS_remove_Params.
type FS_remove_Params_List struct{ capnp.List }

// NewFS_remove_Params creates a new list of FS_remove_Params.
func NewFS_remove_Params_List(s *capnp.Segment, sz int32) (FS_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_remove_Params_List{l}, err
}

func (s FS_remove_Params_List) At(i int) FS_remove_Params { return FS_remove_Params{s.List.Struct(i)} }

func (s FS_remove_Params_List) Set(i int, v FS_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xa99c622e110c1203, s.List)
	return str
}

// FS_remove_Params_Promise is a wrapper for a FS_remove_Params promised by a client call.
type FS_remove_Params_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Params_Promise) Struct() (FS_remove_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Params{s}, err
}

type FS_remove_Results struct{ capnp.Struct }

// FS_remove_Results_TypeID is the unique identifier for the type FS_remove_Results.
const FS_remove_Results_TypeID = 0xc9b3a8263f6853d7

func NewFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func NewRootFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func ReadRootFS_remove_Results(msg *capnp.Message) (FS_remove_Results, error) {
	root, err := msg.RootPtr()
	return FS_remove_Results{root.Struct()}, err
}

func (s FS_remove_Results) String() string {
	str, _ := text.Marshal(0xc9b3a8263f6853d7, s.Struct)
	return str
}

// FS_remove_Results_List is a list of FS_remove_Results.
type FS_remove_Results_List struct{ capnp.List }

// NewFS_remove_Results creates a new list of FS_remove_Results.
func NewFS_remove_Results_List(s *capnp.Segment, sz int32) (FS_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_remove_Results_List{l}, err
}

func (s FS_remove_Results_List) At(i int) FS_remove_Results {
	return FS_remove_Results{s.List.Struct(i)}
}

func (s FS_remove_Results_List) Set(i int, v FS_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xc9b3a8263f6853d7, s.List)
	return str
}

// FS_remove_Results_Promise is a wrapper for a FS_remove_Results promised by a client call.
type FS_remove_Results_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Results_Promise) Struct() (FS_remove_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Results{s}, err
}

type FS_move_Params struct{ capnp.Struct }

// FS_move_Params_TypeID is the unique identifier for the type FS_move_Params.
const FS_move_Params_TypeID = 0xb76f3dc1dcf4fdf1

func NewFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func NewRootFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func ReadRootFS_move_Params(msg *capnp.Message) (FS_move_Params, error) {
	root, err := msg.RootPtr()
	return FS_move_Params{root.Struct()}, err
}

func (s FS_move_Params) String() string {
	str, _ := text.Marshal(0xb76f3dc1dcf4fdf1, s.Struct)
	return str
}

func (s FS_move_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_move_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_move_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_move_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_move_Params_List is a list of FS_move_Params.
type FS_move_Params_List struct{ capnp.List }

// NewFS_move_Params creates a new list of FS_move_Params.
func NewFS_move_Params_List(s *capnp.Segment, sz int32) (FS_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_move_Params_List{l}, err
}

func (s FS_move_Params_List) At(i int) FS_move_Params { return FS_move_Params{s.List.Struct(i)} }

func (s FS_move_Params_List) Set(i int, v FS_move_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_move_Params_List) String() string {
	str, _ := text.MarshalList(0xb76f3dc1dcf4fdf1, s.List)
	return str
}

// FS_move_Params_Promise is a wrapper for a FS_move_Params promised by a client call.
type FS_move_Params_Promise struct{ *capnp.Pipeline }

func (p FS_move_Params_Promise) Struct() (FS_move_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Params{s}, err
}

type FS_move_Results struct{ capnp.Struct }

// FS_move_Results_TypeID is the unique identifier for the type FS_move_Results.
const FS_move_Results_TypeID = 0xab89c6fc9bf26f2a

func NewFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func NewRootFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func ReadRootFS_move_Results(msg *capnp.Message) (FS_move_Results, error) {
	root, err := msg.RootPtr()
	return FS_move_Results{root.Struct()}, err
}

func (s FS_move_Results) String() string {
	str, _ := text.Marshal(0xab89c6fc9bf26f2a, s.Struct)
	return str
}

// FS_move_Results_List is a list of FS_move_Results.
type FS_move_Results_List struct{ capnp.List }

// NewFS_move_Results creates a new list of FS_move_Results.
func NewFS_move_Results_List(s *capnp.Segment, sz int32) (FS_move_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_move_Results_List{l}, err
}

func (s FS_move_Results_List) At(i int) FS_move_Results { return FS_move_Results{s.List.Struct(i)} }

func (s FS_move_Results_List) Set(i int, v FS_move_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_move_Results_List) String() string {
	str, _ := text.MarshalList(0xab89c6fc9bf26f2a, s.List)
	return str
}

// FS_move_Results_Promise is a wrapper for a FS_move_Results promised by a client call.
type FS_move_Results_Promise struct{ *capnp.Pipeline }

func (p FS_move_Results_Promise) Struct() (FS_move_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Results{s}, err
}

type VCS struct{ Client capnp.Client }

// VCS_TypeID is the unique identifier for the type VCS.
const VCS_TypeID = 0xfaa680ef12c44624

func (c VCS) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type VCS_Server interface {
	Log(VCS_log) error

	Commit(VCS_commit) error
}

func VCS_ServerToClient(s VCS_Server) VCS {
	c, _ := s.(server.Closer)
	return VCS{Client: server.New(VCS_Methods(nil, s), c)}
}

func VCS_Methods(methods []server.Method, s VCS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// VCS_log holds the arguments for a server call to VCS.log.
type VCS_log struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_log_Params
	Results VCS_log_Results
}

// VCS_commit holds the arguments for a server call to VCS.commit.
type VCS_commit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commit_Params
	Results VCS_commit_Results
}

type VCS_log_Params struct{ capnp.Struct }

// VCS_log_Params_TypeID is the unique identifier for the type VCS_log_Params.
const VCS_log_Params_TypeID = 0xa4efd353c57d2b85

func NewVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func NewRootVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func ReadRootVCS_log_Params(msg *capnp.Message) (VCS_log_Params, error) {
	root, err := msg.RootPtr()
	return VCS_log_Params{root.Struct()}, err
}

func (s VCS_log_Params) String() string {
	str, _ := text.Marshal(0xa4efd353c57d2b85, s.Struct)
	return str
}

// VCS_log_Params_List is a list of VCS_log_Params.
type VCS_log_Params_List struct{ capnp.List }

// NewVCS_log_Params creates a new list of VCS_log_Params.
func NewVCS_log_Params_List(s *capnp.Segment, sz int32) (VCS_log_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_log_Params_List{l}, err
}

func (s VCS_log_Params_List) At(i int) VCS_log_Params { return VCS_log_Params{s.List.Struct(i)} }

func (s VCS_log_Params_List) Set(i int, v VCS_log_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_log_Params_List) String() string {
	str, _ := text.MarshalList(0xa4efd353c57d2b85, s.List)
	return str
}

// VCS_log_Params_Promise is a wrapper for a VCS_log_Params promised by a client call.
type VCS_log_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Params_Promise) Struct() (VCS_log_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Params{s}, err
}

type VCS_log_Results struct{ capnp.Struct }

// VCS_log_Results_TypeID is the unique identifier for the type VCS_log_Results.
const VCS_log_Results_TypeID = 0xf7250939585a23f6

func NewVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func NewRootVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func ReadRootVCS_log_Results(msg *capnp.Message) (VCS_log_Results, error) {
	root, err := msg.RootPtr()
	return VCS_log_Results{root.Struct()}, err
}

func (s VCS_log_Results) String() string {
	str, _ := text.Marshal(0xf7250939585a23f6, s.Struct)
	return str
}

func (s VCS_log_Results) Entries() (LogEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return LogEntry_List{List: p.List()}, err
}

func (s VCS_log_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_log_Results) SetEntries(v LogEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated LogEntry_List, preferring placement in s's segment.
func (s VCS_log_Results) NewEntries(n int32) (LogEntry_List, error) {
	l, err := NewLogEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return LogEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_log_Results_List is a list of VCS_log_Results.
type VCS_log_Results_List struct{ capnp.List }

// NewVCS_log_Results creates a new list of VCS_log_Results.
func NewVCS_log_Results_List(s *capnp.Segment, sz int32) (VCS_log_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_log_Results_List{l}, err
}

func (s VCS_log_Results_List) At(i int) VCS_log_Results { return VCS_log_Results{s.List.Struct(i)} }

func (s VCS_log_Results_List) Set(i int, v VCS_log_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_log_Results_List) String() string {
	str, _ := text.MarshalList(0xf7250939585a23f6, s.List)
	return str
}

// VCS_log_Results_Promise is a wrapper for a VCS_log_Results promised by a client call.
type VCS_log_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Results_Promise) Struct() (VCS_log_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Results{s}, err
}

type VCS_commit_Params struct{ capnp.Struct }

// VCS_commit_Params_TypeID is the unique identifier for the type VCS_commit_Params.
const VCS_commit_Params_TypeID = 0xd9459f2361338d96

func NewVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func NewRootVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func ReadRootVCS_commit_Params(msg *capnp.Message) (VCS_commit_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Params{root.Struct()}, err
}

func (s VCS_commit_Params) String() string {
	str, _ := text.Marshal(0xd9459f2361338d96, s.Struct)
	return str
}

func (s VCS_commit_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commit_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commit_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commit_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commit_Params_List is a list of VCS_commit_Params.
type VCS_commit_Params_List struct{ capnp.List }

// NewVCS_commit_Params creates a new list of VCS_commit_Params.
func NewVCS_commit_Params_List(s *capnp.Segment, sz int32) (VCS_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commit_Params_List{l}, err
}

func (s VCS_commit_Params_List) At(i int) VCS_commit_Params {
	return VCS_commit_Params{s.List.Struct(i)}
}

func (s VCS_commit_Params_List) Set(i int, v VCS_commit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Params_List) String() string {
	str, _ := text.MarshalList(0xd9459f2361338d96, s.List)
	return str
}

// VCS_commit_Params_Promise is a wrapper for a VCS_commit_Params promised by a client call.
type VCS_commit_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Params_Promise) Struct() (VCS_commit_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Params{s}, err
}

type VCS_commit_Results struct{ capnp.Struct }

// VCS_commit_Results_TypeID is the unique identifier for the type VCS_commit_Results.
const VCS_commit_Results_TypeID = 0xb7d0dd6b467e7539

func NewVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func NewRootVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func ReadRootVCS_commit_Results(msg *capnp.Message) (VCS_commit_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Results{root.Struct()}, err
}

func (s VCS_commit_Results) String() string {
	str, _ := text.Marshal(0xb7d0dd6b467e7539, s.Struct)
	return str
}

// VCS_commit_Results_List is a list of VCS_commit_Results.
type VCS_commit_Results_List struct{ capnp.List }

// NewVCS_commit_Results creates a new list of VCS_commit_Results.
func NewVCS_commit_Results_List(s *capnp.Segment, sz int32) (VCS_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_commit_Results_List{l}, err
}

func (s VCS_commit_Results_List) At(i int) VCS_commit_Results {
	return VCS_commit_Results{s.List.Struct(i)}
}

func (s VCS_commit_Results_List) Set(i int, v VCS_commit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Results_List) String() string {
	str, _ := text.MarshalList(0xb7d0dd6b467e7539, s.List)
	return str
}

// VCS_commit_Results_Promise is a wrapper for a VCS_commit_Results promised by a client call.
type VCS_commit_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Results_Promise) Struct() (VCS_commit_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Results{s}, err
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0x83e6cb306e77e311

func (c Meta) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Meta_quit holds the arguments for a server call to Meta.quit.
type Meta_quit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_quit_Params
	Results Meta_quit_Results
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

// Meta_init holds the arguments for a server call to Meta.init.
type Meta_init struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_init_Params
	Results Meta_init_Results
}

type Meta_quit_Params struct{ capnp.Struct }

// Meta_quit_Params_TypeID is the unique identifier for the type Meta_quit_Params.
const Meta_quit_Params_TypeID = 0xdf3a2e83d0d533b3

func NewMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func NewRootMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func ReadRootMeta_quit_Params(msg *capnp.Message) (Meta_quit_Params, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Params{root.Struct()}, err
}

func (s Meta_quit_Params) String() string {
	str, _ := text.Marshal(0xdf3a2e83d0d533b3, s.Struct)
	return str
}

// Meta_quit_Params_List is a list of Meta_quit_Params.
type Meta_quit_Params_List struct{ capnp.List }

// NewMeta_quit_Params creates a new list of Meta_quit_Params.
func NewMeta_quit_Params_List(s *capnp.Segment, sz int32) (Meta_quit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Params_List{l}, err
}

func (s Meta_quit_Params_List) At(i int) Meta_quit_Params { return Meta_quit_Params{s.List.Struct(i)} }

func (s Meta_quit_Params_List) Set(i int, v Meta_quit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Params_List) String() string {
	str, _ := text.MarshalList(0xdf3a2e83d0d533b3, s.List)
	return str
}

// Meta_quit_Params_Promise is a wrapper for a Meta_quit_Params promised by a client call.
type Meta_quit_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Params_Promise) Struct() (Meta_quit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Params{s}, err
}

type Meta_quit_Results struct{ capnp.Struct }

// Meta_quit_Results_TypeID is the unique identifier for the type Meta_quit_Results.
const Meta_quit_Results_TypeID = 0xe1dd2f0c85965fd6

func NewMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func NewRootMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func ReadRootMeta_quit_Results(msg *capnp.Message) (Meta_quit_Results, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Results{root.Struct()}, err
}

func (s Meta_quit_Results) String() string {
	str, _ := text.Marshal(0xe1dd2f0c85965fd6, s.Struct)
	return str
}

// Meta_quit_Results_List is a list of Meta_quit_Results.
type Meta_quit_Results_List struct{ capnp.List }

// NewMeta_quit_Results creates a new list of Meta_quit_Results.
func NewMeta_quit_Results_List(s *capnp.Segment, sz int32) (Meta_quit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Results_List{l}, err
}

func (s Meta_quit_Results_List) At(i int) Meta_quit_Results {
	return Meta_quit_Results{s.List.Struct(i)}
}

func (s Meta_quit_Results_List) Set(i int, v Meta_quit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Results_List) String() string {
	str, _ := text.MarshalList(0xe1dd2f0c85965fd6, s.List)
	return str
}

// Meta_quit_Results_Promise is a wrapper for a Meta_quit_Results promised by a client call.
type Meta_quit_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Results_Promise) Struct() (Meta_quit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Results{s}, err
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xc9ac448a01179aec

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xc9ac448a01179aec, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xc9ac448a01179aec, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0xffd34f15ec608676

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0xffd34f15ec608676, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xffd34f15ec608676, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type Meta_init_Params struct{ capnp.Struct }

// Meta_init_Params_TypeID is the unique identifier for the type Meta_init_Params.
const Meta_init_Params_TypeID = 0xed03ac5ef50453fb

func NewMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Meta_init_Params{st}, err
}

func NewRootMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Meta_init_Params{st}, err
}

func ReadRootMeta_init_Params(msg *capnp.Message) (Meta_init_Params, error) {
	root, err := msg.RootPtr()
	return Meta_init_Params{root.Struct()}, err
}

func (s Meta_init_Params) String() string {
	str, _ := text.Marshal(0xed03ac5ef50453fb, s.Struct)
	return str
}

func (s Meta_init_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_init_Params) HasBasePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_init_Params) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_init_Params) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Meta_init_Params) Backend() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Meta_init_Params) HasBackend() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BackendBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBackend(v string) error {
	return s.Struct.SetText(2, v)
}

// Meta_init_Params_List is a list of Meta_init_Params.
type Meta_init_Params_List struct{ capnp.List }

// NewMeta_init_Params creates a new list of Meta_init_Params.
func NewMeta_init_Params_List(s *capnp.Segment, sz int32) (Meta_init_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Meta_init_Params_List{l}, err
}

func (s Meta_init_Params_List) At(i int) Meta_init_Params { return Meta_init_Params{s.List.Struct(i)} }

func (s Meta_init_Params_List) Set(i int, v Meta_init_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Params_List) String() string {
	str, _ := text.MarshalList(0xed03ac5ef50453fb, s.List)
	return str
}

// Meta_init_Params_Promise is a wrapper for a Meta_init_Params promised by a client call.
type Meta_init_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Params_Promise) Struct() (Meta_init_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Params{s}, err
}

type Meta_init_Results struct{ capnp.Struct }

// Meta_init_Results_TypeID is the unique identifier for the type Meta_init_Results.
const Meta_init_Results_TypeID = 0xe826e800c318a7c4

func NewMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func NewRootMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func ReadRootMeta_init_Results(msg *capnp.Message) (Meta_init_Results, error) {
	root, err := msg.RootPtr()
	return Meta_init_Results{root.Struct()}, err
}

func (s Meta_init_Results) String() string {
	str, _ := text.Marshal(0xe826e800c318a7c4, s.Struct)
	return str
}

// Meta_init_Results_List is a list of Meta_init_Results.
type Meta_init_Results_List struct{ capnp.List }

// NewMeta_init_Results creates a new list of Meta_init_Results.
func NewMeta_init_Results_List(s *capnp.Segment, sz int32) (Meta_init_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_init_Results_List{l}, err
}

func (s Meta_init_Results_List) At(i int) Meta_init_Results {
	return Meta_init_Results{s.List.Struct(i)}
}

func (s Meta_init_Results_List) Set(i int, v Meta_init_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Results_List) String() string {
	str, _ := text.MarshalList(0xe826e800c318a7c4, s.List)
	return str
}

// Meta_init_Results_Promise is a wrapper for a Meta_init_Results promised by a client call.
type Meta_init_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Results_Promise) Struct() (Meta_init_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfc487818328b97ef

func (c API) Version(ctx context.Context, params func(API_version_Params) error, opts ...capnp.CallOption) API_version_Results_Promise {
	if c.Client == nil {
		return API_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfc487818328b97ef,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:API",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(API_version_Params{Struct: s}) }
	}
	return API_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Version(API_version) error

	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Log(VCS_log) error

	Commit(VCS_commit) error

	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfc487818328b97ef,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:API",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := API_version{c, opts, API_version_Params{Struct: p}, API_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// API_version holds the arguments for a server call to API.version.
type API_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  API_version_Params
	Results API_version_Results
}

type API_version_Params struct{ capnp.Struct }

// API_version_Params_TypeID is the unique identifier for the type API_version_Params.
const API_version_Params_TypeID = 0xc6920dee4bb4a443

func NewAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func NewRootAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func ReadRootAPI_version_Params(msg *capnp.Message) (API_version_Params, error) {
	root, err := msg.RootPtr()
	return API_version_Params{root.Struct()}, err
}

func (s API_version_Params) String() string {
	str, _ := text.Marshal(0xc6920dee4bb4a443, s.Struct)
	return str
}

// API_version_Params_List is a list of API_version_Params.
type API_version_Params_List struct{ capnp.List }

// NewAPI_version_Params creates a new list of API_version_Params.
func NewAPI_version_Params_List(s *capnp.Segment, sz int32) (API_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return API_version_Params_List{l}, err
}

func (s API_version_Params_List) At(i int) API_version_Params {
	return API_version_Params{s.List.Struct(i)}
}

func (s API_version_Params_List) Set(i int, v API_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Params_List) String() string {
	str, _ := text.MarshalList(0xc6920dee4bb4a443, s.List)
	return str
}

// API_version_Params_Promise is a wrapper for a API_version_Params promised by a client call.
type API_version_Params_Promise struct{ *capnp.Pipeline }

func (p API_version_Params_Promise) Struct() (API_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Params{s}, err
}

type API_version_Results struct{ capnp.Struct }

// API_version_Results_TypeID is the unique identifier for the type API_version_Results.
const API_version_Results_TypeID = 0xd81779091ced5513

func NewAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func NewRootAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func ReadRootAPI_version_Results(msg *capnp.Message) (API_version_Results, error) {
	root, err := msg.RootPtr()
	return API_version_Results{root.Struct()}, err
}

func (s API_version_Results) String() string {
	str, _ := text.Marshal(0xd81779091ced5513, s.Struct)
	return str
}

func (s API_version_Results) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s API_version_Results) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// API_version_Results_List is a list of API_version_Results.
type API_version_Results_List struct{ capnp.List }

// NewAPI_version_Results creates a new list of API_version_Results.
func NewAPI_version_Results_List(s *capnp.Segment, sz int32) (API_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return API_version_Results_List{l}, err
}

func (s API_version_Results_List) At(i int) API_version_Results {
	return API_version_Results{s.List.Struct(i)}
}

func (s API_version_Results_List) Set(i int, v API_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Results_List) String() string {
	str, _ := text.MarshalList(0xd81779091ced5513, s.List)
	return str
}

// API_version_Results_Promise is a wrapper for a API_version_Results promised by a client call.
type API_version_Results_Promise struct{ *capnp.Pipeline }

func (p API_version_Results_Promise) Struct() (API_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Results{s}, err
}

const schema_ea883e7d5248d81b = "x\xda\x94W}\x8cTW\x15?\xe7\xde\x99y\xf3f" +
	"\xde2{yK\xbaju\xb6t\xdb\xb4\xe8N\xf7\x83" +
	"\xa6,\x8a;,\xec\x0a\x15t.[7P\xa5\xedc" +
	"\xe7\xb1\xfb\xc2\xcc\xbcq\xde[`\x1bq\xd1\x96\x16[" +
	"\x89\xb1j\x9b~$\xa4\xa4\xd8\xa2M\xac\x01SMJ" +
	",\x0a\xb5\xf4\xc3\x10\xe9V\x9a\xd8\x185\xa9h\x8a\x1b" +
	"Z\xd1\x14!\xcf\xdc;\xfb\xde<vg\xa7\xe9_\xbb" +
	"s\xcf\x99s\xce\xfd\xfd~\xf7\x9c3\x9d\xfb\"Y\xd2" +
	"\x15Mi\x00\xfc\xbb\xd1\x98\xc7\xfe\xb6\xa3\xd4\xf9\xea;" +
	"\xf7\x00k\xa6\xde'\xce\xac\xd9\xb0\xeb\xf3{\xff\x09\x80" +
	"\xfa\xb9\xe8O\xf4\x0bQ\x05@?\x1f\xfd\x9dn\xc5\x14" +
	"\x00o\xef\xbe\x07\xbfd-\xeb\xdf\x0bLG\x80\x88\x02" +
	"\xd0\xc3c\x09\x84\x88\xf7\x04I<\xd2\xfa\xcc\xd3\x8fW" +
	"-Q\"L\xbd1\x82\x80\xfa\x8a\xd8\x0e@o\xd9\xdd" +
	"\xbfy\xe8\xf5?\x9c\xdd?\xe3\x80\"\xf0\x93\xb1\x8b\x80" +
	"\xfa\xc1X\x1f\xa0w\xef\xd2\xdb\x0fd\xee\xec<\x00\xbc" +
	"\x19C\x85D\xa9p<\x19{E\x9f\x8a)\xfaT," +
	"\xdd\xa3*\xdfC@o\xcf\xa7w\x9d\x18:=\xfd\x14" +
	"\xb0\x96\x99R\xf4\xef\xc7/B\xc4[:\xfc)o\xdd" +
	"W\xd5C\xe1D\xe3\xf1\xf7\x00\xf5\x89\xb8HD\x17j" +
	",\xb3\xe5\x89\xb0\xbd\xe7\xd1xBT\xfa\xa4tXb" +
	"\xbf\xf7\xf8\xa5\x97\xbe\xf3\xd3\xd0%\x8f\xc5\x89\xb8\xa4\xb1" +
	"\xe0\xb3\xaf\xb6^\xea|\x0e\xb8\x8e\xc1w\x0f\xc6\xe5-" +
	"\x0f\xc5\xc5-\xcf_\xfe\xf7\x9f\x8e\xad\xb0\x9f\x0f\xc1\xa0" +
	"\xab\xaa\xb8e\x93*\xec\xbd\xe3\xdf\x1c\xdc\xf6\xf6\xa9\xe7" +
	"kU\xf7X\xea\xc7E\xecUO\x1d\xf9\xe2\xbf\x9a\x1e" +
	"z)d\xe1U\xcb\xbb\x8f]\x85\x0f\xac~\xf6$\xb0" +
	"E\xbe\xa5W\x95\xa0\xffqh\xac\xef\xfag\x0e\x9f\x0c" +
	"Uz\x8d\xbaPX\xf4\xaf\x9c\xbbZ\x9d\xb8\xea\x0c\xf0" +
	"\x16\xf4M\xaa\xbaX\x14\xcaTq\xc9\x87\xf7\xf5\x18\xd7" +
	"\xee\x1fx\xab\x9a\xaez\x93.\xf1]\xd4{\xa5\xc3\xa1" +
	"w\xce\xac\xff\xbd{\xfa-`\xcd\x18\xa2C\x02\xbdI" +
	"}E7UE7\xd5\xb4\xbeG\xfd;\xa0w\xb8g" +
	"\xea\xd4=\x99\xe5\x7f\x0e\xd5h%d\x8do\xde\xf9\xf0" +
	"\x1e\xed\xa6\xb7\xff\x12\xb2\xf0\x84\xac\xf1\x837\xbeqd" +
	"\xf3\xc6\xc3\x7f\x9d\xa3\xbc\xde\xc4c\xfa\xca\x84\xf0\\\x91" +
	"\xb8\x1f\xf5\x8e\xa4\x020}\xfc\xe9\xd6\xdf\x9e\xbd\xfel" +
	"-\xca\xa2\xa4\x8c2|\xc3km\xbf\xbe\xf9\xc6\x7f\x84" +
	"\xe9\xbc\x9c\x90\x94`R\\\xe4\x7fC\x91\x0bw<K" +
	"\xcfU\x0b\x90z\xea\xe9JJ\xbe{\x93?\x03\xf4\xde" +
	"\xff!\xd98\xdc\xdd\xfe~\x08\xc5\xa9\xa4\xac\xfd?\xd7" +
	"\xde\xbe\xb1W\xbd\xee\xbfa\x90\x8e&e\xecc2v" +
	"\xfb\xe0\xf1\x85\xd3\xbb\x7f|q\xce\x15\xce'\x0f\xe8\x1f" +
	"\x88\xba\xf5\x0b\xc9\xfb\xf5\x01M<\x9e\xe9G\x1e\xecn" +
	"\xdd\xb9\xe6\xd2\x1c\xe7\x0e\xed\x80~\xb3p\xd1\xbb\xb4/" +
	"\xe8\x9b\xb4[\x00\xbc[\xc8\x8f\xa6>\xb9\xe3\xbe\xcba" +
	"\xa9\xe9\x9b4\xa1\xa4\xcd\x9aP\xd2\xf6\xfb\xeezw\xd1" +
	"\x97O{3\xd7\xaa\xd6\xa6I\x02Oh}\xb0\xcc\x1b" +
	"1\xca\xa5\xf2MF\x19\xad\x8c\xfcwyj\xbd\xe9\x1a" +
	"9D\xae\xd1(@@\x19\xfa\x0c1\xbe\x04\x08\x1bP" +
	"\x10\x03\xc9\xa1\x9f\x85\xf5\x0a[\x87\x82$\xc0\x13\x05#" +
	" (\xb9F\xd8\x16)\xa9\xaf\x8f[n\x16Se\xab" +
	"4\x9a\xc5\x94U\x12\x9fr\x88A%\xd4\xafdp(" +
	"\xe3\xb8\xc6\xa8\xd9\xbe\xc1t\xc6\x0b\xae\x03\xd0\xc0'g" +
	"T\x8c\xa2\x03<N#\x00\x11\x04`7n\x00\xe07" +
	"P\xe4K\x092D\xa9p\xd6u+\x00\xef\xa4\xc8?" +
	"G\xd0+\xd8#F!g\xb8\x80c\xa8\x01A\x0d\xd0" +
	"\xab\x98e;g\xb8c\x00\x10\x9c\xf9YI(\xeb\x88" +
	"\xe1\xb6o\xe8\xab\x16\xc6#A\xd2&\x11_\xa3\xc8[" +
	"\x09z[\xad\xad\x1f\x1ek\xc85\xdc\xb5\xa5\xad6\x80" +
	"\x00=\x82\xc4\xbb\xe3\x07\xfb\xf9\xd17\x1f8\x01<B" +
	"pe;\xa2\x06\xd0\x85\xdfF\xcfw\x8d\xb6YN\x9b" +
	"\xd1\xe6\xb8\x86\xdbQ\xb0\xb6\x99my\xd3\x19\xa9Xe" +
	"\xd7\xb2Km\xf6\xd66\xa34\xd1V\xb2\xf3&\x00\xf0" +
	"\xab\x83\xd2~\xb1\x04\x80?G\x91\xbf\x10\xc2\xe3W\xe2" +
	"\xf0\x08E\xfe\"A$-H\x00\xd8Qq\xf6K\x8a" +
	"\xfc8AF\xb1\x05)\x00;\xd6\x0d\xc0_\xa0\xc8_" +
	"&\xc8\"\xbb[0\x02\xc0N\x88\xc3\x17)\xf2\xd7\x08" +
	"\xb2h\xb4\x05\xa3\x00\xec\xa48<N\x91\x9f\"\xc8b" +
	"\xa4\x05c\x00\xec\xf5~\x00\xfe2E\xfe\x06\xc1T\xd9" +
	"p\x03\xc0Sc\x863\x86M@\xb0\x090\xe5Xw" +
	"\x9b\xa8\x02A\x150m\x89;\xd4>9\xab\xad\x0a\"" +
	"\x10D\xc0t\xde,\xbbc\x18\x01\x82\x11\xc0\xc9\xa2\x9d" +
	"\xbf\xcd*\x9a\xf3\x83<\xbcj(S\xb0G\xdb\xfb\xaa" +
	"2\x99\x97\xd1\\Z\xda\xc3\x84\x0a0\xe2\x14y\xcb\xac" +
	"\xc2\xebj\xb1b\x16\xed\xed\x81\x18\xe1#\xc5QBq" +
	"d\x14_\xf6\xbeC\xd8\xbe-oU\xeai^di" +
	"\xa7\xc8;\x09\xfa\x14wT\x00\xf8g(\xf2es2" +
	"WL\xc35s\x06\xa4+f\xc9u|p\xeb\xa2#" +
	"+\x9a\x81/\x9c\xb0\xbf\x960\x10UG\x7f\xed\xe5M" +
	":\x95\x91\\(\xe9d\xdeqs\x0da\x14\\\x8d\xd8" +
	"\xc5\xa2\xe5V\x11\xa0\xae3\xd7ienmf\xbbY" +
	"q,\xbb$a\xa0\xc5:N\xa2\x93eD\x9f\x09\x08" +
	"iDZ\x15n\xfc\x90d\xc2K\x99\xf5\xe6\xfbk\xd4" +
	"N\xce\xf8\xf9\xd2lx=Y\x15^\x11jq-\x94" +
	"RtF\xe7W\xf4:{t\xa0\xe4V&\xe6k\x1b" +
	"\xcd\xb2m0L\x00\xf2\xe6 \xbe!\xf4\xf15\x8a|" +
	",D\x97)\x92\xdeE\x91\x17\x0822\xd3\x04,\xe1" +
	"\x99\xa7\xc8w\x8b&@\xabM`\x978\xdcI\x91\xdf" +
	"K\xae|\xb8\xe1ZS\xae1\xea\xe0\x02\xc0\x1cEy" +
	"\xb6\x000\x957\\s~\xca%Qb.4 \xaa" +
	"\xe63\x87\xa8`v\xd1\xc1!\x81F\xab\x9c\\\xfe\xae" +
	"\x89\xfe:\xca~\xde\x0d\x84\x1d\x14\x93\xcb\x9f\x9b\xe8\xef" +
	"\x05\xecQ1\x9d\xf6\x89\xc9\xe5o\x86\xe8\xef\xa2\xec[" +
	"\x8b\x81\xb0q\x05i\xb0\xda\xa1\xbf\x0d0K\xc4\xdc\xac" +
	"`$\xd8\x18\xd1\xdf\xb7\x18_^\x9d\x94\xd1`\xe1C" +
	"\x7fk\xf4'eZN\xaf,\xa6\x0a\x96\xe3fQ\x19" +
	"1\xdc,\xa6\xe5\xf3\xceb_U\x99YLU\xff\xd4" +
	"\x9d\x92\x12\x171E\x1b\x08xp(#\xe2\x07\x1d\xa5" +
	"\x9ex\xdb\x09N\x9a%\xb7b\x99\x01y\xcd\xb5u\x1b" +
	"P\x1c6\xca\x1e\xf4<-\x88= \x86\xe1j\x8a<" +
	"\x17R\xdbz1\x1e\xd6P\xe4\xb7\x85\xd4\xc6E\x15\xeb" +
	"(\xf2\x8d\x04\xbd-\x86c\xce\x1a\x9bi{G\xc9\xac" +
	"\x04=d\x8b1\xb2\xcd,\xe5\x1b\xb6\xe2j\x8bl\xb0" +
	":\xf83\xe1#\x83\x12\xec\xbc\xb3@\x09d\xa8\x0c\xaf" +
	"\x92:\x8cK\x1d\xfa?A\xd0\xdf\x13Y\x97\xd0\xd3u" +
	"B\x87\xfe~\x8d\xfe\xc6\xcf>&4\xd3\xa4(\x05{" +
	"4\x8b}\xd5Fq%\xf3\xb54+sk\xe5\xe3\x97" +
	"i\xfc_\x06\xe8/\xf5\x8c\xf5\x03aQ\xc5oIY" +
	"\xe4\x1abm\x9f\x06\xa8-\xa6\x00\xb5_x!\xac\xc8" +
	"l\x01\xd5\x19\x00\xf5&\xce\xad\xa1\x89S\xb1m7 " +
	"\xaah\xec\\-&\xb7\xa0v\xde\x0eYk\xdb\xbe\xa2" +
	"\xc3\xd4t\xd7:d\xbab\x96\x0b\x13~\xf0\xff\x07\x00" +
	"\x00\xff\xff6\x1e\xc7\xf2"

func init() {
	schemas.Register(schema_ea883e7d5248d81b,
		0x83e6cb306e77e311,
		0x884238694e8b8d88,
		0x9ba7a818970a029c,
		0x9fe8d2cd92c27a38,
		0xa2305f2ea25a3484,
		0xa4efd353c57d2b85,
		0xa9095b4cff1e5634,
		0xa99c622e110c1203,
		0xab89c6fc9bf26f2a,
		0xb030fc18cb3b0e61,
		0xb76f3dc1dcf4fdf1,
		0xb7d0dd6b467e7539,
		0xc6920dee4bb4a443,
		0xc9ac448a01179aec,
		0xc9b3a8263f6853d7,
		0xd81779091ced5513,
		0xd9459f2361338d96,
		0xd9d374ce4dd8e6a9,
		0xdf3a2e83d0d533b3,
		0xe1dd2f0c85965fd6,
		0xe2b3585db47cd4f9,
		0xe826e800c318a7c4,
		0xe92935bf20cc2856,
		0xed03ac5ef50453fb,
		0xf3243256580294f3,
		0xf7250939585a23f6,
		0xfaa680ef12c44624,
		0xfc487818328b97ef,
		0xfd86771dd5950237,
		0xffd34f15ec608676)
}
