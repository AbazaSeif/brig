// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// StatInfo is a stat-like description of any node
type StatInfo struct{ capnp.Struct }

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xa2305f2ea25a3484

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xa2305f2ea25a3484, s.Struct)
	return str
}

func (s StatInfo) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s StatInfo) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StatInfo) SetHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s StatInfo) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s StatInfo) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s StatInfo) Inode() uint64 {
	return s.Struct.Uint64(8)
}

func (s StatInfo) SetInode(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s StatInfo) IsDir() bool {
	return s.Struct.Bit(128)
}

func (s StatInfo) SetIsDir(v bool) {
	s.Struct.SetBit(128, v)
}

func (s StatInfo) Depth() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s StatInfo) SetDepth(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s StatInfo) ModTime() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s StatInfo) HasModTime() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s StatInfo) ModTimeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s StatInfo) SetModTime(v string) error {
	return s.Struct.SetText(2, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xa2305f2ea25a3484, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

// Single log entry
type LogEntry struct{ capnp.Struct }

// LogEntry_TypeID is the unique identifier for the type LogEntry.
const LogEntry_TypeID = 0xd9d374ce4dd8e6a9

func NewLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LogEntry{st}, err
}

func NewRootLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return LogEntry{st}, err
}

func ReadRootLogEntry(msg *capnp.Message) (LogEntry, error) {
	root, err := msg.RootPtr()
	return LogEntry{root.Struct()}, err
}

func (s LogEntry) String() string {
	str, _ := text.Marshal(0xd9d374ce4dd8e6a9, s.Struct)
	return str
}

func (s LogEntry) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s LogEntry) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LogEntry) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s LogEntry) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LogEntry) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LogEntry) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LogEntry) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LogEntry) Tags() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s LogEntry) HasTags() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LogEntry) SetTags(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s LogEntry) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s LogEntry) Date() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s LogEntry) HasDate() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s LogEntry) DateBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s LogEntry) SetDate(v string) error {
	return s.Struct.SetText(3, v)
}

// LogEntry_List is a list of LogEntry.
type LogEntry_List struct{ capnp.List }

// NewLogEntry creates a new list of LogEntry.
func NewLogEntry_List(s *capnp.Segment, sz int32) (LogEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return LogEntry_List{l}, err
}

func (s LogEntry_List) At(i int) LogEntry { return LogEntry{s.List.Struct(i)} }

func (s LogEntry_List) Set(i int, v LogEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s LogEntry_List) String() string {
	str, _ := text.MarshalList(0xd9d374ce4dd8e6a9, s.List)
	return str
}

// LogEntry_Promise is a wrapper for a LogEntry promised by a client call.
type LogEntry_Promise struct{ *capnp.Pipeline }

func (p LogEntry_Promise) Struct() (LogEntry, error) {
	s, err := p.Pipeline.Struct()
	return LogEntry{s}, err
}

// Key/Value pair in the config
type ConfigPair struct{ capnp.Struct }

// ConfigPair_TypeID is the unique identifier for the type ConfigPair.
const ConfigPair_TypeID = 0xe54de22194de748a

func NewConfigPair(s *capnp.Segment) (ConfigPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigPair{st}, err
}

func NewRootConfigPair(s *capnp.Segment) (ConfigPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigPair{st}, err
}

func ReadRootConfigPair(msg *capnp.Message) (ConfigPair, error) {
	root, err := msg.RootPtr()
	return ConfigPair{root.Struct()}, err
}

func (s ConfigPair) String() string {
	str, _ := text.Marshal(0xe54de22194de748a, s.Struct)
	return str
}

func (s ConfigPair) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConfigPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConfigPair) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigPair) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConfigPair) Val() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfigPair) HasVal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConfigPair) ValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfigPair) SetVal(v string) error {
	return s.Struct.SetText(1, v)
}

// ConfigPair_List is a list of ConfigPair.
type ConfigPair_List struct{ capnp.List }

// NewConfigPair creates a new list of ConfigPair.
func NewConfigPair_List(s *capnp.Segment, sz int32) (ConfigPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConfigPair_List{l}, err
}

func (s ConfigPair_List) At(i int) ConfigPair { return ConfigPair{s.List.Struct(i)} }

func (s ConfigPair_List) Set(i int, v ConfigPair) error { return s.List.SetStruct(i, v.Struct) }

func (s ConfigPair_List) String() string {
	str, _ := text.MarshalList(0xe54de22194de748a, s.List)
	return str
}

// ConfigPair_Promise is a wrapper for a ConfigPair promised by a client call.
type ConfigPair_Promise struct{ *capnp.Pipeline }

func (p ConfigPair_Promise) Struct() (ConfigPair, error) {
	s, err := p.Pipeline.Struct()
	return ConfigPair{s}, err
}

// One History entry for a file
type HistoryEntry struct{ capnp.Struct }

// HistoryEntry_TypeID is the unique identifier for the type HistoryEntry.
const HistoryEntry_TypeID = 0xd4e4784e766af065

func NewHistoryEntry(s *capnp.Segment) (HistoryEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HistoryEntry{st}, err
}

func NewRootHistoryEntry(s *capnp.Segment) (HistoryEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HistoryEntry{st}, err
}

func ReadRootHistoryEntry(msg *capnp.Message) (HistoryEntry, error) {
	root, err := msg.RootPtr()
	return HistoryEntry{root.Struct()}, err
}

func (s HistoryEntry) String() string {
	str, _ := text.Marshal(0xd4e4784e766af065, s.Struct)
	return str
}

func (s HistoryEntry) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HistoryEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HistoryEntry) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HistoryEntry) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HistoryEntry) Change() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s HistoryEntry) HasChange() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HistoryEntry) ChangeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s HistoryEntry) SetChange(v string) error {
	return s.Struct.SetText(1, v)
}

func (s HistoryEntry) Ref() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s HistoryEntry) HasRef() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HistoryEntry) SetRef(v []byte) error {
	return s.Struct.SetData(2, v)
}

// HistoryEntry_List is a list of HistoryEntry.
type HistoryEntry_List struct{ capnp.List }

// NewHistoryEntry creates a new list of HistoryEntry.
func NewHistoryEntry_List(s *capnp.Segment, sz int32) (HistoryEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HistoryEntry_List{l}, err
}

func (s HistoryEntry_List) At(i int) HistoryEntry { return HistoryEntry{s.List.Struct(i)} }

func (s HistoryEntry_List) Set(i int, v HistoryEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s HistoryEntry_List) String() string {
	str, _ := text.MarshalList(0xd4e4784e766af065, s.List)
	return str
}

// HistoryEntry_Promise is a wrapper for a HistoryEntry promised by a client call.
type HistoryEntry_Promise struct{ *capnp.Pipeline }

func (p HistoryEntry_Promise) Struct() (HistoryEntry, error) {
	s, err := p.Pipeline.Struct()
	return HistoryEntry{s}, err
}

type DiffPair struct{ capnp.Struct }

// DiffPair_TypeID is the unique identifier for the type DiffPair.
const DiffPair_TypeID = 0xf8551f83bb42e152

func NewDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func NewRootDiffPair(s *capnp.Segment) (DiffPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffPair{st}, err
}

func ReadRootDiffPair(msg *capnp.Message) (DiffPair, error) {
	root, err := msg.RootPtr()
	return DiffPair{root.Struct()}, err
}

func (s DiffPair) String() string {
	str, _ := text.Marshal(0xf8551f83bb42e152, s.Struct)
	return str
}

func (s DiffPair) Src() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetSrc(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSrc sets the src field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewSrc() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DiffPair) Dst() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s DiffPair) HasDst() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiffPair) SetDst(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDst sets the dst field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s DiffPair) NewDst() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DiffPair_List is a list of DiffPair.
type DiffPair_List struct{ capnp.List }

// NewDiffPair creates a new list of DiffPair.
func NewDiffPair_List(s *capnp.Segment, sz int32) (DiffPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DiffPair_List{l}, err
}

func (s DiffPair_List) At(i int) DiffPair { return DiffPair{s.List.Struct(i)} }

func (s DiffPair_List) Set(i int, v DiffPair) error { return s.List.SetStruct(i, v.Struct) }

func (s DiffPair_List) String() string {
	str, _ := text.MarshalList(0xf8551f83bb42e152, s.List)
	return str
}

// DiffPair_Promise is a wrapper for a DiffPair promised by a client call.
type DiffPair_Promise struct{ *capnp.Pipeline }

func (p DiffPair_Promise) Struct() (DiffPair, error) {
	s, err := p.Pipeline.Struct()
	return DiffPair{s}, err
}

func (p DiffPair_Promise) Src() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DiffPair_Promise) Dst() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Diff struct{ capnp.Struct }

// Diff_TypeID is the unique identifier for the type Diff.
const Diff_TypeID = 0xc9601ec89a6aa066

func NewDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Diff{st}, err
}

func NewRootDiff(s *capnp.Segment) (Diff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Diff{st}, err
}

func ReadRootDiff(msg *capnp.Message) (Diff, error) {
	root, err := msg.RootPtr()
	return Diff{root.Struct()}, err
}

func (s Diff) String() string {
	str, _ := text.Marshal(0xc9601ec89a6aa066, s.Struct)
	return str
}

func (s Diff) Added() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasAdded() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Diff) SetAdded(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAdded sets the added field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewAdded(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Diff) Removed() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasRemoved() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Diff) SetRemoved(v StatInfo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRemoved sets the removed field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewRemoved(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Diff) Ignored() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(2)
	return StatInfo_List{List: p.List()}, err
}

func (s Diff) HasIgnored() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Diff) SetIgnored(v StatInfo_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewIgnored sets the ignored field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s Diff) NewIgnored(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Diff) Merged() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(3)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasMerged() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Diff) SetMerged(v DiffPair_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMerged sets the merged field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewMerged(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Diff) Conflict() (DiffPair_List, error) {
	p, err := s.Struct.Ptr(4)
	return DiffPair_List{List: p.List()}, err
}

func (s Diff) HasConflict() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Diff) SetConflict(v DiffPair_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewConflict sets the conflict field to a newly
// allocated DiffPair_List, preferring placement in s's segment.
func (s Diff) NewConflict(n int32) (DiffPair_List, error) {
	l, err := NewDiffPair_List(s.Struct.Segment(), n)
	if err != nil {
		return DiffPair_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// Diff_List is a list of Diff.
type Diff_List struct{ capnp.List }

// NewDiff creates a new list of Diff.
func NewDiff_List(s *capnp.Segment, sz int32) (Diff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return Diff_List{l}, err
}

func (s Diff_List) At(i int) Diff { return Diff{s.List.Struct(i)} }

func (s Diff_List) Set(i int, v Diff) error { return s.List.SetStruct(i, v.Struct) }

func (s Diff_List) String() string {
	str, _ := text.MarshalList(0xc9601ec89a6aa066, s.List)
	return str
}

// Diff_Promise is a wrapper for a Diff promised by a client call.
type Diff_Promise struct{ *capnp.Pipeline }

func (p Diff_Promise) Struct() (Diff, error) {
	s, err := p.Pipeline.Struct()
	return Diff{s}, err
}

type FS struct{ Client capnp.Client }

// FS_TypeID is the unique identifier for the type FS.
const FS_TypeID = 0xe2b3585db47cd4f9

func (c FS) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c FS) IsPinned(ctx context.Context, params func(FS_isPinned_Params) error, opts ...capnp.CallOption) FS_isPinned_Results_Promise {
	if c.Client == nil {
		return FS_isPinned_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "isPinned",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_isPinned_Params{Struct: s}) }
	}
	return FS_isPinned_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type FS_Server interface {
	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	IsPinned(FS_isPinned) error
}

func FS_ServerToClient(s FS_Server) FS {
	c, _ := s.(server.Closer)
	return FS{Client: server.New(FS_Methods(nil, s), c)}
}

func FS_Methods(methods []server.Method, s FS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "isPinned",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_isPinned{c, opts, FS_isPinned_Params{Struct: p}, FS_isPinned_Results{Struct: r}}
			return s.IsPinned(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// FS_stage holds the arguments for a server call to FS.stage.
type FS_stage struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_stage_Params
	Results FS_stage_Results
}

// FS_list holds the arguments for a server call to FS.list.
type FS_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_list_Params
	Results FS_list_Results
}

// FS_cat holds the arguments for a server call to FS.cat.
type FS_cat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_cat_Params
	Results FS_cat_Results
}

// FS_mkdir holds the arguments for a server call to FS.mkdir.
type FS_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_mkdir_Params
	Results FS_mkdir_Results
}

// FS_remove holds the arguments for a server call to FS.remove.
type FS_remove struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_remove_Params
	Results FS_remove_Results
}

// FS_move holds the arguments for a server call to FS.move.
type FS_move struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_move_Params
	Results FS_move_Results
}

// FS_pin holds the arguments for a server call to FS.pin.
type FS_pin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_pin_Params
	Results FS_pin_Results
}

// FS_unpin holds the arguments for a server call to FS.unpin.
type FS_unpin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_unpin_Params
	Results FS_unpin_Results
}

// FS_isPinned holds the arguments for a server call to FS.isPinned.
type FS_isPinned struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  FS_isPinned_Params
	Results FS_isPinned_Results
}

type FS_stage_Params struct{ capnp.Struct }

// FS_stage_Params_TypeID is the unique identifier for the type FS_stage_Params.
const FS_stage_Params_TypeID = 0x9ba7a818970a029c

func NewFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func NewRootFS_stage_Params(s *capnp.Segment) (FS_stage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_stage_Params{st}, err
}

func ReadRootFS_stage_Params(msg *capnp.Message) (FS_stage_Params, error) {
	root, err := msg.RootPtr()
	return FS_stage_Params{root.Struct()}, err
}

func (s FS_stage_Params) String() string {
	str, _ := text.Marshal(0x9ba7a818970a029c, s.Struct)
	return str
}

func (s FS_stage_Params) LocalPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_stage_Params) HasLocalPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) LocalPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetLocalPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_stage_Params) RepoPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_stage_Params) HasRepoPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_stage_Params) RepoPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_stage_Params) SetRepoPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_stage_Params_List is a list of FS_stage_Params.
type FS_stage_Params_List struct{ capnp.List }

// NewFS_stage_Params creates a new list of FS_stage_Params.
func NewFS_stage_Params_List(s *capnp.Segment, sz int32) (FS_stage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_stage_Params_List{l}, err
}

func (s FS_stage_Params_List) At(i int) FS_stage_Params { return FS_stage_Params{s.List.Struct(i)} }

func (s FS_stage_Params_List) Set(i int, v FS_stage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Params_List) String() string {
	str, _ := text.MarshalList(0x9ba7a818970a029c, s.List)
	return str
}

// FS_stage_Params_Promise is a wrapper for a FS_stage_Params promised by a client call.
type FS_stage_Params_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Params_Promise) Struct() (FS_stage_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Params{s}, err
}

type FS_stage_Results struct{ capnp.Struct }

// FS_stage_Results_TypeID is the unique identifier for the type FS_stage_Results.
const FS_stage_Results_TypeID = 0x884238694e8b8d88

func NewFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func NewRootFS_stage_Results(s *capnp.Segment) (FS_stage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_stage_Results{st}, err
}

func ReadRootFS_stage_Results(msg *capnp.Message) (FS_stage_Results, error) {
	root, err := msg.RootPtr()
	return FS_stage_Results{root.Struct()}, err
}

func (s FS_stage_Results) String() string {
	str, _ := text.Marshal(0x884238694e8b8d88, s.Struct)
	return str
}

// FS_stage_Results_List is a list of FS_stage_Results.
type FS_stage_Results_List struct{ capnp.List }

// NewFS_stage_Results creates a new list of FS_stage_Results.
func NewFS_stage_Results_List(s *capnp.Segment, sz int32) (FS_stage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_stage_Results_List{l}, err
}

func (s FS_stage_Results_List) At(i int) FS_stage_Results { return FS_stage_Results{s.List.Struct(i)} }

func (s FS_stage_Results_List) Set(i int, v FS_stage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_stage_Results_List) String() string {
	str, _ := text.MarshalList(0x884238694e8b8d88, s.List)
	return str
}

// FS_stage_Results_Promise is a wrapper for a FS_stage_Results promised by a client call.
type FS_stage_Results_Promise struct{ *capnp.Pipeline }

func (p FS_stage_Results_Promise) Struct() (FS_stage_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_stage_Results{s}, err
}

type FS_list_Params struct{ capnp.Struct }

// FS_list_Params_TypeID is the unique identifier for the type FS_list_Params.
const FS_list_Params_TypeID = 0xfd86771dd5950237

func NewFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func NewRootFS_list_Params(s *capnp.Segment) (FS_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_list_Params{st}, err
}

func ReadRootFS_list_Params(msg *capnp.Message) (FS_list_Params, error) {
	root, err := msg.RootPtr()
	return FS_list_Params{root.Struct()}, err
}

func (s FS_list_Params) String() string {
	str, _ := text.Marshal(0xfd86771dd5950237, s.Struct)
	return str
}

func (s FS_list_Params) Root() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_list_Params) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Params) RootBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_list_Params) SetRoot(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_list_Params) MaxDepth() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_list_Params) SetMaxDepth(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_list_Params_List is a list of FS_list_Params.
type FS_list_Params_List struct{ capnp.List }

// NewFS_list_Params creates a new list of FS_list_Params.
func NewFS_list_Params_List(s *capnp.Segment, sz int32) (FS_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_list_Params_List{l}, err
}

func (s FS_list_Params_List) At(i int) FS_list_Params { return FS_list_Params{s.List.Struct(i)} }

func (s FS_list_Params_List) Set(i int, v FS_list_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_list_Params_List) String() string {
	str, _ := text.MarshalList(0xfd86771dd5950237, s.List)
	return str
}

// FS_list_Params_Promise is a wrapper for a FS_list_Params promised by a client call.
type FS_list_Params_Promise struct{ *capnp.Pipeline }

func (p FS_list_Params_Promise) Struct() (FS_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Params{s}, err
}

type FS_list_Results struct{ capnp.Struct }

// FS_list_Results_TypeID is the unique identifier for the type FS_list_Results.
const FS_list_Results_TypeID = 0xe92935bf20cc2856

func NewFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func NewRootFS_list_Results(s *capnp.Segment) (FS_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_list_Results{st}, err
}

func ReadRootFS_list_Results(msg *capnp.Message) (FS_list_Results, error) {
	root, err := msg.RootPtr()
	return FS_list_Results{root.Struct()}, err
}

func (s FS_list_Results) String() string {
	str, _ := text.Marshal(0xe92935bf20cc2856, s.Struct)
	return str
}

func (s FS_list_Results) Entries() (StatInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo_List{List: p.List()}, err
}

func (s FS_list_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_list_Results) SetEntries(v StatInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated StatInfo_List, preferring placement in s's segment.
func (s FS_list_Results) NewEntries(n int32) (StatInfo_List, error) {
	l, err := NewStatInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return StatInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FS_list_Results_List is a list of FS_list_Results.
type FS_list_Results_List struct{ capnp.List }

// NewFS_list_Results creates a new list of FS_list_Results.
func NewFS_list_Results_List(s *capnp.Segment, sz int32) (FS_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_list_Results_List{l}, err
}

func (s FS_list_Results_List) At(i int) FS_list_Results { return FS_list_Results{s.List.Struct(i)} }

func (s FS_list_Results_List) Set(i int, v FS_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_list_Results_List) String() string {
	str, _ := text.MarshalList(0xe92935bf20cc2856, s.List)
	return str
}

// FS_list_Results_Promise is a wrapper for a FS_list_Results promised by a client call.
type FS_list_Results_Promise struct{ *capnp.Pipeline }

func (p FS_list_Results_Promise) Struct() (FS_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_list_Results{s}, err
}

type FS_cat_Params struct{ capnp.Struct }

// FS_cat_Params_TypeID is the unique identifier for the type FS_cat_Params.
const FS_cat_Params_TypeID = 0xa9095b4cff1e5634

func NewFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func NewRootFS_cat_Params(s *capnp.Segment) (FS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_cat_Params{st}, err
}

func ReadRootFS_cat_Params(msg *capnp.Message) (FS_cat_Params, error) {
	root, err := msg.RootPtr()
	return FS_cat_Params{root.Struct()}, err
}

func (s FS_cat_Params) String() string {
	str, _ := text.Marshal(0xa9095b4cff1e5634, s.Struct)
	return str
}

func (s FS_cat_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_cat_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_cat_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_cat_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_cat_Params_List is a list of FS_cat_Params.
type FS_cat_Params_List struct{ capnp.List }

// NewFS_cat_Params creates a new list of FS_cat_Params.
func NewFS_cat_Params_List(s *capnp.Segment, sz int32) (FS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_cat_Params_List{l}, err
}

func (s FS_cat_Params_List) At(i int) FS_cat_Params { return FS_cat_Params{s.List.Struct(i)} }

func (s FS_cat_Params_List) Set(i int, v FS_cat_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Params_List) String() string {
	str, _ := text.MarshalList(0xa9095b4cff1e5634, s.List)
	return str
}

// FS_cat_Params_Promise is a wrapper for a FS_cat_Params promised by a client call.
type FS_cat_Params_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Params_Promise) Struct() (FS_cat_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Params{s}, err
}

type FS_cat_Results struct{ capnp.Struct }

// FS_cat_Results_TypeID is the unique identifier for the type FS_cat_Results.
const FS_cat_Results_TypeID = 0x9fe8d2cd92c27a38

func NewFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func NewRootFS_cat_Results(s *capnp.Segment) (FS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_cat_Results{st}, err
}

func ReadRootFS_cat_Results(msg *capnp.Message) (FS_cat_Results, error) {
	root, err := msg.RootPtr()
	return FS_cat_Results{root.Struct()}, err
}

func (s FS_cat_Results) String() string {
	str, _ := text.Marshal(0x9fe8d2cd92c27a38, s.Struct)
	return str
}

func (s FS_cat_Results) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s FS_cat_Results) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// FS_cat_Results_List is a list of FS_cat_Results.
type FS_cat_Results_List struct{ capnp.List }

// NewFS_cat_Results creates a new list of FS_cat_Results.
func NewFS_cat_Results_List(s *capnp.Segment, sz int32) (FS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_cat_Results_List{l}, err
}

func (s FS_cat_Results_List) At(i int) FS_cat_Results { return FS_cat_Results{s.List.Struct(i)} }

func (s FS_cat_Results_List) Set(i int, v FS_cat_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_cat_Results_List) String() string {
	str, _ := text.MarshalList(0x9fe8d2cd92c27a38, s.List)
	return str
}

// FS_cat_Results_Promise is a wrapper for a FS_cat_Results promised by a client call.
type FS_cat_Results_Promise struct{ *capnp.Pipeline }

func (p FS_cat_Results_Promise) Struct() (FS_cat_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_cat_Results{s}, err
}

type FS_mkdir_Params struct{ capnp.Struct }

// FS_mkdir_Params_TypeID is the unique identifier for the type FS_mkdir_Params.
const FS_mkdir_Params_TypeID = 0xb030fc18cb3b0e61

func NewFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func NewRootFS_mkdir_Params(s *capnp.Segment) (FS_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FS_mkdir_Params{st}, err
}

func ReadRootFS_mkdir_Params(msg *capnp.Message) (FS_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Params{root.Struct()}, err
}

func (s FS_mkdir_Params) String() string {
	str, _ := text.Marshal(0xb030fc18cb3b0e61, s.Struct)
	return str
}

func (s FS_mkdir_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_mkdir_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_mkdir_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_mkdir_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_mkdir_Params) CreateParents() bool {
	return s.Struct.Bit(0)
}

func (s FS_mkdir_Params) SetCreateParents(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_mkdir_Params_List is a list of FS_mkdir_Params.
type FS_mkdir_Params_List struct{ capnp.List }

// NewFS_mkdir_Params creates a new list of FS_mkdir_Params.
func NewFS_mkdir_Params_List(s *capnp.Segment, sz int32) (FS_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FS_mkdir_Params_List{l}, err
}

func (s FS_mkdir_Params_List) At(i int) FS_mkdir_Params { return FS_mkdir_Params{s.List.Struct(i)} }

func (s FS_mkdir_Params_List) Set(i int, v FS_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xb030fc18cb3b0e61, s.List)
	return str
}

// FS_mkdir_Params_Promise is a wrapper for a FS_mkdir_Params promised by a client call.
type FS_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Params_Promise) Struct() (FS_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Params{s}, err
}

type FS_mkdir_Results struct{ capnp.Struct }

// FS_mkdir_Results_TypeID is the unique identifier for the type FS_mkdir_Results.
const FS_mkdir_Results_TypeID = 0xf3243256580294f3

func NewFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func NewRootFS_mkdir_Results(s *capnp.Segment) (FS_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_mkdir_Results{st}, err
}

func ReadRootFS_mkdir_Results(msg *capnp.Message) (FS_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return FS_mkdir_Results{root.Struct()}, err
}

func (s FS_mkdir_Results) String() string {
	str, _ := text.Marshal(0xf3243256580294f3, s.Struct)
	return str
}

// FS_mkdir_Results_List is a list of FS_mkdir_Results.
type FS_mkdir_Results_List struct{ capnp.List }

// NewFS_mkdir_Results creates a new list of FS_mkdir_Results.
func NewFS_mkdir_Results_List(s *capnp.Segment, sz int32) (FS_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_mkdir_Results_List{l}, err
}

func (s FS_mkdir_Results_List) At(i int) FS_mkdir_Results { return FS_mkdir_Results{s.List.Struct(i)} }

func (s FS_mkdir_Results_List) Set(i int, v FS_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xf3243256580294f3, s.List)
	return str
}

// FS_mkdir_Results_Promise is a wrapper for a FS_mkdir_Results promised by a client call.
type FS_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p FS_mkdir_Results_Promise) Struct() (FS_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_mkdir_Results{s}, err
}

type FS_remove_Params struct{ capnp.Struct }

// FS_remove_Params_TypeID is the unique identifier for the type FS_remove_Params.
const FS_remove_Params_TypeID = 0xa99c622e110c1203

func NewFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func NewRootFS_remove_Params(s *capnp.Segment) (FS_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_remove_Params{st}, err
}

func ReadRootFS_remove_Params(msg *capnp.Message) (FS_remove_Params, error) {
	root, err := msg.RootPtr()
	return FS_remove_Params{root.Struct()}, err
}

func (s FS_remove_Params) String() string {
	str, _ := text.Marshal(0xa99c622e110c1203, s.Struct)
	return str
}

func (s FS_remove_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_remove_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_remove_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_remove_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_remove_Params_List is a list of FS_remove_Params.
type FS_remove_Params_List struct{ capnp.List }

// NewFS_remove_Params creates a new list of FS_remove_Params.
func NewFS_remove_Params_List(s *capnp.Segment, sz int32) (FS_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_remove_Params_List{l}, err
}

func (s FS_remove_Params_List) At(i int) FS_remove_Params { return FS_remove_Params{s.List.Struct(i)} }

func (s FS_remove_Params_List) Set(i int, v FS_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xa99c622e110c1203, s.List)
	return str
}

// FS_remove_Params_Promise is a wrapper for a FS_remove_Params promised by a client call.
type FS_remove_Params_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Params_Promise) Struct() (FS_remove_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Params{s}, err
}

type FS_remove_Results struct{ capnp.Struct }

// FS_remove_Results_TypeID is the unique identifier for the type FS_remove_Results.
const FS_remove_Results_TypeID = 0xc9b3a8263f6853d7

func NewFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func NewRootFS_remove_Results(s *capnp.Segment) (FS_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_remove_Results{st}, err
}

func ReadRootFS_remove_Results(msg *capnp.Message) (FS_remove_Results, error) {
	root, err := msg.RootPtr()
	return FS_remove_Results{root.Struct()}, err
}

func (s FS_remove_Results) String() string {
	str, _ := text.Marshal(0xc9b3a8263f6853d7, s.Struct)
	return str
}

// FS_remove_Results_List is a list of FS_remove_Results.
type FS_remove_Results_List struct{ capnp.List }

// NewFS_remove_Results creates a new list of FS_remove_Results.
func NewFS_remove_Results_List(s *capnp.Segment, sz int32) (FS_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_remove_Results_List{l}, err
}

func (s FS_remove_Results_List) At(i int) FS_remove_Results {
	return FS_remove_Results{s.List.Struct(i)}
}

func (s FS_remove_Results_List) Set(i int, v FS_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xc9b3a8263f6853d7, s.List)
	return str
}

// FS_remove_Results_Promise is a wrapper for a FS_remove_Results promised by a client call.
type FS_remove_Results_Promise struct{ *capnp.Pipeline }

func (p FS_remove_Results_Promise) Struct() (FS_remove_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_remove_Results{s}, err
}

type FS_move_Params struct{ capnp.Struct }

// FS_move_Params_TypeID is the unique identifier for the type FS_move_Params.
const FS_move_Params_TypeID = 0xb76f3dc1dcf4fdf1

func NewFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func NewRootFS_move_Params(s *capnp.Segment) (FS_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FS_move_Params{st}, err
}

func ReadRootFS_move_Params(msg *capnp.Message) (FS_move_Params, error) {
	root, err := msg.RootPtr()
	return FS_move_Params{root.Struct()}, err
}

func (s FS_move_Params) String() string {
	str, _ := text.Marshal(0xb76f3dc1dcf4fdf1, s.Struct)
	return str
}

func (s FS_move_Params) SrcPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_move_Params) HasSrcPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) SrcPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetSrcPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FS_move_Params) DstPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FS_move_Params) HasDstPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FS_move_Params) DstPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FS_move_Params) SetDstPath(v string) error {
	return s.Struct.SetText(1, v)
}

// FS_move_Params_List is a list of FS_move_Params.
type FS_move_Params_List struct{ capnp.List }

// NewFS_move_Params creates a new list of FS_move_Params.
func NewFS_move_Params_List(s *capnp.Segment, sz int32) (FS_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FS_move_Params_List{l}, err
}

func (s FS_move_Params_List) At(i int) FS_move_Params { return FS_move_Params{s.List.Struct(i)} }

func (s FS_move_Params_List) Set(i int, v FS_move_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_move_Params_List) String() string {
	str, _ := text.MarshalList(0xb76f3dc1dcf4fdf1, s.List)
	return str
}

// FS_move_Params_Promise is a wrapper for a FS_move_Params promised by a client call.
type FS_move_Params_Promise struct{ *capnp.Pipeline }

func (p FS_move_Params_Promise) Struct() (FS_move_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Params{s}, err
}

type FS_move_Results struct{ capnp.Struct }

// FS_move_Results_TypeID is the unique identifier for the type FS_move_Results.
const FS_move_Results_TypeID = 0xab89c6fc9bf26f2a

func NewFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func NewRootFS_move_Results(s *capnp.Segment) (FS_move_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_move_Results{st}, err
}

func ReadRootFS_move_Results(msg *capnp.Message) (FS_move_Results, error) {
	root, err := msg.RootPtr()
	return FS_move_Results{root.Struct()}, err
}

func (s FS_move_Results) String() string {
	str, _ := text.Marshal(0xab89c6fc9bf26f2a, s.Struct)
	return str
}

// FS_move_Results_List is a list of FS_move_Results.
type FS_move_Results_List struct{ capnp.List }

// NewFS_move_Results creates a new list of FS_move_Results.
func NewFS_move_Results_List(s *capnp.Segment, sz int32) (FS_move_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_move_Results_List{l}, err
}

func (s FS_move_Results_List) At(i int) FS_move_Results { return FS_move_Results{s.List.Struct(i)} }

func (s FS_move_Results_List) Set(i int, v FS_move_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_move_Results_List) String() string {
	str, _ := text.MarshalList(0xab89c6fc9bf26f2a, s.List)
	return str
}

// FS_move_Results_Promise is a wrapper for a FS_move_Results promised by a client call.
type FS_move_Results_Promise struct{ *capnp.Pipeline }

func (p FS_move_Results_Promise) Struct() (FS_move_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_move_Results{s}, err
}

type FS_pin_Params struct{ capnp.Struct }

// FS_pin_Params_TypeID is the unique identifier for the type FS_pin_Params.
const FS_pin_Params_TypeID = 0xc0dd66dedad92ef8

func NewFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func NewRootFS_pin_Params(s *capnp.Segment) (FS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_pin_Params{st}, err
}

func ReadRootFS_pin_Params(msg *capnp.Message) (FS_pin_Params, error) {
	root, err := msg.RootPtr()
	return FS_pin_Params{root.Struct()}, err
}

func (s FS_pin_Params) String() string {
	str, _ := text.Marshal(0xc0dd66dedad92ef8, s.Struct)
	return str
}

func (s FS_pin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_pin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_pin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_pin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_pin_Params_List is a list of FS_pin_Params.
type FS_pin_Params_List struct{ capnp.List }

// NewFS_pin_Params creates a new list of FS_pin_Params.
func NewFS_pin_Params_List(s *capnp.Segment, sz int32) (FS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_pin_Params_List{l}, err
}

func (s FS_pin_Params_List) At(i int) FS_pin_Params { return FS_pin_Params{s.List.Struct(i)} }

func (s FS_pin_Params_List) Set(i int, v FS_pin_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Params_List) String() string {
	str, _ := text.MarshalList(0xc0dd66dedad92ef8, s.List)
	return str
}

// FS_pin_Params_Promise is a wrapper for a FS_pin_Params promised by a client call.
type FS_pin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Params_Promise) Struct() (FS_pin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Params{s}, err
}

type FS_pin_Results struct{ capnp.Struct }

// FS_pin_Results_TypeID is the unique identifier for the type FS_pin_Results.
const FS_pin_Results_TypeID = 0xccf4f28c8951edf6

func NewFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func NewRootFS_pin_Results(s *capnp.Segment) (FS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_pin_Results{st}, err
}

func ReadRootFS_pin_Results(msg *capnp.Message) (FS_pin_Results, error) {
	root, err := msg.RootPtr()
	return FS_pin_Results{root.Struct()}, err
}

func (s FS_pin_Results) String() string {
	str, _ := text.Marshal(0xccf4f28c8951edf6, s.Struct)
	return str
}

// FS_pin_Results_List is a list of FS_pin_Results.
type FS_pin_Results_List struct{ capnp.List }

// NewFS_pin_Results creates a new list of FS_pin_Results.
func NewFS_pin_Results_List(s *capnp.Segment, sz int32) (FS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_pin_Results_List{l}, err
}

func (s FS_pin_Results_List) At(i int) FS_pin_Results { return FS_pin_Results{s.List.Struct(i)} }

func (s FS_pin_Results_List) Set(i int, v FS_pin_Results) error { return s.List.SetStruct(i, v.Struct) }

func (s FS_pin_Results_List) String() string {
	str, _ := text.MarshalList(0xccf4f28c8951edf6, s.List)
	return str
}

// FS_pin_Results_Promise is a wrapper for a FS_pin_Results promised by a client call.
type FS_pin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_pin_Results_Promise) Struct() (FS_pin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_pin_Results{s}, err
}

type FS_unpin_Params struct{ capnp.Struct }

// FS_unpin_Params_TypeID is the unique identifier for the type FS_unpin_Params.
const FS_unpin_Params_TypeID = 0x9efc974402f016f6

func NewFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func NewRootFS_unpin_Params(s *capnp.Segment) (FS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_unpin_Params{st}, err
}

func ReadRootFS_unpin_Params(msg *capnp.Message) (FS_unpin_Params, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Params{root.Struct()}, err
}

func (s FS_unpin_Params) String() string {
	str, _ := text.Marshal(0x9efc974402f016f6, s.Struct)
	return str
}

func (s FS_unpin_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_unpin_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_unpin_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_unpin_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_unpin_Params_List is a list of FS_unpin_Params.
type FS_unpin_Params_List struct{ capnp.List }

// NewFS_unpin_Params creates a new list of FS_unpin_Params.
func NewFS_unpin_Params_List(s *capnp.Segment, sz int32) (FS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_unpin_Params_List{l}, err
}

func (s FS_unpin_Params_List) At(i int) FS_unpin_Params { return FS_unpin_Params{s.List.Struct(i)} }

func (s FS_unpin_Params_List) Set(i int, v FS_unpin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Params_List) String() string {
	str, _ := text.MarshalList(0x9efc974402f016f6, s.List)
	return str
}

// FS_unpin_Params_Promise is a wrapper for a FS_unpin_Params promised by a client call.
type FS_unpin_Params_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Params_Promise) Struct() (FS_unpin_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Params{s}, err
}

type FS_unpin_Results struct{ capnp.Struct }

// FS_unpin_Results_TypeID is the unique identifier for the type FS_unpin_Results.
const FS_unpin_Results_TypeID = 0xdba8e30445acc3f4

func NewFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func NewRootFS_unpin_Results(s *capnp.Segment) (FS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FS_unpin_Results{st}, err
}

func ReadRootFS_unpin_Results(msg *capnp.Message) (FS_unpin_Results, error) {
	root, err := msg.RootPtr()
	return FS_unpin_Results{root.Struct()}, err
}

func (s FS_unpin_Results) String() string {
	str, _ := text.Marshal(0xdba8e30445acc3f4, s.Struct)
	return str
}

// FS_unpin_Results_List is a list of FS_unpin_Results.
type FS_unpin_Results_List struct{ capnp.List }

// NewFS_unpin_Results creates a new list of FS_unpin_Results.
func NewFS_unpin_Results_List(s *capnp.Segment, sz int32) (FS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return FS_unpin_Results_List{l}, err
}

func (s FS_unpin_Results_List) At(i int) FS_unpin_Results { return FS_unpin_Results{s.List.Struct(i)} }

func (s FS_unpin_Results_List) Set(i int, v FS_unpin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_unpin_Results_List) String() string {
	str, _ := text.MarshalList(0xdba8e30445acc3f4, s.List)
	return str
}

// FS_unpin_Results_Promise is a wrapper for a FS_unpin_Results promised by a client call.
type FS_unpin_Results_Promise struct{ *capnp.Pipeline }

func (p FS_unpin_Results_Promise) Struct() (FS_unpin_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_unpin_Results{s}, err
}

type FS_isPinned_Params struct{ capnp.Struct }

// FS_isPinned_Params_TypeID is the unique identifier for the type FS_isPinned_Params.
const FS_isPinned_Params_TypeID = 0xc9558eac26b0f15e

func NewFS_isPinned_Params(s *capnp.Segment) (FS_isPinned_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_isPinned_Params{st}, err
}

func NewRootFS_isPinned_Params(s *capnp.Segment) (FS_isPinned_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FS_isPinned_Params{st}, err
}

func ReadRootFS_isPinned_Params(msg *capnp.Message) (FS_isPinned_Params, error) {
	root, err := msg.RootPtr()
	return FS_isPinned_Params{root.Struct()}, err
}

func (s FS_isPinned_Params) String() string {
	str, _ := text.Marshal(0xc9558eac26b0f15e, s.Struct)
	return str
}

func (s FS_isPinned_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FS_isPinned_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FS_isPinned_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FS_isPinned_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// FS_isPinned_Params_List is a list of FS_isPinned_Params.
type FS_isPinned_Params_List struct{ capnp.List }

// NewFS_isPinned_Params creates a new list of FS_isPinned_Params.
func NewFS_isPinned_Params_List(s *capnp.Segment, sz int32) (FS_isPinned_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FS_isPinned_Params_List{l}, err
}

func (s FS_isPinned_Params_List) At(i int) FS_isPinned_Params {
	return FS_isPinned_Params{s.List.Struct(i)}
}

func (s FS_isPinned_Params_List) Set(i int, v FS_isPinned_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_isPinned_Params_List) String() string {
	str, _ := text.MarshalList(0xc9558eac26b0f15e, s.List)
	return str
}

// FS_isPinned_Params_Promise is a wrapper for a FS_isPinned_Params promised by a client call.
type FS_isPinned_Params_Promise struct{ *capnp.Pipeline }

func (p FS_isPinned_Params_Promise) Struct() (FS_isPinned_Params, error) {
	s, err := p.Pipeline.Struct()
	return FS_isPinned_Params{s}, err
}

type FS_isPinned_Results struct{ capnp.Struct }

// FS_isPinned_Results_TypeID is the unique identifier for the type FS_isPinned_Results.
const FS_isPinned_Results_TypeID = 0x87c49e302c6516f8

func NewFS_isPinned_Results(s *capnp.Segment) (FS_isPinned_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_isPinned_Results{st}, err
}

func NewRootFS_isPinned_Results(s *capnp.Segment) (FS_isPinned_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FS_isPinned_Results{st}, err
}

func ReadRootFS_isPinned_Results(msg *capnp.Message) (FS_isPinned_Results, error) {
	root, err := msg.RootPtr()
	return FS_isPinned_Results{root.Struct()}, err
}

func (s FS_isPinned_Results) String() string {
	str, _ := text.Marshal(0x87c49e302c6516f8, s.Struct)
	return str
}

func (s FS_isPinned_Results) IsPinned() bool {
	return s.Struct.Bit(0)
}

func (s FS_isPinned_Results) SetIsPinned(v bool) {
	s.Struct.SetBit(0, v)
}

// FS_isPinned_Results_List is a list of FS_isPinned_Results.
type FS_isPinned_Results_List struct{ capnp.List }

// NewFS_isPinned_Results creates a new list of FS_isPinned_Results.
func NewFS_isPinned_Results_List(s *capnp.Segment, sz int32) (FS_isPinned_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FS_isPinned_Results_List{l}, err
}

func (s FS_isPinned_Results_List) At(i int) FS_isPinned_Results {
	return FS_isPinned_Results{s.List.Struct(i)}
}

func (s FS_isPinned_Results_List) Set(i int, v FS_isPinned_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FS_isPinned_Results_List) String() string {
	str, _ := text.MarshalList(0x87c49e302c6516f8, s.List)
	return str
}

// FS_isPinned_Results_Promise is a wrapper for a FS_isPinned_Results promised by a client call.
type FS_isPinned_Results_Promise struct{ *capnp.Pipeline }

func (p FS_isPinned_Results_Promise) Struct() (FS_isPinned_Results, error) {
	s, err := p.Pipeline.Struct()
	return FS_isPinned_Results{s}, err
}

type VCS struct{ Client capnp.Client }

// VCS_TypeID is the unique identifier for the type VCS.
const VCS_TypeID = 0xfaa680ef12c44624

func (c VCS) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) Checkout(ctx context.Context, params func(VCS_checkout_Params) error, opts ...capnp.CallOption) VCS_checkout_Results_Promise {
	if c.Client == nil {
		return VCS_checkout_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "checkout",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_checkout_Params{Struct: s}) }
	}
	return VCS_checkout_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c VCS) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type VCS_Server interface {
	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	Checkout(VCS_checkout) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error
}

func VCS_ServerToClient(s VCS_Server) VCS {
	c, _ := s.(server.Closer)
	return VCS{Client: server.New(VCS_Methods(nil, s), c)}
}

func VCS_Methods(methods []server.Method, s VCS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "checkout",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_checkout{c, opts, VCS_checkout_Params{Struct: p}, VCS_checkout_Results{Struct: r}}
			return s.Checkout(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// VCS_log holds the arguments for a server call to VCS.log.
type VCS_log struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_log_Params
	Results VCS_log_Results
}

// VCS_commit holds the arguments for a server call to VCS.commit.
type VCS_commit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_commit_Params
	Results VCS_commit_Results
}

// VCS_tag holds the arguments for a server call to VCS.tag.
type VCS_tag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_tag_Params
	Results VCS_tag_Results
}

// VCS_untag holds the arguments for a server call to VCS.untag.
type VCS_untag struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_untag_Params
	Results VCS_untag_Results
}

// VCS_reset holds the arguments for a server call to VCS.reset.
type VCS_reset struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_reset_Params
	Results VCS_reset_Results
}

// VCS_checkout holds the arguments for a server call to VCS.checkout.
type VCS_checkout struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_checkout_Params
	Results VCS_checkout_Results
}

// VCS_history holds the arguments for a server call to VCS.history.
type VCS_history struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_history_Params
	Results VCS_history_Results
}

// VCS_makeDiff holds the arguments for a server call to VCS.makeDiff.
type VCS_makeDiff struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  VCS_makeDiff_Params
	Results VCS_makeDiff_Results
}

type VCS_log_Params struct{ capnp.Struct }

// VCS_log_Params_TypeID is the unique identifier for the type VCS_log_Params.
const VCS_log_Params_TypeID = 0xa4efd353c57d2b85

func NewVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func NewRootVCS_log_Params(s *capnp.Segment) (VCS_log_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_log_Params{st}, err
}

func ReadRootVCS_log_Params(msg *capnp.Message) (VCS_log_Params, error) {
	root, err := msg.RootPtr()
	return VCS_log_Params{root.Struct()}, err
}

func (s VCS_log_Params) String() string {
	str, _ := text.Marshal(0xa4efd353c57d2b85, s.Struct)
	return str
}

// VCS_log_Params_List is a list of VCS_log_Params.
type VCS_log_Params_List struct{ capnp.List }

// NewVCS_log_Params creates a new list of VCS_log_Params.
func NewVCS_log_Params_List(s *capnp.Segment, sz int32) (VCS_log_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_log_Params_List{l}, err
}

func (s VCS_log_Params_List) At(i int) VCS_log_Params { return VCS_log_Params{s.List.Struct(i)} }

func (s VCS_log_Params_List) Set(i int, v VCS_log_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_log_Params_List) String() string {
	str, _ := text.MarshalList(0xa4efd353c57d2b85, s.List)
	return str
}

// VCS_log_Params_Promise is a wrapper for a VCS_log_Params promised by a client call.
type VCS_log_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Params_Promise) Struct() (VCS_log_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Params{s}, err
}

type VCS_log_Results struct{ capnp.Struct }

// VCS_log_Results_TypeID is the unique identifier for the type VCS_log_Results.
const VCS_log_Results_TypeID = 0xf7250939585a23f6

func NewVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func NewRootVCS_log_Results(s *capnp.Segment) (VCS_log_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_log_Results{st}, err
}

func ReadRootVCS_log_Results(msg *capnp.Message) (VCS_log_Results, error) {
	root, err := msg.RootPtr()
	return VCS_log_Results{root.Struct()}, err
}

func (s VCS_log_Results) String() string {
	str, _ := text.Marshal(0xf7250939585a23f6, s.Struct)
	return str
}

func (s VCS_log_Results) Entries() (LogEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return LogEntry_List{List: p.List()}, err
}

func (s VCS_log_Results) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_log_Results) SetEntries(v LogEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated LogEntry_List, preferring placement in s's segment.
func (s VCS_log_Results) NewEntries(n int32) (LogEntry_List, error) {
	l, err := NewLogEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return LogEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_log_Results_List is a list of VCS_log_Results.
type VCS_log_Results_List struct{ capnp.List }

// NewVCS_log_Results creates a new list of VCS_log_Results.
func NewVCS_log_Results_List(s *capnp.Segment, sz int32) (VCS_log_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_log_Results_List{l}, err
}

func (s VCS_log_Results_List) At(i int) VCS_log_Results { return VCS_log_Results{s.List.Struct(i)} }

func (s VCS_log_Results_List) Set(i int, v VCS_log_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_log_Results_List) String() string {
	str, _ := text.MarshalList(0xf7250939585a23f6, s.List)
	return str
}

// VCS_log_Results_Promise is a wrapper for a VCS_log_Results promised by a client call.
type VCS_log_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_log_Results_Promise) Struct() (VCS_log_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_log_Results{s}, err
}

type VCS_commit_Params struct{ capnp.Struct }

// VCS_commit_Params_TypeID is the unique identifier for the type VCS_commit_Params.
const VCS_commit_Params_TypeID = 0xd9459f2361338d96

func NewVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func NewRootVCS_commit_Params(s *capnp.Segment) (VCS_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_commit_Params{st}, err
}

func ReadRootVCS_commit_Params(msg *capnp.Message) (VCS_commit_Params, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Params{root.Struct()}, err
}

func (s VCS_commit_Params) String() string {
	str, _ := text.Marshal(0xd9459f2361338d96, s.Struct)
	return str
}

func (s VCS_commit_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_commit_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_commit_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_commit_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_commit_Params_List is a list of VCS_commit_Params.
type VCS_commit_Params_List struct{ capnp.List }

// NewVCS_commit_Params creates a new list of VCS_commit_Params.
func NewVCS_commit_Params_List(s *capnp.Segment, sz int32) (VCS_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_commit_Params_List{l}, err
}

func (s VCS_commit_Params_List) At(i int) VCS_commit_Params {
	return VCS_commit_Params{s.List.Struct(i)}
}

func (s VCS_commit_Params_List) Set(i int, v VCS_commit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Params_List) String() string {
	str, _ := text.MarshalList(0xd9459f2361338d96, s.List)
	return str
}

// VCS_commit_Params_Promise is a wrapper for a VCS_commit_Params promised by a client call.
type VCS_commit_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Params_Promise) Struct() (VCS_commit_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Params{s}, err
}

type VCS_commit_Results struct{ capnp.Struct }

// VCS_commit_Results_TypeID is the unique identifier for the type VCS_commit_Results.
const VCS_commit_Results_TypeID = 0xb7d0dd6b467e7539

func NewVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func NewRootVCS_commit_Results(s *capnp.Segment) (VCS_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_commit_Results{st}, err
}

func ReadRootVCS_commit_Results(msg *capnp.Message) (VCS_commit_Results, error) {
	root, err := msg.RootPtr()
	return VCS_commit_Results{root.Struct()}, err
}

func (s VCS_commit_Results) String() string {
	str, _ := text.Marshal(0xb7d0dd6b467e7539, s.Struct)
	return str
}

// VCS_commit_Results_List is a list of VCS_commit_Results.
type VCS_commit_Results_List struct{ capnp.List }

// NewVCS_commit_Results creates a new list of VCS_commit_Results.
func NewVCS_commit_Results_List(s *capnp.Segment, sz int32) (VCS_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_commit_Results_List{l}, err
}

func (s VCS_commit_Results_List) At(i int) VCS_commit_Results {
	return VCS_commit_Results{s.List.Struct(i)}
}

func (s VCS_commit_Results_List) Set(i int, v VCS_commit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_commit_Results_List) String() string {
	str, _ := text.MarshalList(0xb7d0dd6b467e7539, s.List)
	return str
}

// VCS_commit_Results_Promise is a wrapper for a VCS_commit_Results promised by a client call.
type VCS_commit_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_commit_Results_Promise) Struct() (VCS_commit_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_commit_Results{s}, err
}

type VCS_tag_Params struct{ capnp.Struct }

// VCS_tag_Params_TypeID is the unique identifier for the type VCS_tag_Params.
const VCS_tag_Params_TypeID = 0xa97d67096ee7d46d

func NewVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func NewRootVCS_tag_Params(s *capnp.Segment) (VCS_tag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_tag_Params{st}, err
}

func ReadRootVCS_tag_Params(msg *capnp.Message) (VCS_tag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Params{root.Struct()}, err
}

func (s VCS_tag_Params) String() string {
	str, _ := text.Marshal(0xa97d67096ee7d46d, s.Struct)
	return str
}

func (s VCS_tag_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_tag_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_tag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_tag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_tag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_tag_Params) SetTagName(v string) error {
	return s.Struct.SetText(1, v)
}

// VCS_tag_Params_List is a list of VCS_tag_Params.
type VCS_tag_Params_List struct{ capnp.List }

// NewVCS_tag_Params creates a new list of VCS_tag_Params.
func NewVCS_tag_Params_List(s *capnp.Segment, sz int32) (VCS_tag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VCS_tag_Params_List{l}, err
}

func (s VCS_tag_Params_List) At(i int) VCS_tag_Params { return VCS_tag_Params{s.List.Struct(i)} }

func (s VCS_tag_Params_List) Set(i int, v VCS_tag_Params) error { return s.List.SetStruct(i, v.Struct) }

func (s VCS_tag_Params_List) String() string {
	str, _ := text.MarshalList(0xa97d67096ee7d46d, s.List)
	return str
}

// VCS_tag_Params_Promise is a wrapper for a VCS_tag_Params promised by a client call.
type VCS_tag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Params_Promise) Struct() (VCS_tag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Params{s}, err
}

type VCS_tag_Results struct{ capnp.Struct }

// VCS_tag_Results_TypeID is the unique identifier for the type VCS_tag_Results.
const VCS_tag_Results_TypeID = 0xbda949777c149f4b

func NewVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func NewRootVCS_tag_Results(s *capnp.Segment) (VCS_tag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_tag_Results{st}, err
}

func ReadRootVCS_tag_Results(msg *capnp.Message) (VCS_tag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_tag_Results{root.Struct()}, err
}

func (s VCS_tag_Results) String() string {
	str, _ := text.Marshal(0xbda949777c149f4b, s.Struct)
	return str
}

// VCS_tag_Results_List is a list of VCS_tag_Results.
type VCS_tag_Results_List struct{ capnp.List }

// NewVCS_tag_Results creates a new list of VCS_tag_Results.
func NewVCS_tag_Results_List(s *capnp.Segment, sz int32) (VCS_tag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_tag_Results_List{l}, err
}

func (s VCS_tag_Results_List) At(i int) VCS_tag_Results { return VCS_tag_Results{s.List.Struct(i)} }

func (s VCS_tag_Results_List) Set(i int, v VCS_tag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_tag_Results_List) String() string {
	str, _ := text.MarshalList(0xbda949777c149f4b, s.List)
	return str
}

// VCS_tag_Results_Promise is a wrapper for a VCS_tag_Results promised by a client call.
type VCS_tag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_tag_Results_Promise) Struct() (VCS_tag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_tag_Results{s}, err
}

type VCS_untag_Params struct{ capnp.Struct }

// VCS_untag_Params_TypeID is the unique identifier for the type VCS_untag_Params.
const VCS_untag_Params_TypeID = 0xf4d42db113af3a4b

func NewVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func NewRootVCS_untag_Params(s *capnp.Segment) (VCS_untag_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_untag_Params{st}, err
}

func ReadRootVCS_untag_Params(msg *capnp.Message) (VCS_untag_Params, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Params{root.Struct()}, err
}

func (s VCS_untag_Params) String() string {
	str, _ := text.Marshal(0xf4d42db113af3a4b, s.Struct)
	return str
}

func (s VCS_untag_Params) TagName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_untag_Params) HasTagName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_untag_Params) TagNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_untag_Params) SetTagName(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_untag_Params_List is a list of VCS_untag_Params.
type VCS_untag_Params_List struct{ capnp.List }

// NewVCS_untag_Params creates a new list of VCS_untag_Params.
func NewVCS_untag_Params_List(s *capnp.Segment, sz int32) (VCS_untag_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_untag_Params_List{l}, err
}

func (s VCS_untag_Params_List) At(i int) VCS_untag_Params { return VCS_untag_Params{s.List.Struct(i)} }

func (s VCS_untag_Params_List) Set(i int, v VCS_untag_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Params_List) String() string {
	str, _ := text.MarshalList(0xf4d42db113af3a4b, s.List)
	return str
}

// VCS_untag_Params_Promise is a wrapper for a VCS_untag_Params promised by a client call.
type VCS_untag_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Params_Promise) Struct() (VCS_untag_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Params{s}, err
}

type VCS_untag_Results struct{ capnp.Struct }

// VCS_untag_Results_TypeID is the unique identifier for the type VCS_untag_Results.
const VCS_untag_Results_TypeID = 0xba0de490234c27af

func NewVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func NewRootVCS_untag_Results(s *capnp.Segment) (VCS_untag_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_untag_Results{st}, err
}

func ReadRootVCS_untag_Results(msg *capnp.Message) (VCS_untag_Results, error) {
	root, err := msg.RootPtr()
	return VCS_untag_Results{root.Struct()}, err
}

func (s VCS_untag_Results) String() string {
	str, _ := text.Marshal(0xba0de490234c27af, s.Struct)
	return str
}

// VCS_untag_Results_List is a list of VCS_untag_Results.
type VCS_untag_Results_List struct{ capnp.List }

// NewVCS_untag_Results creates a new list of VCS_untag_Results.
func NewVCS_untag_Results_List(s *capnp.Segment, sz int32) (VCS_untag_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_untag_Results_List{l}, err
}

func (s VCS_untag_Results_List) At(i int) VCS_untag_Results {
	return VCS_untag_Results{s.List.Struct(i)}
}

func (s VCS_untag_Results_List) Set(i int, v VCS_untag_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_untag_Results_List) String() string {
	str, _ := text.MarshalList(0xba0de490234c27af, s.List)
	return str
}

// VCS_untag_Results_Promise is a wrapper for a VCS_untag_Results promised by a client call.
type VCS_untag_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_untag_Results_Promise) Struct() (VCS_untag_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_untag_Results{s}, err
}

type VCS_reset_Params struct{ capnp.Struct }

// VCS_reset_Params_TypeID is the unique identifier for the type VCS_reset_Params.
const VCS_reset_Params_TypeID = 0xe71560d8bc06c6fd

func NewVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func NewRootVCS_reset_Params(s *capnp.Segment) (VCS_reset_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VCS_reset_Params{st}, err
}

func ReadRootVCS_reset_Params(msg *capnp.Message) (VCS_reset_Params, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Params{root.Struct()}, err
}

func (s VCS_reset_Params) String() string {
	str, _ := text.Marshal(0xe71560d8bc06c6fd, s.Struct)
	return str
}

func (s VCS_reset_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_reset_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_reset_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_reset_Params) HasRev() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_reset_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_reset_Params) SetRev(v string) error {
	return s.Struct.SetText(1, v)
}

// VCS_reset_Params_List is a list of VCS_reset_Params.
type VCS_reset_Params_List struct{ capnp.List }

// NewVCS_reset_Params creates a new list of VCS_reset_Params.
func NewVCS_reset_Params_List(s *capnp.Segment, sz int32) (VCS_reset_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VCS_reset_Params_List{l}, err
}

func (s VCS_reset_Params_List) At(i int) VCS_reset_Params { return VCS_reset_Params{s.List.Struct(i)} }

func (s VCS_reset_Params_List) Set(i int, v VCS_reset_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Params_List) String() string {
	str, _ := text.MarshalList(0xe71560d8bc06c6fd, s.List)
	return str
}

// VCS_reset_Params_Promise is a wrapper for a VCS_reset_Params promised by a client call.
type VCS_reset_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Params_Promise) Struct() (VCS_reset_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Params{s}, err
}

type VCS_reset_Results struct{ capnp.Struct }

// VCS_reset_Results_TypeID is the unique identifier for the type VCS_reset_Results.
const VCS_reset_Results_TypeID = 0xf9b772853fd93ea9

func NewVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func NewRootVCS_reset_Results(s *capnp.Segment) (VCS_reset_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_reset_Results{st}, err
}

func ReadRootVCS_reset_Results(msg *capnp.Message) (VCS_reset_Results, error) {
	root, err := msg.RootPtr()
	return VCS_reset_Results{root.Struct()}, err
}

func (s VCS_reset_Results) String() string {
	str, _ := text.Marshal(0xf9b772853fd93ea9, s.Struct)
	return str
}

// VCS_reset_Results_List is a list of VCS_reset_Results.
type VCS_reset_Results_List struct{ capnp.List }

// NewVCS_reset_Results creates a new list of VCS_reset_Results.
func NewVCS_reset_Results_List(s *capnp.Segment, sz int32) (VCS_reset_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_reset_Results_List{l}, err
}

func (s VCS_reset_Results_List) At(i int) VCS_reset_Results {
	return VCS_reset_Results{s.List.Struct(i)}
}

func (s VCS_reset_Results_List) Set(i int, v VCS_reset_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_reset_Results_List) String() string {
	str, _ := text.MarshalList(0xf9b772853fd93ea9, s.List)
	return str
}

// VCS_reset_Results_Promise is a wrapper for a VCS_reset_Results promised by a client call.
type VCS_reset_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_reset_Results_Promise) Struct() (VCS_reset_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_reset_Results{s}, err
}

type VCS_checkout_Params struct{ capnp.Struct }

// VCS_checkout_Params_TypeID is the unique identifier for the type VCS_checkout_Params.
const VCS_checkout_Params_TypeID = 0xe154e487144bf3c2

func NewVCS_checkout_Params(s *capnp.Segment) (VCS_checkout_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_checkout_Params{st}, err
}

func NewRootVCS_checkout_Params(s *capnp.Segment) (VCS_checkout_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VCS_checkout_Params{st}, err
}

func ReadRootVCS_checkout_Params(msg *capnp.Message) (VCS_checkout_Params, error) {
	root, err := msg.RootPtr()
	return VCS_checkout_Params{root.Struct()}, err
}

func (s VCS_checkout_Params) String() string {
	str, _ := text.Marshal(0xe154e487144bf3c2, s.Struct)
	return str
}

func (s VCS_checkout_Params) Rev() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_checkout_Params) HasRev() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_checkout_Params) RevBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_checkout_Params) SetRev(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_checkout_Params) Force() bool {
	return s.Struct.Bit(0)
}

func (s VCS_checkout_Params) SetForce(v bool) {
	s.Struct.SetBit(0, v)
}

// VCS_checkout_Params_List is a list of VCS_checkout_Params.
type VCS_checkout_Params_List struct{ capnp.List }

// NewVCS_checkout_Params creates a new list of VCS_checkout_Params.
func NewVCS_checkout_Params_List(s *capnp.Segment, sz int32) (VCS_checkout_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VCS_checkout_Params_List{l}, err
}

func (s VCS_checkout_Params_List) At(i int) VCS_checkout_Params {
	return VCS_checkout_Params{s.List.Struct(i)}
}

func (s VCS_checkout_Params_List) Set(i int, v VCS_checkout_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_checkout_Params_List) String() string {
	str, _ := text.MarshalList(0xe154e487144bf3c2, s.List)
	return str
}

// VCS_checkout_Params_Promise is a wrapper for a VCS_checkout_Params promised by a client call.
type VCS_checkout_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_checkout_Params_Promise) Struct() (VCS_checkout_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_checkout_Params{s}, err
}

type VCS_checkout_Results struct{ capnp.Struct }

// VCS_checkout_Results_TypeID is the unique identifier for the type VCS_checkout_Results.
const VCS_checkout_Results_TypeID = 0xe0f49db8c42c72b2

func NewVCS_checkout_Results(s *capnp.Segment) (VCS_checkout_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_checkout_Results{st}, err
}

func NewRootVCS_checkout_Results(s *capnp.Segment) (VCS_checkout_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VCS_checkout_Results{st}, err
}

func ReadRootVCS_checkout_Results(msg *capnp.Message) (VCS_checkout_Results, error) {
	root, err := msg.RootPtr()
	return VCS_checkout_Results{root.Struct()}, err
}

func (s VCS_checkout_Results) String() string {
	str, _ := text.Marshal(0xe0f49db8c42c72b2, s.Struct)
	return str
}

// VCS_checkout_Results_List is a list of VCS_checkout_Results.
type VCS_checkout_Results_List struct{ capnp.List }

// NewVCS_checkout_Results creates a new list of VCS_checkout_Results.
func NewVCS_checkout_Results_List(s *capnp.Segment, sz int32) (VCS_checkout_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VCS_checkout_Results_List{l}, err
}

func (s VCS_checkout_Results_List) At(i int) VCS_checkout_Results {
	return VCS_checkout_Results{s.List.Struct(i)}
}

func (s VCS_checkout_Results_List) Set(i int, v VCS_checkout_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_checkout_Results_List) String() string {
	str, _ := text.MarshalList(0xe0f49db8c42c72b2, s.List)
	return str
}

// VCS_checkout_Results_Promise is a wrapper for a VCS_checkout_Results promised by a client call.
type VCS_checkout_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_checkout_Results_Promise) Struct() (VCS_checkout_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_checkout_Results{s}, err
}

type VCS_history_Params struct{ capnp.Struct }

// VCS_history_Params_TypeID is the unique identifier for the type VCS_history_Params.
const VCS_history_Params_TypeID = 0xe2f81b4403ef433b

func NewVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func NewRootVCS_history_Params(s *capnp.Segment) (VCS_history_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Params{st}, err
}

func ReadRootVCS_history_Params(msg *capnp.Message) (VCS_history_Params, error) {
	root, err := msg.RootPtr()
	return VCS_history_Params{root.Struct()}, err
}

func (s VCS_history_Params) String() string {
	str, _ := text.Marshal(0xe2f81b4403ef433b, s.Struct)
	return str
}

func (s VCS_history_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_history_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_history_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// VCS_history_Params_List is a list of VCS_history_Params.
type VCS_history_Params_List struct{ capnp.List }

// NewVCS_history_Params creates a new list of VCS_history_Params.
func NewVCS_history_Params_List(s *capnp.Segment, sz int32) (VCS_history_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Params_List{l}, err
}

func (s VCS_history_Params_List) At(i int) VCS_history_Params {
	return VCS_history_Params{s.List.Struct(i)}
}

func (s VCS_history_Params_List) Set(i int, v VCS_history_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Params_List) String() string {
	str, _ := text.MarshalList(0xe2f81b4403ef433b, s.List)
	return str
}

// VCS_history_Params_Promise is a wrapper for a VCS_history_Params promised by a client call.
type VCS_history_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Params_Promise) Struct() (VCS_history_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Params{s}, err
}

type VCS_history_Results struct{ capnp.Struct }

// VCS_history_Results_TypeID is the unique identifier for the type VCS_history_Results.
const VCS_history_Results_TypeID = 0xd7ef486de484610d

func NewVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func NewRootVCS_history_Results(s *capnp.Segment) (VCS_history_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_history_Results{st}, err
}

func ReadRootVCS_history_Results(msg *capnp.Message) (VCS_history_Results, error) {
	root, err := msg.RootPtr()
	return VCS_history_Results{root.Struct()}, err
}

func (s VCS_history_Results) String() string {
	str, _ := text.Marshal(0xd7ef486de484610d, s.Struct)
	return str
}

func (s VCS_history_Results) History() (HistoryEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return HistoryEntry_List{List: p.List()}, err
}

func (s VCS_history_Results) HasHistory() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_history_Results) SetHistory(v HistoryEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHistory sets the history field to a newly
// allocated HistoryEntry_List, preferring placement in s's segment.
func (s VCS_history_Results) NewHistory(n int32) (HistoryEntry_List, error) {
	l, err := NewHistoryEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return HistoryEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// VCS_history_Results_List is a list of VCS_history_Results.
type VCS_history_Results_List struct{ capnp.List }

// NewVCS_history_Results creates a new list of VCS_history_Results.
func NewVCS_history_Results_List(s *capnp.Segment, sz int32) (VCS_history_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_history_Results_List{l}, err
}

func (s VCS_history_Results_List) At(i int) VCS_history_Results {
	return VCS_history_Results{s.List.Struct(i)}
}

func (s VCS_history_Results_List) Set(i int, v VCS_history_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_history_Results_List) String() string {
	str, _ := text.MarshalList(0xd7ef486de484610d, s.List)
	return str
}

// VCS_history_Results_Promise is a wrapper for a VCS_history_Results promised by a client call.
type VCS_history_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_history_Results_Promise) Struct() (VCS_history_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_history_Results{s}, err
}

type VCS_makeDiff_Params struct{ capnp.Struct }

// VCS_makeDiff_Params_TypeID is the unique identifier for the type VCS_makeDiff_Params.
const VCS_makeDiff_Params_TypeID = 0xb05bd83a34de71b7

func NewVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return VCS_makeDiff_Params{st}, err
}

func NewRootVCS_makeDiff_Params(s *capnp.Segment) (VCS_makeDiff_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return VCS_makeDiff_Params{st}, err
}

func ReadRootVCS_makeDiff_Params(msg *capnp.Message) (VCS_makeDiff_Params, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Params{root.Struct()}, err
}

func (s VCS_makeDiff_Params) String() string {
	str, _ := text.Marshal(0xb05bd83a34de71b7, s.Struct)
	return str
}

func (s VCS_makeDiff_Params) RemoteOwner() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasRemoteOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) RemoteOwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetRemoteOwner(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VCS_makeDiff_Params) HeadRevOwn() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasHeadRevOwn() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) HeadRevOwnBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetHeadRevOwn(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VCS_makeDiff_Params) HeadRevRemote() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s VCS_makeDiff_Params) HasHeadRevRemote() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Params) HeadRevRemoteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s VCS_makeDiff_Params) SetHeadRevRemote(v string) error {
	return s.Struct.SetText(2, v)
}

// VCS_makeDiff_Params_List is a list of VCS_makeDiff_Params.
type VCS_makeDiff_Params_List struct{ capnp.List }

// NewVCS_makeDiff_Params creates a new list of VCS_makeDiff_Params.
func NewVCS_makeDiff_Params_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return VCS_makeDiff_Params_List{l}, err
}

func (s VCS_makeDiff_Params_List) At(i int) VCS_makeDiff_Params {
	return VCS_makeDiff_Params{s.List.Struct(i)}
}

func (s VCS_makeDiff_Params_List) Set(i int, v VCS_makeDiff_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Params_List) String() string {
	str, _ := text.MarshalList(0xb05bd83a34de71b7, s.List)
	return str
}

// VCS_makeDiff_Params_Promise is a wrapper for a VCS_makeDiff_Params promised by a client call.
type VCS_makeDiff_Params_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Params_Promise) Struct() (VCS_makeDiff_Params, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Params{s}, err
}

type VCS_makeDiff_Results struct{ capnp.Struct }

// VCS_makeDiff_Results_TypeID is the unique identifier for the type VCS_makeDiff_Results.
const VCS_makeDiff_Results_TypeID = 0xfa04b4272d0ffcd9

func NewVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func NewRootVCS_makeDiff_Results(s *capnp.Segment) (VCS_makeDiff_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VCS_makeDiff_Results{st}, err
}

func ReadRootVCS_makeDiff_Results(msg *capnp.Message) (VCS_makeDiff_Results, error) {
	root, err := msg.RootPtr()
	return VCS_makeDiff_Results{root.Struct()}, err
}

func (s VCS_makeDiff_Results) String() string {
	str, _ := text.Marshal(0xfa04b4272d0ffcd9, s.Struct)
	return str
}

func (s VCS_makeDiff_Results) Diff() (Diff, error) {
	p, err := s.Struct.Ptr(0)
	return Diff{Struct: p.Struct()}, err
}

func (s VCS_makeDiff_Results) HasDiff() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VCS_makeDiff_Results) SetDiff(v Diff) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated Diff struct, preferring placement in s's segment.
func (s VCS_makeDiff_Results) NewDiff() (Diff, error) {
	ss, err := NewDiff(s.Struct.Segment())
	if err != nil {
		return Diff{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VCS_makeDiff_Results_List is a list of VCS_makeDiff_Results.
type VCS_makeDiff_Results_List struct{ capnp.List }

// NewVCS_makeDiff_Results creates a new list of VCS_makeDiff_Results.
func NewVCS_makeDiff_Results_List(s *capnp.Segment, sz int32) (VCS_makeDiff_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VCS_makeDiff_Results_List{l}, err
}

func (s VCS_makeDiff_Results_List) At(i int) VCS_makeDiff_Results {
	return VCS_makeDiff_Results{s.List.Struct(i)}
}

func (s VCS_makeDiff_Results_List) Set(i int, v VCS_makeDiff_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VCS_makeDiff_Results_List) String() string {
	str, _ := text.MarshalList(0xfa04b4272d0ffcd9, s.List)
	return str
}

// VCS_makeDiff_Results_Promise is a wrapper for a VCS_makeDiff_Results promised by a client call.
type VCS_makeDiff_Results_Promise struct{ *capnp.Pipeline }

func (p VCS_makeDiff_Results_Promise) Struct() (VCS_makeDiff_Results, error) {
	s, err := p.Pipeline.Struct()
	return VCS_makeDiff_Results{s}, err
}

func (p VCS_makeDiff_Results_Promise) Diff() Diff_Promise {
	return Diff_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0x83e6cb306e77e311

func (c Meta) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigGet(ctx context.Context, params func(Meta_configGet_Params) error, opts ...capnp.CallOption) Meta_configGet_Results_Promise {
	if c.Client == nil {
		return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configGet_Params{Struct: s}) }
	}
	return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigSet(ctx context.Context, params func(Meta_configSet_Params) error, opts ...capnp.CallOption) Meta_configSet_Results_Promise {
	if c.Client == nil {
		return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configSet_Params{Struct: s}) }
	}
	return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Meta) ConfigAll(ctx context.Context, params func(Meta_configAll_Params) error, opts ...capnp.CallOption) Meta_configAll_Results_Promise {
	if c.Client == nil {
		return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configAll_Params{Struct: s}) }
	}
	return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error

	ConfigGet(Meta_configGet) error

	ConfigSet(Meta_configSet) error

	ConfigAll(Meta_configAll) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configGet{c, opts, Meta_configGet_Params{Struct: p}, Meta_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configSet{c, opts, Meta_configSet_Params{Struct: p}, Meta_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configAll{c, opts, Meta_configAll_Params{Struct: p}, Meta_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Meta_quit holds the arguments for a server call to Meta.quit.
type Meta_quit struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_quit_Params
	Results Meta_quit_Results
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

// Meta_init holds the arguments for a server call to Meta.init.
type Meta_init struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_init_Params
	Results Meta_init_Results
}

// Meta_configGet holds the arguments for a server call to Meta.configGet.
type Meta_configGet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configGet_Params
	Results Meta_configGet_Results
}

// Meta_configSet holds the arguments for a server call to Meta.configSet.
type Meta_configSet struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configSet_Params
	Results Meta_configSet_Results
}

// Meta_configAll holds the arguments for a server call to Meta.configAll.
type Meta_configAll struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_configAll_Params
	Results Meta_configAll_Results
}

type Meta_quit_Params struct{ capnp.Struct }

// Meta_quit_Params_TypeID is the unique identifier for the type Meta_quit_Params.
const Meta_quit_Params_TypeID = 0xdf3a2e83d0d533b3

func NewMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func NewRootMeta_quit_Params(s *capnp.Segment) (Meta_quit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Params{st}, err
}

func ReadRootMeta_quit_Params(msg *capnp.Message) (Meta_quit_Params, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Params{root.Struct()}, err
}

func (s Meta_quit_Params) String() string {
	str, _ := text.Marshal(0xdf3a2e83d0d533b3, s.Struct)
	return str
}

// Meta_quit_Params_List is a list of Meta_quit_Params.
type Meta_quit_Params_List struct{ capnp.List }

// NewMeta_quit_Params creates a new list of Meta_quit_Params.
func NewMeta_quit_Params_List(s *capnp.Segment, sz int32) (Meta_quit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Params_List{l}, err
}

func (s Meta_quit_Params_List) At(i int) Meta_quit_Params { return Meta_quit_Params{s.List.Struct(i)} }

func (s Meta_quit_Params_List) Set(i int, v Meta_quit_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Params_List) String() string {
	str, _ := text.MarshalList(0xdf3a2e83d0d533b3, s.List)
	return str
}

// Meta_quit_Params_Promise is a wrapper for a Meta_quit_Params promised by a client call.
type Meta_quit_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Params_Promise) Struct() (Meta_quit_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Params{s}, err
}

type Meta_quit_Results struct{ capnp.Struct }

// Meta_quit_Results_TypeID is the unique identifier for the type Meta_quit_Results.
const Meta_quit_Results_TypeID = 0xe1dd2f0c85965fd6

func NewMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func NewRootMeta_quit_Results(s *capnp.Segment) (Meta_quit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_quit_Results{st}, err
}

func ReadRootMeta_quit_Results(msg *capnp.Message) (Meta_quit_Results, error) {
	root, err := msg.RootPtr()
	return Meta_quit_Results{root.Struct()}, err
}

func (s Meta_quit_Results) String() string {
	str, _ := text.Marshal(0xe1dd2f0c85965fd6, s.Struct)
	return str
}

// Meta_quit_Results_List is a list of Meta_quit_Results.
type Meta_quit_Results_List struct{ capnp.List }

// NewMeta_quit_Results creates a new list of Meta_quit_Results.
func NewMeta_quit_Results_List(s *capnp.Segment, sz int32) (Meta_quit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_quit_Results_List{l}, err
}

func (s Meta_quit_Results_List) At(i int) Meta_quit_Results {
	return Meta_quit_Results{s.List.Struct(i)}
}

func (s Meta_quit_Results_List) Set(i int, v Meta_quit_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_quit_Results_List) String() string {
	str, _ := text.MarshalList(0xe1dd2f0c85965fd6, s.List)
	return str
}

// Meta_quit_Results_Promise is a wrapper for a Meta_quit_Results promised by a client call.
type Meta_quit_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_quit_Results_Promise) Struct() (Meta_quit_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_quit_Results{s}, err
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xc9ac448a01179aec

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xc9ac448a01179aec, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xc9ac448a01179aec, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0xffd34f15ec608676

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0xffd34f15ec608676, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xffd34f15ec608676, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type Meta_init_Params struct{ capnp.Struct }

// Meta_init_Params_TypeID is the unique identifier for the type Meta_init_Params.
const Meta_init_Params_TypeID = 0xed03ac5ef50453fb

func NewMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Meta_init_Params{st}, err
}

func NewRootMeta_init_Params(s *capnp.Segment) (Meta_init_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Meta_init_Params{st}, err
}

func ReadRootMeta_init_Params(msg *capnp.Message) (Meta_init_Params, error) {
	root, err := msg.RootPtr()
	return Meta_init_Params{root.Struct()}, err
}

func (s Meta_init_Params) String() string {
	str, _ := text.Marshal(0xed03ac5ef50453fb, s.Struct)
	return str
}

func (s Meta_init_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_init_Params) HasBasePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_init_Params) Owner() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_init_Params) HasOwner() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) OwnerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetOwner(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Meta_init_Params) Backend() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Meta_init_Params) HasBackend() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) BackendBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetBackend(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Meta_init_Params) Password() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Meta_init_Params) HasPassword() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Meta_init_Params) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Meta_init_Params) SetPassword(v string) error {
	return s.Struct.SetText(3, v)
}

// Meta_init_Params_List is a list of Meta_init_Params.
type Meta_init_Params_List struct{ capnp.List }

// NewMeta_init_Params creates a new list of Meta_init_Params.
func NewMeta_init_Params_List(s *capnp.Segment, sz int32) (Meta_init_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Meta_init_Params_List{l}, err
}

func (s Meta_init_Params_List) At(i int) Meta_init_Params { return Meta_init_Params{s.List.Struct(i)} }

func (s Meta_init_Params_List) Set(i int, v Meta_init_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Params_List) String() string {
	str, _ := text.MarshalList(0xed03ac5ef50453fb, s.List)
	return str
}

// Meta_init_Params_Promise is a wrapper for a Meta_init_Params promised by a client call.
type Meta_init_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Params_Promise) Struct() (Meta_init_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Params{s}, err
}

type Meta_init_Results struct{ capnp.Struct }

// Meta_init_Results_TypeID is the unique identifier for the type Meta_init_Results.
const Meta_init_Results_TypeID = 0xe826e800c318a7c4

func NewMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func NewRootMeta_init_Results(s *capnp.Segment) (Meta_init_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_init_Results{st}, err
}

func ReadRootMeta_init_Results(msg *capnp.Message) (Meta_init_Results, error) {
	root, err := msg.RootPtr()
	return Meta_init_Results{root.Struct()}, err
}

func (s Meta_init_Results) String() string {
	str, _ := text.Marshal(0xe826e800c318a7c4, s.Struct)
	return str
}

// Meta_init_Results_List is a list of Meta_init_Results.
type Meta_init_Results_List struct{ capnp.List }

// NewMeta_init_Results creates a new list of Meta_init_Results.
func NewMeta_init_Results_List(s *capnp.Segment, sz int32) (Meta_init_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_init_Results_List{l}, err
}

func (s Meta_init_Results_List) At(i int) Meta_init_Results {
	return Meta_init_Results{s.List.Struct(i)}
}

func (s Meta_init_Results_List) Set(i int, v Meta_init_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_init_Results_List) String() string {
	str, _ := text.MarshalList(0xe826e800c318a7c4, s.List)
	return str
}

// Meta_init_Results_Promise is a wrapper for a Meta_init_Results promised by a client call.
type Meta_init_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_init_Results_Promise) Struct() (Meta_init_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_init_Results{s}, err
}

type Meta_configGet_Params struct{ capnp.Struct }

// Meta_configGet_Params_TypeID is the unique identifier for the type Meta_configGet_Params.
const Meta_configGet_Params_TypeID = 0x9f647c7028225a97

func NewMeta_configGet_Params(s *capnp.Segment) (Meta_configGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Params{st}, err
}

func NewRootMeta_configGet_Params(s *capnp.Segment) (Meta_configGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Params{st}, err
}

func ReadRootMeta_configGet_Params(msg *capnp.Message) (Meta_configGet_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configGet_Params{root.Struct()}, err
}

func (s Meta_configGet_Params) String() string {
	str, _ := text.Marshal(0x9f647c7028225a97, s.Struct)
	return str
}

func (s Meta_configGet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configGet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configGet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configGet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_configGet_Params_List is a list of Meta_configGet_Params.
type Meta_configGet_Params_List struct{ capnp.List }

// NewMeta_configGet_Params creates a new list of Meta_configGet_Params.
func NewMeta_configGet_Params_List(s *capnp.Segment, sz int32) (Meta_configGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configGet_Params_List{l}, err
}

func (s Meta_configGet_Params_List) At(i int) Meta_configGet_Params {
	return Meta_configGet_Params{s.List.Struct(i)}
}

func (s Meta_configGet_Params_List) Set(i int, v Meta_configGet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configGet_Params_List) String() string {
	str, _ := text.MarshalList(0x9f647c7028225a97, s.List)
	return str
}

// Meta_configGet_Params_Promise is a wrapper for a Meta_configGet_Params promised by a client call.
type Meta_configGet_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configGet_Params_Promise) Struct() (Meta_configGet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configGet_Params{s}, err
}

type Meta_configGet_Results struct{ capnp.Struct }

// Meta_configGet_Results_TypeID is the unique identifier for the type Meta_configGet_Results.
const Meta_configGet_Results_TypeID = 0x9ec3cfd8ff4bae06

func NewMeta_configGet_Results(s *capnp.Segment) (Meta_configGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Results{st}, err
}

func NewRootMeta_configGet_Results(s *capnp.Segment) (Meta_configGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configGet_Results{st}, err
}

func ReadRootMeta_configGet_Results(msg *capnp.Message) (Meta_configGet_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configGet_Results{root.Struct()}, err
}

func (s Meta_configGet_Results) String() string {
	str, _ := text.Marshal(0x9ec3cfd8ff4bae06, s.Struct)
	return str
}

func (s Meta_configGet_Results) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configGet_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configGet_Results) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configGet_Results) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_configGet_Results_List is a list of Meta_configGet_Results.
type Meta_configGet_Results_List struct{ capnp.List }

// NewMeta_configGet_Results creates a new list of Meta_configGet_Results.
func NewMeta_configGet_Results_List(s *capnp.Segment, sz int32) (Meta_configGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configGet_Results_List{l}, err
}

func (s Meta_configGet_Results_List) At(i int) Meta_configGet_Results {
	return Meta_configGet_Results{s.List.Struct(i)}
}

func (s Meta_configGet_Results_List) Set(i int, v Meta_configGet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configGet_Results_List) String() string {
	str, _ := text.MarshalList(0x9ec3cfd8ff4bae06, s.List)
	return str
}

// Meta_configGet_Results_Promise is a wrapper for a Meta_configGet_Results promised by a client call.
type Meta_configGet_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configGet_Results_Promise) Struct() (Meta_configGet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configGet_Results{s}, err
}

type Meta_configSet_Params struct{ capnp.Struct }

// Meta_configSet_Params_TypeID is the unique identifier for the type Meta_configSet_Params.
const Meta_configSet_Params_TypeID = 0xd0b0c690855bac45

func NewMeta_configSet_Params(s *capnp.Segment) (Meta_configSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_configSet_Params{st}, err
}

func NewRootMeta_configSet_Params(s *capnp.Segment) (Meta_configSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Meta_configSet_Params{st}, err
}

func ReadRootMeta_configSet_Params(msg *capnp.Message) (Meta_configSet_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configSet_Params{root.Struct()}, err
}

func (s Meta_configSet_Params) String() string {
	str, _ := text.Marshal(0xd0b0c690855bac45, s.Struct)
	return str
}

func (s Meta_configSet_Params) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_configSet_Params) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configSet_Params) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_configSet_Params) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Meta_configSet_Params) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Meta_configSet_Params) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Meta_configSet_Params) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Meta_configSet_Params) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Meta_configSet_Params_List is a list of Meta_configSet_Params.
type Meta_configSet_Params_List struct{ capnp.List }

// NewMeta_configSet_Params creates a new list of Meta_configSet_Params.
func NewMeta_configSet_Params_List(s *capnp.Segment, sz int32) (Meta_configSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Meta_configSet_Params_List{l}, err
}

func (s Meta_configSet_Params_List) At(i int) Meta_configSet_Params {
	return Meta_configSet_Params{s.List.Struct(i)}
}

func (s Meta_configSet_Params_List) Set(i int, v Meta_configSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configSet_Params_List) String() string {
	str, _ := text.MarshalList(0xd0b0c690855bac45, s.List)
	return str
}

// Meta_configSet_Params_Promise is a wrapper for a Meta_configSet_Params promised by a client call.
type Meta_configSet_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configSet_Params_Promise) Struct() (Meta_configSet_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configSet_Params{s}, err
}

type Meta_configSet_Results struct{ capnp.Struct }

// Meta_configSet_Results_TypeID is the unique identifier for the type Meta_configSet_Results.
const Meta_configSet_Results_TypeID = 0xe275355b4989aaee

func NewMeta_configSet_Results(s *capnp.Segment) (Meta_configSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configSet_Results{st}, err
}

func NewRootMeta_configSet_Results(s *capnp.Segment) (Meta_configSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configSet_Results{st}, err
}

func ReadRootMeta_configSet_Results(msg *capnp.Message) (Meta_configSet_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configSet_Results{root.Struct()}, err
}

func (s Meta_configSet_Results) String() string {
	str, _ := text.Marshal(0xe275355b4989aaee, s.Struct)
	return str
}

// Meta_configSet_Results_List is a list of Meta_configSet_Results.
type Meta_configSet_Results_List struct{ capnp.List }

// NewMeta_configSet_Results creates a new list of Meta_configSet_Results.
func NewMeta_configSet_Results_List(s *capnp.Segment, sz int32) (Meta_configSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_configSet_Results_List{l}, err
}

func (s Meta_configSet_Results_List) At(i int) Meta_configSet_Results {
	return Meta_configSet_Results{s.List.Struct(i)}
}

func (s Meta_configSet_Results_List) Set(i int, v Meta_configSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe275355b4989aaee, s.List)
	return str
}

// Meta_configSet_Results_Promise is a wrapper for a Meta_configSet_Results promised by a client call.
type Meta_configSet_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configSet_Results_Promise) Struct() (Meta_configSet_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configSet_Results{s}, err
}

type Meta_configAll_Params struct{ capnp.Struct }

// Meta_configAll_Params_TypeID is the unique identifier for the type Meta_configAll_Params.
const Meta_configAll_Params_TypeID = 0x8c8ac84e843e98c6

func NewMeta_configAll_Params(s *capnp.Segment) (Meta_configAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configAll_Params{st}, err
}

func NewRootMeta_configAll_Params(s *capnp.Segment) (Meta_configAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_configAll_Params{st}, err
}

func ReadRootMeta_configAll_Params(msg *capnp.Message) (Meta_configAll_Params, error) {
	root, err := msg.RootPtr()
	return Meta_configAll_Params{root.Struct()}, err
}

func (s Meta_configAll_Params) String() string {
	str, _ := text.Marshal(0x8c8ac84e843e98c6, s.Struct)
	return str
}

// Meta_configAll_Params_List is a list of Meta_configAll_Params.
type Meta_configAll_Params_List struct{ capnp.List }

// NewMeta_configAll_Params creates a new list of Meta_configAll_Params.
func NewMeta_configAll_Params_List(s *capnp.Segment, sz int32) (Meta_configAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_configAll_Params_List{l}, err
}

func (s Meta_configAll_Params_List) At(i int) Meta_configAll_Params {
	return Meta_configAll_Params{s.List.Struct(i)}
}

func (s Meta_configAll_Params_List) Set(i int, v Meta_configAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configAll_Params_List) String() string {
	str, _ := text.MarshalList(0x8c8ac84e843e98c6, s.List)
	return str
}

// Meta_configAll_Params_Promise is a wrapper for a Meta_configAll_Params promised by a client call.
type Meta_configAll_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_configAll_Params_Promise) Struct() (Meta_configAll_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configAll_Params{s}, err
}

type Meta_configAll_Results struct{ capnp.Struct }

// Meta_configAll_Results_TypeID is the unique identifier for the type Meta_configAll_Results.
const Meta_configAll_Results_TypeID = 0xfd36e047f496768b

func NewMeta_configAll_Results(s *capnp.Segment) (Meta_configAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configAll_Results{st}, err
}

func NewRootMeta_configAll_Results(s *capnp.Segment) (Meta_configAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_configAll_Results{st}, err
}

func ReadRootMeta_configAll_Results(msg *capnp.Message) (Meta_configAll_Results, error) {
	root, err := msg.RootPtr()
	return Meta_configAll_Results{root.Struct()}, err
}

func (s Meta_configAll_Results) String() string {
	str, _ := text.Marshal(0xfd36e047f496768b, s.Struct)
	return str
}

func (s Meta_configAll_Results) All() (ConfigPair_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConfigPair_List{List: p.List()}, err
}

func (s Meta_configAll_Results) HasAll() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_configAll_Results) SetAll(v ConfigPair_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAll sets the all field to a newly
// allocated ConfigPair_List, preferring placement in s's segment.
func (s Meta_configAll_Results) NewAll(n int32) (ConfigPair_List, error) {
	l, err := NewConfigPair_List(s.Struct.Segment(), n)
	if err != nil {
		return ConfigPair_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Meta_configAll_Results_List is a list of Meta_configAll_Results.
type Meta_configAll_Results_List struct{ capnp.List }

// NewMeta_configAll_Results creates a new list of Meta_configAll_Results.
func NewMeta_configAll_Results_List(s *capnp.Segment, sz int32) (Meta_configAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_configAll_Results_List{l}, err
}

func (s Meta_configAll_Results_List) At(i int) Meta_configAll_Results {
	return Meta_configAll_Results{s.List.Struct(i)}
}

func (s Meta_configAll_Results_List) Set(i int, v Meta_configAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_configAll_Results_List) String() string {
	str, _ := text.MarshalList(0xfd36e047f496768b, s.List)
	return str
}

// Meta_configAll_Results_Promise is a wrapper for a Meta_configAll_Results promised by a client call.
type Meta_configAll_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_configAll_Results_Promise) Struct() (Meta_configAll_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_configAll_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfc487818328b97ef

func (c API) Version(ctx context.Context, params func(API_version_Params) error, opts ...capnp.CallOption) API_version_Results_Promise {
	if c.Client == nil {
		return API_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfc487818328b97ef,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:API",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(API_version_Params{Struct: s}) }
	}
	return API_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Stage(ctx context.Context, params func(FS_stage_Params) error, opts ...capnp.CallOption) FS_stage_Results_Promise {
	if c.Client == nil {
		return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_stage_Params{Struct: s}) }
	}
	return FS_stage_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) List(ctx context.Context, params func(FS_list_Params) error, opts ...capnp.CallOption) FS_list_Results_Promise {
	if c.Client == nil {
		return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_list_Params{Struct: s}) }
	}
	return FS_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Cat(ctx context.Context, params func(FS_cat_Params) error, opts ...capnp.CallOption) FS_cat_Results_Promise {
	if c.Client == nil {
		return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_cat_Params{Struct: s}) }
	}
	return FS_cat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Mkdir(ctx context.Context, params func(FS_mkdir_Params) error, opts ...capnp.CallOption) FS_mkdir_Results_Promise {
	if c.Client == nil {
		return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_mkdir_Params{Struct: s}) }
	}
	return FS_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Remove(ctx context.Context, params func(FS_remove_Params) error, opts ...capnp.CallOption) FS_remove_Results_Promise {
	if c.Client == nil {
		return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_remove_Params{Struct: s}) }
	}
	return FS_remove_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Move(ctx context.Context, params func(FS_move_Params) error, opts ...capnp.CallOption) FS_move_Results_Promise {
	if c.Client == nil {
		return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_move_Params{Struct: s}) }
	}
	return FS_move_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Pin(ctx context.Context, params func(FS_pin_Params) error, opts ...capnp.CallOption) FS_pin_Results_Promise {
	if c.Client == nil {
		return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_pin_Params{Struct: s}) }
	}
	return FS_pin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Unpin(ctx context.Context, params func(FS_unpin_Params) error, opts ...capnp.CallOption) FS_unpin_Results_Promise {
	if c.Client == nil {
		return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_unpin_Params{Struct: s}) }
	}
	return FS_unpin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsPinned(ctx context.Context, params func(FS_isPinned_Params) error, opts ...capnp.CallOption) FS_isPinned_Results_Promise {
	if c.Client == nil {
		return FS_isPinned_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "isPinned",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(FS_isPinned_Params{Struct: s}) }
	}
	return FS_isPinned_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Log(ctx context.Context, params func(VCS_log_Params) error, opts ...capnp.CallOption) VCS_log_Results_Promise {
	if c.Client == nil {
		return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_log_Params{Struct: s}) }
	}
	return VCS_log_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Commit(ctx context.Context, params func(VCS_commit_Params) error, opts ...capnp.CallOption) VCS_commit_Results_Promise {
	if c.Client == nil {
		return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_commit_Params{Struct: s}) }
	}
	return VCS_commit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Tag(ctx context.Context, params func(VCS_tag_Params) error, opts ...capnp.CallOption) VCS_tag_Results_Promise {
	if c.Client == nil {
		return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_tag_Params{Struct: s}) }
	}
	return VCS_tag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Untag(ctx context.Context, params func(VCS_untag_Params) error, opts ...capnp.CallOption) VCS_untag_Results_Promise {
	if c.Client == nil {
		return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_untag_Params{Struct: s}) }
	}
	return VCS_untag_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Reset(ctx context.Context, params func(VCS_reset_Params) error, opts ...capnp.CallOption) VCS_reset_Results_Promise {
	if c.Client == nil {
		return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_reset_Params{Struct: s}) }
	}
	return VCS_reset_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Checkout(ctx context.Context, params func(VCS_checkout_Params) error, opts ...capnp.CallOption) VCS_checkout_Results_Promise {
	if c.Client == nil {
		return VCS_checkout_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "checkout",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_checkout_Params{Struct: s}) }
	}
	return VCS_checkout_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) History(ctx context.Context, params func(VCS_history_Params) error, opts ...capnp.CallOption) VCS_history_Results_Promise {
	if c.Client == nil {
		return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_history_Params{Struct: s}) }
	}
	return VCS_history_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) MakeDiff(ctx context.Context, params func(VCS_makeDiff_Params) error, opts ...capnp.CallOption) VCS_makeDiff_Results_Promise {
	if c.Client == nil {
		return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(VCS_makeDiff_Params{Struct: s}) }
	}
	return VCS_makeDiff_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Quit(ctx context.Context, params func(Meta_quit_Params) error, opts ...capnp.CallOption) Meta_quit_Results_Promise {
	if c.Client == nil {
		return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_quit_Params{Struct: s}) }
	}
	return Meta_quit_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Init(ctx context.Context, params func(Meta_init_Params) error, opts ...capnp.CallOption) Meta_init_Results_Promise {
	if c.Client == nil {
		return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_init_Params{Struct: s}) }
	}
	return Meta_init_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigGet(ctx context.Context, params func(Meta_configGet_Params) error, opts ...capnp.CallOption) Meta_configGet_Results_Promise {
	if c.Client == nil {
		return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configGet_Params{Struct: s}) }
	}
	return Meta_configGet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigSet(ctx context.Context, params func(Meta_configSet_Params) error, opts ...capnp.CallOption) Meta_configSet_Results_Promise {
	if c.Client == nil {
		return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configSet_Params{Struct: s}) }
	}
	return Meta_configSet_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) ConfigAll(ctx context.Context, params func(Meta_configAll_Params) error, opts ...capnp.CallOption) Meta_configAll_Results_Promise {
	if c.Client == nil {
		return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_configAll_Params{Struct: s}) }
	}
	return Meta_configAll_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Version(API_version) error

	Stage(FS_stage) error

	List(FS_list) error

	Cat(FS_cat) error

	Mkdir(FS_mkdir) error

	Remove(FS_remove) error

	Move(FS_move) error

	Pin(FS_pin) error

	Unpin(FS_unpin) error

	IsPinned(FS_isPinned) error

	Log(VCS_log) error

	Commit(VCS_commit) error

	Tag(VCS_tag) error

	Untag(VCS_untag) error

	Reset(VCS_reset) error

	Checkout(VCS_checkout) error

	History(VCS_history) error

	MakeDiff(VCS_makeDiff) error

	Quit(Meta_quit) error

	Ping(Meta_ping) error

	Init(Meta_init) error

	ConfigGet(Meta_configGet) error

	ConfigSet(Meta_configSet) error

	ConfigAll(Meta_configAll) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 24)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfc487818328b97ef,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:API",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := API_version{c, opts, API_version_Params{Struct: p}, API_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "stage",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_stage{c, opts, FS_stage_Params{Struct: p}, FS_stage_Results{Struct: r}}
			return s.Stage(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_list{c, opts, FS_list_Params{Struct: p}, FS_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "cat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_cat{c, opts, FS_cat_Params{Struct: p}, FS_cat_Results{Struct: r}}
			return s.Cat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_mkdir{c, opts, FS_mkdir_Params{Struct: p}, FS_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "remove",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_remove{c, opts, FS_remove_Params{Struct: p}, FS_remove_Results{Struct: r}}
			return s.Remove(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "move",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_move{c, opts, FS_move_Params{Struct: p}, FS_move_Results{Struct: r}}
			return s.Move(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "pin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_pin{c, opts, FS_pin_Params{Struct: p}, FS_pin_Results{Struct: r}}
			return s.Pin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "unpin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_unpin{c, opts, FS_unpin_Params{Struct: p}, FS_unpin_Results{Struct: r}}
			return s.Unpin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2b3585db47cd4f9,
			MethodID:      8,
			InterfaceName: "capnp/api.capnp:FS",
			MethodName:    "isPinned",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := FS_isPinned{c, opts, FS_isPinned_Params{Struct: p}, FS_isPinned_Results{Struct: r}}
			return s.IsPinned(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "log",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_log{c, opts, VCS_log_Params{Struct: p}, VCS_log_Results{Struct: r}}
			return s.Log(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "commit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_commit{c, opts, VCS_commit_Params{Struct: p}, VCS_commit_Results{Struct: r}}
			return s.Commit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "tag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_tag{c, opts, VCS_tag_Params{Struct: p}, VCS_tag_Results{Struct: r}}
			return s.Tag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "untag",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_untag{c, opts, VCS_untag_Params{Struct: p}, VCS_untag_Results{Struct: r}}
			return s.Untag(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "reset",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_reset{c, opts, VCS_reset_Params{Struct: p}, VCS_reset_Results{Struct: r}}
			return s.Reset(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "checkout",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_checkout{c, opts, VCS_checkout_Params{Struct: p}, VCS_checkout_Results{Struct: r}}
			return s.Checkout(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      6,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "history",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_history{c, opts, VCS_history_Params{Struct: p}, VCS_history_Results{Struct: r}}
			return s.History(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfaa680ef12c44624,
			MethodID:      7,
			InterfaceName: "capnp/api.capnp:VCS",
			MethodName:    "makeDiff",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := VCS_makeDiff{c, opts, VCS_makeDiff_Params{Struct: p}, VCS_makeDiff_Results{Struct: r}}
			return s.MakeDiff(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      0,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "quit",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_quit{c, opts, Meta_quit_Params{Struct: p}, Meta_quit_Results{Struct: r}}
			return s.Quit(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      1,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      2,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "init",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_init{c, opts, Meta_init_Params{Struct: p}, Meta_init_Results{Struct: r}}
			return s.Init(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      3,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configGet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configGet{c, opts, Meta_configGet_Params{Struct: p}, Meta_configGet_Results{Struct: r}}
			return s.ConfigGet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      4,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configSet",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configSet{c, opts, Meta_configSet_Params{Struct: p}, Meta_configSet_Results{Struct: r}}
			return s.ConfigSet(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83e6cb306e77e311,
			MethodID:      5,
			InterfaceName: "capnp/api.capnp:Meta",
			MethodName:    "configAll",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_configAll{c, opts, Meta_configAll_Params{Struct: p}, Meta_configAll_Results{Struct: r}}
			return s.ConfigAll(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// API_version holds the arguments for a server call to API.version.
type API_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  API_version_Params
	Results API_version_Results
}

type API_version_Params struct{ capnp.Struct }

// API_version_Params_TypeID is the unique identifier for the type API_version_Params.
const API_version_Params_TypeID = 0xc6920dee4bb4a443

func NewAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func NewRootAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func ReadRootAPI_version_Params(msg *capnp.Message) (API_version_Params, error) {
	root, err := msg.RootPtr()
	return API_version_Params{root.Struct()}, err
}

func (s API_version_Params) String() string {
	str, _ := text.Marshal(0xc6920dee4bb4a443, s.Struct)
	return str
}

// API_version_Params_List is a list of API_version_Params.
type API_version_Params_List struct{ capnp.List }

// NewAPI_version_Params creates a new list of API_version_Params.
func NewAPI_version_Params_List(s *capnp.Segment, sz int32) (API_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return API_version_Params_List{l}, err
}

func (s API_version_Params_List) At(i int) API_version_Params {
	return API_version_Params{s.List.Struct(i)}
}

func (s API_version_Params_List) Set(i int, v API_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Params_List) String() string {
	str, _ := text.MarshalList(0xc6920dee4bb4a443, s.List)
	return str
}

// API_version_Params_Promise is a wrapper for a API_version_Params promised by a client call.
type API_version_Params_Promise struct{ *capnp.Pipeline }

func (p API_version_Params_Promise) Struct() (API_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Params{s}, err
}

type API_version_Results struct{ capnp.Struct }

// API_version_Results_TypeID is the unique identifier for the type API_version_Results.
const API_version_Results_TypeID = 0xd81779091ced5513

func NewAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func NewRootAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func ReadRootAPI_version_Results(msg *capnp.Message) (API_version_Results, error) {
	root, err := msg.RootPtr()
	return API_version_Results{root.Struct()}, err
}

func (s API_version_Results) String() string {
	str, _ := text.Marshal(0xd81779091ced5513, s.Struct)
	return str
}

func (s API_version_Results) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s API_version_Results) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// API_version_Results_List is a list of API_version_Results.
type API_version_Results_List struct{ capnp.List }

// NewAPI_version_Results creates a new list of API_version_Results.
func NewAPI_version_Results_List(s *capnp.Segment, sz int32) (API_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return API_version_Results_List{l}, err
}

func (s API_version_Results_List) At(i int) API_version_Results {
	return API_version_Results{s.List.Struct(i)}
}

func (s API_version_Results_List) Set(i int, v API_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Results_List) String() string {
	str, _ := text.MarshalList(0xd81779091ced5513, s.List)
	return str
}

// API_version_Results_Promise is a wrapper for a API_version_Results promised by a client call.
type API_version_Results_Promise struct{ *capnp.Pipeline }

func (p API_version_Results_Promise) Struct() (API_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Results{s}, err
}

const schema_ea883e7d5248d81b = "x\xda\x9cY}t\x14U\x96\x7f\xb7\xaa\x9b\x9a@'" +
	"\x9d\xa2:_\x8e3\xddbp\x94\x95\x08\x09\xec@f" +
	"5\x1d @\x80@W\x02\x1c\x06V\x87\"]\xe9\xd4" +
	"\xd0_\xa9\xae$d\x0eld\x85QPv\xc7YW" +
	"v\x9cA\x06\x8e\xac\xe0\xc2\x82+\x1etW\xce\x8a\x02" +
	"\x07\x14vq\x05%\xee\xe2\x0a\x82\xb2\x1e\x11Qt\x81" +
	"\x85\xd3{\xee\xeb~\xd5/Iw#\xfe\x95t\xbd\xfb" +
	"\xee\xbb\x9f\xbf{\xdf}c\xee(\xf0\x0bc\x9d;K" +
	"\x08Q\xaf;\x87$\xe5\x8f\xbb\xa3c\xde\xfe\xe4\x11\"" +
	"\x17\x8b\xc9\x1f\x9e\x9c\xde\xbc\xe2\x81\xc7>#\x04\x94\xbd" +
	"C_P\x0e\x0c\x95\x08\xa9\xd97\xf4QP\xf6\x0e\x93" +
	"\x08I^)\xd5\xef\x1d\xf3\xec\xfeG\x89\xaa\x00\x10\xe2" +
	"\xc0\xe5-\xc3F\x00\x01e\xc7\xb0:\x02\xc9\xc7\xd6=" +
	">\xdb\x980\xe91\"+l\xfd\x9daC\x818\x92" +
	"\x07\xff\xee\x81U\xb3\x0f\xad}\x82\xc8%l\xe5\xd5a" +
	"\xd5\xb8\xf2\x07a\xe8\xfa\xf2\xad\xcf\xff>\xb5\xc7)\xe0" +
	"\xd2\xa6a\x022\xdd2\xac\x9b@r\xc8?\xceL\x9e" +
	"\xfc\xf77\x9fMmu\x02\x12\x14\xb8j\x91@v\xe1" +
	"\xa9\xdf\x96~)LY\x7f\xfd\xd94\x07J0\xd6E" +
	"9\x8c\xa7\x04\xeb\x17\x8e\xb8;\xbe<\xb8\x91\xe70\xcf" +
	"U\x8d\x04\x0fR\x82\x09\xbfz\xe3\xb7G\xff\xe3\xfcF" +
	"N1e\x85\xeb\x1a\x01e%]_5n\xe1\xe6\xaa" +
	"_\x8c\xd9L\xd4b\xe0\xec\xe4\x14\x91p\x93\xeb-e" +
	"\x87KRv\xb8\xbc5\xa7]\x7f\x0d\x04\x92\xab\xffd" +
	"\xc5\x81\x96w/>Gd\x0fcg\x14]#\x8e\xe4" +
	"\xb8\xf9?N\xceZT\xb0\x8d\x13Ui*\xfa\x8a\x80" +
	"\xa2\x16\xe1A\x91\xe3\x9fF\x0bB+\xb6\xa56Rc" +
	"(\x1dE(Hg\x11\xdaB\x1c\xee\x92\xab\x96\xfc\x81" +
	"\xdf_\xf3N\xd1P\xd4\xa4\x8f2\x18\x15\xfb\xea\xf7\xd7" +
	"\x0f\xae\xf9\x07\xce\x03W\x8b\x04\xb4\xb3V\xf4\xb3\xb7\xcb" +
	"\xaf\x8f\xd9\x95\xd61\xb5\xf7T\x115\xd3i\xca|O" +
	"\xc7\x87\xe3jO.\xda\x95>\x1c\x95\xab\xa9wS\xf7" +
	"6\xbaw\x12H^\xbaq\xf9\xbf\xf6\xdd\x1f\xdb\xc3\xb9" +
	"J\xb9\xe0F\xe9.\xb9\x91\xc1\xc4\xce\xbf\x98\xba\xf4\xd4" +
	"\xb1=\x19\xb5k\x9a\x8ao\xc3\xc3w\xfed\xd6\x9d\xbf" +
	"9[\xf8\xcf\xdc\xca\xf8\xe2\xe1\xb82s\xa3gyw" +
	"\xe3\xb6\xbd\xdc\xca\x8f\x8a\xa9\xc0W\xaa\xfa>\xf8\xb0\xed" +
	"\xd4\xeb\xbc\xad\xa0\x18m\xe5,FU'?\xb7{\xe6" +
	"\x17\x85\xbf=\xc8\xed\x1c\x99:\xed\xa1K\xbb\xee\xda\xfe" +
	"W\xf3\x0e\xf3V*\xc4%PJ\xe8\xd6\xb6?\xfe\xf2" +
	"\x99C?^|\x98\xc8\xc5\xc0\xb9\xd3\x89G\x8c/~" +
	"A\xb9\xbf\x18\xb7L,\xf6\xa23?\x7f\xa6\x0c\xd6N" +
	"\xd9~\x98\x0b\xdd\x0d2\x0d\xea\xf7[\xda\xeb\xee\xda\xfa" +
	"\xd2a\xce\xd8\xabe\xaa\xd5\xb7\x17\xd45O|u\xf9" +
	"HfE\x89\xc8\x18\x00\x0d\xdb\x17\xad\xfe\xcd\xc1]\xc7" +
	"\xd2\xa1H\xa3]\x95i(\xfe\\F\x1b\xea_\xfe\xb2" +
	"k\xf6\xb2\xb3\xc7\x07\x88F#\xede\xf93e\x9f," +
	")\xfbd\xafrAF\x8f\x14j\xab\xceF\xa6_|" +
	"?\xed2\xaa\xe9\xea\xe1\xd4e\xeb\x86\xa3\xa6\xca\xbc\x0b" +
	"\xb7\x17\xf4\x94\x9d$\xaa\xc7N\xd9\xbd)\x82\x03\x94\xe0" +
	"\xe9u5\xda\x9d\x1b\x1b\xfax\x0e\xe7\x86\x0fG\x82\x0b" +
	"\x94`\xdb''\x9b\xfe\xcdz\xb7o\x80@T\xa7B" +
	"\xe5-\xa5B\x91\x94\x0a\xc5\xab\xd4+\x9f\x12H^~" +
	"s{\x83\xe3\xe3\xad\xff\xc9\x99d\xa4\x87\x1a\xeb\xa5\x9a" +
	"\x13\xc7\x1e\xa9\xaa\xfdo\xce\x8c\x85\xa9\x95\x7f2\xef\xdd" +
	"\xff\xca\x86\xcb\x1fq\x8e\xfcF\x19\x85+o|=\xd3" +
	"\xf3\xe8\xd9\xb9\xa7\xd3\xd2\xa7cV\xa1\xe2\x9fS\xd0\\" +
	"\xef\xfd\xe2\xe9\xd5\xae\xfbN\x9d\xe6\xb8\xd6{\xa8\x0b\xbe" +
	"xaM\xe3\xa2\xf1\x9dg\xb8\x95{<\xb5\xb8r\xf5" +
	"\xf8\xf2\xdd\x0f.x\xe9\xcc \xd0\x93=\xcf(\x15\x1e" +
	"\xa4,\xf1L\x13\x94\x95%\x08z?\x9b|Q\x9c\xf2" +
	"\xc3+gx\x03\x19%4\x98:J\xd0@k\xad\x0f" +
	"\x9f\xba\xe3L\xd3\xb9\x01\x06\xa2\xd9\xf1d\xc9\x07\xca\x86" +
	"\x12I\xd9P\xe2U\x0e\x97\xa0\xc07\x0e\x0ey\xed\xe4" +
	"\xe2\x92O\xb9\x0c\xaf\x19YJ3xti7\x81\x8b" +
	"\xfb\x9f/\x7f\xf3\xfc]\xe73R\xaf)\xa5\xfa\xcc\xbf" +
	"\xfb\x88\xef_\xc7\xdf\xf3?|Pw\x94\xd2\xf4\xed," +
	"E9\xfe\xaf\xc5\xf1\xcdC\xdb\xc5\x0b\xe9\xd0J\xa1s" +
	"\x8a\xf3\x8eR\xf4\xcd\xd7O\x09\x0b\xe6WW~\xcd\xf9" +
	"fM\x19\xf5\xc0\xcc\xda\x9d\xca\x8b\xa3\x8f_\xe6u\xec" +
	"(\xa3[{\xca(\xc4\xde\xb9p\xc1\xc4\x82\x91\xff\xcb" +
	"\x13\xfc\xae\x8c\x1e\xbe\x81\x124\x9f\x9e\xf4/\x8fx\xe7" +
	"]\xc9f\x84\xa3eo)}e\xf8\xdf\x8924\xc1" +
	"\xb6\x07\xfa\xeaV\x9b{\xaer\xfe\x1e[Nu\xec\xbb" +
	"\xee\x1e\xfd\x93\xdd\x8ek\xfc1\x15\xe5\xa3\xf0\x98;\xca" +
	"\xf1\x98\xca\xa9\xfb\x87_|\xf8\xef\xaf\x0dr]}\xf9" +
	"f\xa5\xb1\x1c\xe9\x1b\xca%AYW\x81\xae\xbb\xb8\xfe" +
	"\xf1\xea\xf2e\xd3\xaf\x0f\xa2\xee\xac\xd8\xac\xac@\x12\xa5" +
	"\xa7b\x9a\xb2\xa9\xe2\xa7\x84$\x1f\xefz\xfa\xf2\xb4\x8f" +
	"\xfe\xf4\x06_$6U\xd02\xb3\xad\x02\xcf\xfe\xa9\xf0" +
	"\xb7'~\xd4\xfd\xeb\x1b<\x80*}\x15\x08\x7f\xa7*" +
	"P\xaf\xae_/\xfe\xbcd\xce\xbbI\x9e\xc3\xfd\xb7\xd1" +
	"Tj\xb8\xad\x8eLH\xb6j\xf1h\xfc>-\x0eF" +
	"\x15\xfd\xb7\xd6\xdd\xa4[Z\x00@-\x17\x9d\x84\xd8)" +
	"\x02,\xaa\xe5\x17G\x11A\xde\"A\x06\x85\x80\x9d\"" +
	"\xff\x0e\xd7\xd6I \xd8\x9e\x07\x8c\x1d\x82\xc1\xb3\x12\xd7" +
	":%\x10\xed\xda\x07\xac\x8c\xcaF3\x11dM\x82\x0c" +
	"\x18\x01\xcb\x15y\x1e\xae5I\xe0\xb4\x0b60\xbb\xc8" +
	"\xf5\xb86Qrwt\x1a\x96\x1f\xdcq#\x1a\xf2\x83" +
	"\xdb\x88\xe2\xafdk,\xdaf\x84\xa6\xe9\x042\xbfZ" +
	"\xfa\xfd\xaa\x0f\x13\x08\xfb!\x00`\xdbAdv\x98\xda" +
	"Re$\x02F4\xaa\x07+\x9b\xf5D\xa7\x14\xb6\x12" +
	"\xaaCt\x10\xe2\x00B\xe4\xc2\x19\x84\xa8.\x11\xd4r" +
	"\x01\x92\x8c\x90\x10\x02@\x04@\x88\xce\xc60ai!" +
	"\x9dr\x0b[\x09B\x06\xd3\xa0\xed\xab\x98l\xe1\xca\x80" +
	"W3\xb5H\"\x0f\xaf\x00% \xea\x0fl\xc1\xeei" +
	"&D\xbd[\x04u\x9c\x002\x00\x05)y,J;" +
	"F\x04\xf5\xcf\x04H\x86c\xadZ8\xa0Y\x04\xda\xc1" +
	"E\x04p\x11H\x9az<\x16\xd0\xacv\xd4\x80}\xcb" +
	"'\xdd4\xdd\xaal\xaeK)\xc2[\xa5\x9a\xa0,\xa0" +
	"z\x04\xf0vi\xe1N=7\xb7\xa9-U\x9d\xd1\xb8" +
	"\x11\xb5u\xe0\xd8\x8c\xca\xb0q\xc75\xab\xfd;\xcb\x94" +
	"\xb6\x18\xcfkD\x86\x97\xb4T\xef\x19\xc4J\xe0\x04j" +
	"\xd5\xb2\xab\xd5O\x9e\x98i\x81\x83\x08\xe0\xc8\xc6\xa4\xc5" +
	"\xd2\xac\xc6h[\x8c\x10\xcc!\x07\x08\xc9\x87\xfef\xa3" +
	"\xba\xf7\xbd\xb5\x07\x88\xea\x10\xa0\xbe\x12\xc0E\xc8X\xf8" +
	"KH2R\xa7\xcfH\xf84_\xc2\xd2\xac\xd1ac" +
	"\xa9\xee\x0b\xea\x89V\xd3\x88[F,\xea\x8b\xb5\xf9\xb4" +
	"h\x8f/\x1a\x0b\xea\x84\x10\xf5v[\xa6\x97Q\xa6]" +
	"\"\xa8\xafq~~\x15?\xee\x16A}]\x00\x10<" +
	" \x10\"\xef\xc5o\xaf\x88\xa0\xee\x17@\x16\xc1\x03\"" +
	"!\xf2>t\xd4k\"\xa8\x87\x04\x90\x1d\x0f{\xc0A" +
	"\x88|\x00?\xbe.\x82zD\x00\xd9\xe9\xf4\x80\x93\x10" +
	"\xf90~\xdc/\x82zL\x00y\x88\xe0\x81!\x84\xc8" +
	"G'\x11\xa2\x1e\x12A=>\xc0A\xeev-\xd1\x0e" +
	"\x85D\x80B\x02\xee\x84\xf1+\x1d\x0a\x88\x00\x05\x04\xbc" +
	"\x06\xea\x90\xf9\x95\x98b\x98,Y\xbcA=n\xb53" +
	"\xa3\xf6Fb\xc1\xb9FD\xcf\xed\xa9\xf9\x93[\xaa\xc2" +
	"\xb1Pe]\xa0\x7f~\x0cte\x96h\xb8id\xf5" +
	";\xc4\xd2\xecC\xf8\x14\xc3\x90\xaa\x14A\x1d\xc3\x99~" +
	"\xf4\xa4L\xdeI\xa6\xde\xc5\x18\xf7ZZh\xb6\x16\xc9" +
	"\x9f\x08\xa6\x1e\x89u\xd9\xd9|k\xa9 q|(\x17" +
	"\x86/\x8c\x80__\x1a4\xccl\xa01*\xa3\x91\xad" +
	"\x90I\x88z\xaf\x08\xea\x84A'\x9b\xbaf\xe9\x01\x8d" +
	"xM=j%rC\x1e\x9a0\xa2-\xd5\xa7\x18m" +
	"mx\xaa\x84vt\xd9\xa76,!D\x9d\"\x82\x1a" +
	"\xe0\xec\xd8\xb4\x90\x10u\x96\x08\xea\x02\x01d!\x1d\xc3" +
	"\xf3P\x96\xb9\"\xa8\x8b\x05\xc4\xaaH\xcc\xd2\xe7t\x13" +
	")\xaa\x9b\xb6P\xed\xba\x16l\xd6\xbb\xe6\x10\xb1;:" +
	"\xf0c3\xf1\xd2=ys\x9f\xda.\x8b\xb3'\xdd\xc4" +
	"\xd9\xbd\x09\xb35\xc0\x99\xa77\x98\xb0\x02y1\x0b\xcd" +
	"\xd2\x1a\x8bD\x0c+\xe5+\xd1Jd'\xea\x8cb\x00" +
	"\xa6\xfc\x09\x19\x9a!\x03C4\x8f\xc7)\xc0~\x8f4" +
	"\xb0\xe5\xa8\x0f4Vu\xe9f\xc2\x88\xa5\x90Z\xccQ" +
	"\x8f\xecb\x99&\xba\xa5\xd32\xdd\x07\x86\x0a\"\xa7\xc7" +
	"\xde\xbd\x02\x01h\x99\x08\xeaS\x9c\x03\x9eD\x07<!" +
	"\x82\xba\x95\x8b\x92-\xf8\xf1\x8fiH\x14\xc5\x14\xd2\xbd" +
	"Z\x9b\x86D\xc4/\x87#\x85tG\xb1\x1e\x1e\x11A" +
	"=/\x80W\x0b\x06\xf5 \x14\x11\x08\x88\x00\xc5\x99\x8b" +
	"5\x01\xfc\xd8\x9b\xca\xcd<\x04F(\x1a3\xf3\x10\xd4" +
	"Et3\xc4\xaf\xdb\x8dij\x9d6#a\xa3\xd5\xc2" +
	"\xe2\x9b\x9b(k\xe5\xc3\x8e\xc7\x86\x8d|\xd02(\x88" +
	"\x84\x01A\xc2\xca^\xde\x12\xdb\xc2\x95\xd8\x9b\xe1a5" +
	"\x87\x87\\\xdd\xcd\xd1\x16\xd8\xe2L7\x12V\xcc\xeci" +
	"pG-\xb3'{\x0d\xbd\x9d\xd6P\x19>K\xce\x89" +
	"\xea>\xdc \xc4\xcc\x1e\x9f\x8e;|m1\xd3\xa7\xf9" +
	"\xdcmFX\xa7\x1d\x9a\x0d6\x18\x84~\x11\xd4Y\x9c" +
	"\x90\x8d\xb5\x1c\x02\xb10jBu\xa6\x8b\xa0\xce\x1d\x10" +
	"\xaeu\xad\xedZ4d\xcb.\x99z\x1b+u\xd9\xf3" +
	"\xb7=\xa5K\xd6\xfeqR:'*\x05\xe8M\xd3e" +
	"\x9co\xdf\xb8s9\x9f\xcf\xca|\xdc=\x02\xf4\xa6\xe9" +
	"\x06\xf5,\xd9\xf0\x88\x86\x12\xe4\xec\x9f\"\x89Pn\xcf" +
	"\xcd\x8a\x85\x1a\xd0\x05\xb9Z\x9f\xf2\xb4\xdb\xd6&[\x8c" +
	"h(\xac\xfb\xc2\x10\x0b\xa5\xbcF@-\xb6O\xd4\xd0" +
	"S\x7f.\x82\xda\xceyJG1\x16\x8b\xa0\x869O" +
	"\x19H\x19\x14A}\x98K\xf8\x15\xa3\xd2x\xb1J\xe8" +
	"\xdf\x8e\xf0\xd2\xbb--\x94`\xf6\xc6oE\x04\xdcA" +
	"\xcd\xfa.\xfd\xea\xcd\xfaw\xbc\x8c\xe4\xc9Ij\xedv" +
	"\xbdui\xac\x93\xe2\xbf;{\xd6\xf5#c\xb53{" +
	"\xceeM9\xae\x05\xf1\xb6\xc5\xccV=w\x99\xceH" +
	"=\x08%r\x81\xc0 \xb4\xb0\x11\\\x9c\xda\x82\xee\xaf" +
	"\xa4\xb7G6H\x056\x85Ud\xa8&\x82\xe2\x04\xbc" +
	"?\xb2\xdb+\xb09\x82|\x15\xef\x88\x17\xf0\xfe\xc8\xa6" +
	"\x92\xc0\xe6\xa0\xf2\xe9\x11D\x90O\xe0\xfd\x91\x8d\x0d\x81" +
	"M\x0f\xb0I\x15\xe4\xbdx\x7fd\xd3H`\x830\xf9" +
	"\xc5\xda\xd4}\xd5i\xcf\x0a\x81M$\xed\xfb\xea\x10{" +
	"\xb2\x07lL&\xaf\x1c\x91\xba\xafJ\xf60\x17\xd8$" +
	"I6\xf0\xbc\x07%\xf8\x81=\xd7\x036\x88\x96\xd5\x19" +
	"D\x90\x1b%/\xbd\xa0\xf9\xc1\x1d6\x12\x96\x1f\xa4V" +
	"\xcd\xf2\x83\x976`~\xa8K\xa1\xb2\x1f\xdc\xa9?R" +
	"\xdc\x88\xfa\xc1K\xe3\xcb\xdf\xef>\x99\xe3v\xca\xa3\xcb" +
	"\xf7)\xb8v\xd2N\xa6.\x0dh\xa2a\xde\x0clg" +
	"\xea=\xf7\xcd\xd7\xc2\x9d\x82\xee\x8bk\x86\xe93\xa2>" +
	"\xab]\xf7\xb5\xc6\xdc\xc8\x82\x90\x9bV\x84\x11\xd9+\x82" +
	"\xd4\xa5\x85\xf37K\xa6\x9e\xd03)\x95\xa3o\xcdz" +
	"N?\xed\xf9\x9c\xc8\x11\xe1F4o\x16Lm\xa9B" +
	"w\xda\x10\x90\x0b\xd0\x11\xd4\x0c=\x91\xb3%\xc8w\xba" +
	"\xad&\x87\x8838\xf0cj\x1a\xd5i\xf0\x8bs\x88" +
	"\x18A)\xdaEP-\x0e\x11;p{\\\x04u\xb9" +
	"\x00\xc9%ZB\x1fp\xd3\xf7\xc6\xba\xb9N\xbaw\x89" +
	"\xd6\xbaT\x8f\x06mK\xc5\xb5D\xa2;f\x06\xf3\xce" +
	"\x06\xec\xcbE\x1et\xcc\xb4\xb4\xd9.:|\xc9\xba\xe9" +
	"\x9d\x89\xdd\x00o\xd9\x11\xf6\xe8x\x80#\xec\x84\xa0\x0d" +
	"\xa8f\x98\xa9*v+!\x9d0[\x07x\xba\x98\x80" +
	"\x14LX\x83\xbf\xe6\x0b\xf3\xdc\xd1\xd7\xef:\xc5*G" +
	"\xae\xb4\x0f\x1ammP\x9cyV\x18p\xb0\x8d\xd7\xd2" +
	"\xfc\xc9\x14\xb0}\x14\xb0\xd9+\x11\xb0\xe9\xaa|\x09a" +
	"\xf0\x1c\xc25\x1b\xcb\x03{S\x91\xfb\x10Z\x8f\"\\" +
	"\xb3G\"`o'\xf2>\xdc\xf72\xc25\x9b\xe4\x02" +
	"{q\x91\xb7!|n@\xb8f\xa3g`\x03X\xf9" +
	"I\\[\x8dp\xcd&\xed\xc0\x86\xf1r\x0fBk\x07" +
	"\xc25\x9b\x80\x03{m\x90\xf5ID\x90\x7f\x8ep\xcd" +
	"\xde\x8c\x80\x8dn\xe5&\xdc\xd7 I\xe1X\xc8\x0fu" +
	"\xa9V\xc7\x0f\x92\xa5\x85(\xe8\xa6\xfeR\xeb\xfb!\xc9" +
	"\x8a.\x05_\xd6\x9a\xf9!\xc9,?\x08\x943\xa6\xac" +
	"\x0f4R\x10\xa5\xa6doA\xc0\xde;d\x19Et" +
	"J\xac!\xf3\x83\xea\x02\xc8\x8c\xfe\x09\xc9\xcc\x92\x09\xc9" +
	"\xbc\x83~\x87Aa\xb6\x99\xd5\x88L\x1aHZ8\x9c" +
	"I\x01\xfbq W\x0a0\x94\xcbr\x19\xce6'\x98" +
	"\xc1\xcd\x09\xccX\xcc\xb2\xb36\xa2-\x9b\xa2\xc7SP" +
	"\x93\xb3\xf9\xcc\\cX\xe0\xe7\x9a'\x9az<l\x17" +
	"\x8d\xff\x0f\x00\x00\xff\xff\x9f'\xdb&"

func init() {
	schemas.Register(schema_ea883e7d5248d81b,
		0x83e6cb306e77e311,
		0x87c49e302c6516f8,
		0x884238694e8b8d88,
		0x8c8ac84e843e98c6,
		0x9ba7a818970a029c,
		0x9ec3cfd8ff4bae06,
		0x9efc974402f016f6,
		0x9f647c7028225a97,
		0x9fe8d2cd92c27a38,
		0xa2305f2ea25a3484,
		0xa4efd353c57d2b85,
		0xa9095b4cff1e5634,
		0xa97d67096ee7d46d,
		0xa99c622e110c1203,
		0xab89c6fc9bf26f2a,
		0xb030fc18cb3b0e61,
		0xb05bd83a34de71b7,
		0xb76f3dc1dcf4fdf1,
		0xb7d0dd6b467e7539,
		0xba0de490234c27af,
		0xbda949777c149f4b,
		0xc0dd66dedad92ef8,
		0xc6920dee4bb4a443,
		0xc9558eac26b0f15e,
		0xc9601ec89a6aa066,
		0xc9ac448a01179aec,
		0xc9b3a8263f6853d7,
		0xccf4f28c8951edf6,
		0xd0b0c690855bac45,
		0xd4e4784e766af065,
		0xd7ef486de484610d,
		0xd81779091ced5513,
		0xd9459f2361338d96,
		0xd9d374ce4dd8e6a9,
		0xdba8e30445acc3f4,
		0xdf3a2e83d0d533b3,
		0xe0f49db8c42c72b2,
		0xe154e487144bf3c2,
		0xe1dd2f0c85965fd6,
		0xe275355b4989aaee,
		0xe2b3585db47cd4f9,
		0xe2f81b4403ef433b,
		0xe54de22194de748a,
		0xe71560d8bc06c6fd,
		0xe826e800c318a7c4,
		0xe92935bf20cc2856,
		0xed03ac5ef50453fb,
		0xf3243256580294f3,
		0xf4d42db113af3a4b,
		0xf7250939585a23f6,
		0xf8551f83bb42e152,
		0xf9b772853fd93ea9,
		0xfa04b4272d0ffcd9,
		0xfaa680ef12c44624,
		0xfc487818328b97ef,
		0xfd36e047f496768b,
		0xfd86771dd5950237,
		0xffd34f15ec608676)
}
